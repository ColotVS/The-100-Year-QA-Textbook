public class chapter_19 {
    //#19.1 Архитектура серверного ПО: Теория

    //План урока
    //Обособленные серверные приложения
    //Двузвенные приложения
    //Трёхзвенные приложения


    //Введение
    //Хорошему инженеру по качеству программного обеспечения необходимо знать основные принципы построения архитектуры ПО.
    //Это дает следующие возможности и преимущества:

    //1
    //Проводить более глубокое тестирование приложений, в том числе при устаревшей или неполной документации.


    //2
    //Более тщательно локализовывать проблемы - в том числе, при неполном описании бага или отсутствующих важных деталях.
    //Хорошее умение локализации багов приводит к быстрому и точному назначению ответственного за его фикс,
    //что сильно экономит время и силы всем вовлеченным командам
    //(нет "игры в футбол", когда баг изначально назначен не на ту команду, например,
    //когда баг в серверной части ПО ошибочно назначается на команду разработки клиентской части ПО).

    //3
    //В целом лучше выполнять свою работу, в том числе: тщательно просматривать и улучшать тест-кейсы
    //(и даже находить баги в них), создавать новые, актуализировать документацию продукта, и многое другое.

    //Понимание архитектуры приложений и всех сопутствующих технологий серверного ПО -
    //одно из ключевых отличий между "типичным" тестировщиком и Software-инженером.

    //Очень часто ПО разрабатывается быстрее, чем актуализируется документация и тест-кейсы:
    //руководство хочет быстрее выпускать новые фичи, чтобы опередить конкурентов;
    //фреймворки и языки программирования быстро эволюционируют;
    //аналитики и тестировщики просто не успевают поддерживать актуальное состояние всей документации.

    //Большинство "типичных" тестировщиков работают с существующими (т.е., зачастую устаревшими) требованиями,
    //тестируют на основе ранее написанных (т.е., не факт что актуальных) тест-кейсов,
    //и в основном работают с UI из-за отсутствия более глубоких технических знаний
    //(т.е., не могут помочь с тестированием более глубоких сущностей, например серверной части ПО).
    //Это сильно затрудняет развитие навыков, рост ответственности,
    //влияние на общее качество продукта, и как следствие - карьерный рост.

    //Software-инженеры хорошо понимают каждый участок разрабатываемого ПО и могут эффективно работать не только с UI.
    //Они могут заметно улучшить существующие тест-кейсы, документацию, и качество продукта в целом -
    //что быстро делает их незаменимыми членами команды.


    //Обособленные серверные приложения

    //Большая часть современного ПО поддерживает работу с сетями и может работать как клиент или сервер, а порой выполнять и обе роли.

    //Сегодня мы заглянем глубже в устройство серверного ПО, посмотрим,
    //что скрывается внутри приложений и как они взаимодействуют с внешним миром.
}
