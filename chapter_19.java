public class chapter_19 {
    //#19.1 Архитектура серверного ПО: Теория

    //План урока
    //Обособленные серверные приложения
    //Двузвенные приложения
    //Трёхзвенные приложения


    //Введение
    //Хорошему инженеру по качеству программного обеспечения необходимо знать основные принципы построения архитектуры ПО.
    //Это дает следующие возможности и преимущества:

    //1
    //Проводить более глубокое тестирование приложений, в том числе при устаревшей или неполной документации.


    //2
    //Более тщательно локализовывать проблемы - в том числе, при неполном описании бага или отсутствующих важных деталях.
    //Хорошее умение локализации багов приводит к быстрому и точному назначению ответственного за его фикс,
    //что сильно экономит время и силы всем вовлеченным командам
    //(нет "игры в футбол", когда баг изначально назначен не на ту команду, например,
    //когда баг в серверной части ПО ошибочно назначается на команду разработки клиентской части ПО).

    //3
    //В целом лучше выполнять свою работу, в том числе: тщательно просматривать и улучшать тест-кейсы
    //(и даже находить баги в них), создавать новые, актуализировать документацию продукта, и многое другое.

    //Понимание архитектуры приложений и всех сопутствующих технологий серверного ПО -
    //одно из ключевых отличий между "типичным" тестировщиком и Software-инженером.

    //Очень часто ПО разрабатывается быстрее, чем актуализируется документация и тест-кейсы:
    //руководство хочет быстрее выпускать новые фичи, чтобы опередить конкурентов;
    //фреймворки и языки программирования быстро эволюционируют;
    //аналитики и тестировщики просто не успевают поддерживать актуальное состояние всей документации.

    //Большинство "типичных" тестировщиков работают с существующими (т.е., зачастую устаревшими) требованиями,
    //тестируют на основе ранее написанных (т.е., не факт что актуальных) тест-кейсов,
    //и в основном работают с UI из-за отсутствия более глубоких технических знаний
    //(т.е., не могут помочь с тестированием более глубоких сущностей, например серверной части ПО).
    //Это сильно затрудняет развитие навыков, рост ответственности,
    //влияние на общее качество продукта, и как следствие - карьерный рост.

    //Software-инженеры хорошо понимают каждый участок разрабатываемого ПО и могут эффективно работать не только с UI.
    //Они могут заметно улучшить существующие тест-кейсы, документацию, и качество продукта в целом -
    //что быстро делает их незаменимыми членами команды.


    //Обособленные серверные приложения

    //Большая часть современного ПО поддерживает работу с сетями и может работать как клиент или сервер, а порой выполнять и обе роли.

    //Сегодня мы заглянем глубже в устройство серверного ПО, посмотрим,
    //что скрывается внутри приложений и как они взаимодействуют с внешним миром.

    //Принципы работы

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/EO6m3X2jsOM1TW71_8CkwGJvmvQ4m5sq6.png
    //Обособленное серверное приложение, показанное со своим окружением, взаимодействующее с клиентским приложением

    //Здесь мы будем рассматривать только серверные приложения, клиентские же будут затронуты лишь поверхностно.
    //Термины «сторона клиента» и «сторона сервера» широко используются для разделения всех задействованных компонентов.

    //Обособленное серверное приложение взаимодействует только с:
    //Операционной системой
    //Клиентами, подключающимися по сети

    //У обособленных приложений может быть очень сложная внутренняя логика, но схема работы с данными у них относительно проста,
    //поэтому им не нужна отдельная база данных для хранения информации, с которой они работают.

    //С точки зрения ОС серверные приложения работают со следующими объектами:
    //Файлы: хранение настроек, чтение / запись данных по запросу от пользователей, и т.п.
    //Сокеты: для открытия серверных портов на прослушивание с целью приема запросов от пользователей
    //Процессы: процесс-родитель может запустить дочерние процессы для обработки пользовательских запросов.

    //С точки зрения сети, серверные приложения общаются с клиентами с помощью
    //Протоколов прикладного уровня, например HTTP, SMTP, POP3
    //Протоколов транспортного уровня типа TCP или UDP

    //С точки зрения пользователя, нужно знать следующее:

    //Адрес сервера, порт и транспортный протокол.
    //Например, веб-серверы могут прослушивать порт 443/TCP по умолчанию,
    //однако другие порты могут настраиваться администраторами.

    //Прикладной протокол для общения с сервером.
    //Например, сегодня веб-серверы, как правило, используют HTTPS, но некоторые всё ещё поддерживают HTTP.

    //Имя и пароль (или такие учётные данные, как сертификат),
    //когда для работы с системой требуется вход и проверка подлинности.


    //Следующие серверные приложения являются обособленными:
    //Файловые серверы: например, когда вы предоставляете доступ по сети к какой-либо папке на своем Windows-компьютере,
    //ваш компьютер выступает в роли файлового сервера.

    //FTP-серверы. Похожи на файловые, но работают по другому прикладному протоколу.

    //Службы удаленного управления, например SSH и Remote Desktop.

    //Серверы баз данных (такие, как MySQL) также можно считать обособленными приложениями в простых случаях.
    //Однако в более сложных конфигурациях, например с репликацией с ведущими и ведомыми серверами или распределённым хранилищем,
    //базы данных не могут считаться самостоятельными приложениями.


    //Люди НЕ являются единственными пользователями клиентских приложений.
    //Вне зависимости от архитектуры серверного приложения: обособленного,
    //2- или 3-звенного - взаимодействие "клиент-сервер" может иметь вид "человек-машина" или "машина-машина".
    //Это зависит от конкретных приложений и даже сценариев использования, например:

    //Для типичного веб-сайта основными пользователями являются люди, по этой причине каждый успешный сайт должен иметь
    //привлекательный и понятный дизайн, а также множество других особенностей и возможностей.

    //Однако, поисковые машины (типа Yandex или Google) также обращаются к веб-сайтам для скачивания и индексации страниц.
    //По этой причине сайты также должны быть оптимизированы для поисковых машин. Однако, некоторые страницы и документы
    //должны быть недоступны для поисковых роботов - в каждом конкретном случае это настраивается администраторами сайтов.


    //Возможные проблемы

    //Сбои и отказы серверных приложений возможны по причинам, перечисленным ниже.
    //Знание этого списка облегчает локализацию дефектов и поиск конкретной первопричины,
    //что является очень важным навыком для инженеров по обеспечению качества.

    //Баги, относящиеся к внутренней логике приложений, не рассматриваются в данном модуле.
    //Они заметно отличаются друг от друга и не могут быть описаны в той же логике,
    //что и поиск неполадок в системном окружении (чему и посвящен данный модуль).


    //Операционная система

    //ОС и ее настройки - наиболее частые причины возникновения проблем в обособленных серверных приложениях.

    //1 - Отсутствующие объекты файловой системы: файлы, каталоги, символьные ссылки…
    //Если кто-нибудь переместит или удалит их, или отключит файловую систему,
    //содержащую необходимые объекты, то приложение может даже не запуститься.

    //2 - Некорректные настройки прав доступа к файлам, директориям и другим объектам операционной системы или приложения.
    //Если прав недостаточно, то приложение не сможет получить доступ к этим объектам (см. п. 2 выше).
    //Если же для конфиденциальных файлов (например, содержащих учётные данные) или директорий настроены слишком широкие права,
    //то качественно спроектированное приложение остановит работу, обнаружив такие права при запуске.

    //3 - Некорректно настроенные права пользователя для запуска приложения.
    //Например: некоторые приложения не допускают запуск со стороны администратора (root), другие же, наоборот,
    //для запуска требуют права администратора или участие в определённой группе.

    //4 - Ошибочная настройка самого приложения, например:
    //неверный формат файла настройки, указана неподдерживаемая или конфликтующая опция настройки, и т.п.

    //5 - Конфликты, связанные с портами.
    //Если нужный порт уже используется другим процессом, то приложение не сможет запуститься.

    //6 - Недостаточное дисковое пространство для размещения временных файлов или файлов, запрошенных пользователем.

    //7 - Нехватка памяти: в случае перегрузки сервера и исчерпания оперативной памяти операционная система может завершить
    //работу некоторых приложений или по крайней мере отказаться выделить запрошенную приложением память.

    //8 - Новые нестабильные компоненты либо конфликтующие компоненты, появившиеся в окружении, например обновления ОС,
    //либо программные компоненты, внезапно установленные разработчиками.

    //9 - Что-либо иное, например временные файлы, оставшиеся от предыдущего аварийного завершения работы приложения.

    //10 - Высокая загрузка центрального процессора или системы ввода-вывода (диски, сеть)
    //не может в большинстве случаев привести к остановке приложения, но наверняка замедлит его работу.


    //Сеть

    //На уровне сети может случиться следующее, что может помешать доступу пользователя к серверному приложению:

    //1 - Проблемы с маршрутизацией, когда сообщения клиента не достигают сервера.

    //2 - Проблемы, связанные с системой DNS, когда пользователь обращается к серверу посредством полного доменного имени.

    //3 - Межсетевой экран, блокирующий прохождение пакетов.
    //Может быть настроен на любом узле: клиент, сервер, маршрутизатор между ними.

    //4 - Перегруженные сегменты сети на стороне клиента или сервера.


    //Проблемы на стороне клиента

    //Что плохого может произойти на стороне клиента:

    //1 - Неподдерживаемый тип или версия клиентского приложения.
    //Например, веб-сайт, разработанный для Chrome, Firefox и Safari, может некорректно работать с Edge.

    //2 - Неподдерживаемое или некорректное действие пользователя.

    //3 - Некоторое ПО, обеспечивающее безопасность, препятствует работе пользователя с сервером.

    //4 - Какие-либо настройки клиентского ПО мешают работе конкретно с этим сервером.

    //5 - Если на сервере необходимо залогиниться, пользователь может ввести неверное имя учетной записи или пароль.

    //6 - Пользователю запрещено что-либо делать на этом сервере.


    //Подведём итог
    //Обособленные серверные приложения взаимодействуют только с пользователями (по сети) и ОС на узле, где они установлены.
    //Возможные проблемы с этими приложениями связаны с ОС (в основном), сетью, и стороной клиента.


    //Двузвенные приложения

    //Принципы работы

    //Если объём и разнообразие данных достаточно велики,
    //то может потребоваться усложнить архитектуру программного обеспечения.
    //Таким образом, приложение становится 2-звенным:




}
