public class chapter_02 {
    //Содержание учебника

    //Учебник разделён на модули. Первые модули посвящены изучению основ информационных технологий.
    //Только после этого идут модули про тестирование программного обеспечения.

    //Реляционные БД и SQL
    //ERD, простые запросы, JOIN'ы, вложенные запросы, функции SQL, Insert, Update, Delete

    //Linux
    //Команды и файловая система, обработка текста, пользователи,
    //группы, права доступа, исполняемые файлы, процессы, сервисы, среда, сжатие

    //Сети
    //Обзор, уровни и IP, транспортный уровень, уровень приложения,
    //снифферы, поиск и устранение неисправностей

    //REST-сервисы
    //HTTP, REST API, Postman, Curl, Devtools (Инструменты разработчика), методы тестирования API

    //WebUI
    //DevTools (Инструменты разработчика), JavaScript, CSS, инструменты и методы тестирования WebUI

    //Поиск и устранение неполадок (troubleshooting)
    //Архитектура серверных приложений, принципы локализации багов,
    //локализация багов в трехзвенной архитектуре,
    //сессии исследовательского тестирования для локализации багов.

    //Анализ требований заказчика
    //UML, Типы и источники требований

    //Цикл разработки ПО
    //Agile, SCRUM, водопадная модель, пользовательские истории, встречи, Jira, Clickup

    //Тестовая документация
    //Чек-листы, Тест-кейсы, Отчеты об ошибках (баг-репорты), тест-план, системы управления тестами и дефектами

    //Статическое тестирование
    //Тестирование кода, тест-кейсов и требований

    //Классификация тестирования
    //Уровни тестирования, обзор методов нефункционального тестирования,
    //методы черного, белого и серого ящиков, регрессионное тестирование

    //Техники тест-дизайна
    //Разделение на классы эквивалентности, анализ граничных значений,
    //попарное тестирование, таблицы принятия решений, диаграммы состояний и переходов,
    //тестирование на основе сценариев использования, совместное использование разных техник.

    //Общие сведения об автоматизации тестирования
    //Методы и принципы автоматизации, язык Gherkin, Docker, Git

    //Релизный цикл
    //Релизный цикл приложения, стадии конкретного релиза,
    //Code freeze (заморозка кода), feature freeze (заморозка функциональности)


    //Почему модули по тестированию идут во второй половине учебника?

    //Мы убеждены, что невозможно быть хорошим тестировщиком без хорошего знания базы
    //информационных технологий. Более того — постоянно повышающиеся требования к
    //QA-специалистам повышают и планку уровня знаний для впервые входящих в профессию.



}
