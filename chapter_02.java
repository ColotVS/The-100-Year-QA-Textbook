public class chapter_02 {
    //#02.1 Реляционные базы данных: Теория

    //План урока
    //Как хранить данные
    //Базы данных приложений
    //Отношения и типы данных
    //ER-диаграмма

    //Как хранить данные

    //Информация и задачи тестировщика

    //Любые приложения работают с объектами реального мира.
    //Вы можете тестировать банковские приложения, интернет-магазины, игры или медицинские программы.
    //В любом случае все эти приложения работают с данными: информация о клиентах,
    //финансовые операции, передвижения персонажей игры или предписания врача.
    //Все данные необходимо где-то хранить, обновлять и обрабатывать.
    //Для этого необходимы специальные хранилища - базы данных.

    //Типичные задачи инженера по тестированию, связанные с базой данных:
    //1 - Поиск информации в базе данных для планируемого теста.
    //2 - Добавление данных до начала планируемого теста.
    //3 - Удаление некоторых данных из базы данных и фиксация реакции приложения.
    //4 - И многое другое.

    //Для выполнения всех этих задач необходимо понимать структуру баз данных
    //и использовать специальный язык запросов к базам данных, называемый SQL.


    //Простой способ хранения данных.
    //Откройте файл электронной таблицы в приложении Google Таблицы:
    //https://docs.google.com/spreadsheets/d/1UQYt3kc6Lu5eJzSaaSwND1j8CAbUJYmMTKgXaI16-o8/edit?pli=1#gid=517611735
    //В этом файле содержится информация о студентах, преподавателях, предметах и результатах экзаменов.

    //Вся информация хранится в одной таблице. Возможно, вы заметили, что данные дублируются,
    //а конкретную информацию не так-то просто найти.

    //Например:
    //Что, если кто-либо из студентов сменит фамилию? Как много полей придётся изменить?

    //Почему в таблицах так много повторений имён преподавателей и времени, когда они доступны?

    //Сейчас у нас всего несколько студентов, три преподавателя и три предмета.
    //Что, если файл будет использоваться в университете, где 1000 курсов, 200 преподавателей
    //и 5000 студентов? Как много строк понадобится для хранения информации?

    //Как отдельно отсортировать студентов по имени или фамилии?


    //Разделение данных по нескольким таблицам
    //В файле Google Таблицы ниже уже произведена некоторая оптимизация:
    //https://docs.google.com/spreadsheets/d/1yVPjcG5QFoIliqRGsJHZPAruUOFejvH-CAQAlAVnk2s/edit#gid=1825715153
    //Теперь стало более оптимально.
    //1 - Лист 1. Информация о студентах: имя, фамилия, курс, любимый предмет.

    //2 - Лист 2. Информация о преподавателях: имя, фамилия, время, когда они доступны.

    //3 - Лист 3. Информация о предметах: название, дополнительная информация.

    //4 - Лист 4. Информация об экзаменах: дата, результаты студентов.

    //В оптимизированной версии все данные разделены.
    //Например, появились отдельные столбцы для имён и фамилий,
    //и теперь можно выполнять фильтрацию и сортировку по этим столбцам.

    //Некоторая информация всё ещё дублируется и ею по-прежнему трудно пользоваться.
    //В случае большого объема данных работа с файлом будет все еще слишком медленной,
    //пусть и не настолько, как с предыдущим.
    //Поэтому такая оптимизация достаточна для отдельного файла электронной таблицы в приложении
    //Google Таблицы или Microsoft Excel, но недостаточна для работы приложения.

    //Итог:
    //Приложение не сможет работать с таким громоздким файлом.
    //Поиск данных будет идти медленно, а файл будет трудно поддерживать в актуальном состоянии.


    //Базы данных приложений.
    //Таблицы баз данных.
    //Таблицы баз данных очень похожи на листы файлов электронных таблиц в приложениях
    //Google Таблицы или Microsoft Excel из оптимизированного экзаменационного списка,
    //но оптимизация здесь гораздо более основательная.

    //Ниже показана некая воображаемая база данных (для электронного журнала студенческой успеваемости).
    //Видно, как таблицы в базе данных связаны друг с другом.
    //https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fdocs.google.com%2Fpresentation%2Fembed%3Fid%3D172Ex450I98xSLEIwzQIESqRL1-dD-XsXwNUQqwhS2hU%26size%3Dl&display_name=Google+Docs&url=https%3A%2F%2Faccounts.google.com%2Fv3%2Fsignin%2Fidentifier%3Fdsh%3DS-1274181395%253A1682588340711757%26continue%3Dhttps%253A%252F%252Fdocs.google.com%252Fpresentation%252Fd%252F172Ex450I98xSLEIwzQIESqRL1-dD-XsXwNUQqwhS2hU%252Fedit%26followup%3Dhttps%253A%252F%252Fdocs.google.com%252Fpresentation%252Fd%252F172Ex450I98xSLEIwzQIESqRL1-dD-XsXwNUQqwhS2hU%252Fedit%26ifkv%3DAQMjQ7QpCcBc5sYZqi2Ng_cBD1ww0I1W8em54KfpTnOW58MtvpVhD-G6qoYAh13Rq8VCOOM_eyjsYg%26ltmpl%3Dslides%26osid%3D1%26passive%3D1209600%26service%3Dwise%26flowName%3DWebLiteSignIn%26flowEntry%3DServiceLogin&key=40cb30655a7f4a46adaaf18efb05db21&type=text%2Fhtml&schema=google

    //1 - Идентификатор студента (student_id) в таблице экзаменов связан с идентификатором студента в таблице студентов - и можно получить полную информацию о конкретном студенте.

    //2 - Идентификатор преподавателя (teacher_id) в таблице экзаменов связан с идентификатором преподавателя в таблице преподавателей - и можно получить полную информацию о конкретном преподавателе.

    //3 - Идентификатор любимого предмета в таблице студентов (favorite_subject) связан с идентификатором предмета (subject_id) в таблице предметов - и можно получить полную информацию о конкретном предмете.

    //4 - Это же поле идентификатора предмета (subject_id) связано с таблицей преподавателей, что позволяет понять, какой преподаватель преподаёт этот предмет.


    //Вот три главных отличия между файлом электронной таблицы и базой данных:

    //1. Идентификатор как уникальный указатель на строку таблицы

    //2. Идентификатор из других таблиц для связки информации из разных таблиц

    //3. Мы можем получить информацию из другой таблицы даже без прямого указания на данные в ней


    //Определения терминов

    //Каждая строка с информацией в таблице называется записью (Record).
    //В записи мы храним всю информацию, касающуюся определённого объекта.
    //Например, о конкретном преподавателе, студенте или экзамене, проведённом вчера.

    //Каждый столбец базы данных называется полем (Column).
    //В поле мы храним все имена, телефоны и дни рождения.

    //Элемент информации, например, конкретный день рождения или номер телефона,
    //хранится в Ячейке таблицы (Cell).

    //Каждая запись чаще всего имеет уникальный идентификатор (ID).
    //Обычно для этого применяется число, автоматически увеличивающееся на единицу каждый раз,
    //когда мы добавляем новую запись (это называется autoincrement - автоинкремент).
    //Такой идентификатор называется Первичным ключом (Primary Key).

    //Чтобы создать связь между таблицами, мы добавляем поле идентификатора из исходной таблицы в таблицу,
    //с которой хотим установить связь.
    //Такой идентификатор в этой таблице называется Внешним ключом (Foreign Key).


    //Отношения и типы данных

    //Типы отношений

    //Прежде чем перейти к обсуждению типов отношений,
    //давайте ответим на вопросы о хранимых объектах из нашей тестовой базы данных:
    //Сколько студентов может быть у каждого преподавателя?
    //Сколько преподавателей может быть у каждого студента?
    //Сколько предметов может читать каждый учитель?
    //Сколько преподавателей может быть назначено на один предмет?
    //Сколько экзаменов может быть у одного студента?
    //Сколько студентов может прийти на один и тот же экзамен?
    //Сколько предметов может быть на одном выпускном экзамене?
    //Сколько выпускных экзаменов может быть по одному предмету?
    //Сколько дипломов может быть у одного студента?

    //Если вы ответили "один" на оба вопроса, например, о студентах и их дипломах,
    //то такой тип отношений называется "один-к-одному" (One-to-One).
    //Один-к-одному. Каждый объект из первой таблицы относится только к одному объекту из другой и наоборот.
    //Примером может служить отношение "Студент - диплом".
    //Каждый диплом может быть выдан только одному студенту,
    //и у каждого студента может быть только один диплом.

    //В случае, когда на один из вопросов об объектах мы отвечаем "один",
    //а на другой - "много", мы говорим о типе отношений "один-ко-многим" (One-to-Many).
    //Например, один преподаватель может читать много предметов,
    //но один предмет может читать только один преподаватель
    //(в реальной жизни один предмет могут читать и несколько преподавателей,
    //но мы пока будем брать упрощенные варианты).
    //Один-ко-многим. Каждый объект из одной таблицы связан со многими объектами в другой таблице,
    //но НЕ наоборот.  Примером может служить отношение "Преподаватель - модуль курса".
    //Один преподаватель может вести несколько модулей курса
    //(например, "Базы данных", "Разработка тестов" и "Документация"),
    //но иметь несколько преподавателей в рамках одного модуля невозможно

    //Если на оба вопроса ответ - "много" (У одного студента много преподавателей,
    //а у одного преподавателя много студентов), то такой тип отношений называется
    //"многие ко многим" (Many-to-Many).
    //Каждый объект из одной таблицы связан со многими объектами в другой таблице и наоборот.
    //Таблица "Студенты - Экзамены" является хорошим примером таких отношений.
    //Один студент может сдавать несколько экзаменов, и несколько студентов сдают один экзамен.


    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/wG_90H5I3s4y30Rk_wbW1n1G7Yf5Ca2Z_.jpg
    //Обратите особое внимание на таблицы с идентификатором студента,
    //идентификатором экзамена и баллами за экзамен, а также с идентификатором предмета и названием учителя.
    //Эти вспомогательные таблицы добавляются в базу, чтобы оптимизировать поиск информации в таблицах,
    //связанных как "многие-ко-многим". Обычно они содержат только идентификаторы из связанных таблиц,
    //но иногда может быть включена и дополнительная информация, актуальная для обоих объектов, как, например,
    //баллы за экзамен (Exam_points) в таблице выше.


    //Типы данных

    //Для чего нужна база данных?
    //Для хранения информации с целью ее последующего получения и обработки в приложении. При этом редко
    //когда требуется получить всю информацию из базы данных, обычно требуется какой-то ее фрагмент.

    //В базах данных существуют различные типы данных.
    //Для каждого типа данных которых предусмотрен свой набор операций,
    //а каждое поле может хранить только определенный тип данных.
    //Какой - задается при создании таблицы.
    //При попытке загрузить в поле даты число или строку возникнет ошибка базы.


    //Ниже представлена схема возможных типов данных.
    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/uSgEKhGBhHvXUAM7_9-PldVYBCyGe-Kft.png
    //Обратите внимание, что в полях с типом данных "бинарный" может храниться не только
    //текстовая информация, но и изображения, файлы pdf или даже видео.
    //Впрочем, на практике это используется нечасто.


    //ER диаграмма
    //Посмотрите на картинку ниже и подумайте, чем она отличается от рассмотренных ранее?
    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/vk6DDpwd7LH9GikA_IAiX71y10UOJmU8F.png
    //Это краткое представление таблиц в базе данных и связей (отношений) между ними,
    //называемое ER-диаграммой (entity-relationship diagram), или ERD.
    //ER-диаграмма - это графический стандарт, который используется для визуализации
    //структуры базы данных и позволяет новому  специалисту на проекте быстро понять,
    //как устроена база данных и как она работает.

    //ER-диаграмма схематично показывает таблицы, их поля и ключи, а также отношения между ними.

    //ER расшифровывается как Entity-Relation (сущность - отношение).

    //Студент, преподаватель, экзамен и предмет - это сущности.

    //Каждый тип отношений показан специальной стрелкой (несколько отличающейся в разных нотациях).

    //PK означает Primary Key (Первичный ключ).

    //FK обозначает Foreign Key (Внешний ключ) - пронумерованный внутри таблицы.


    //ER-диаграмма базы данных учебного приложения для регистрации рейсов FTB, показана ниже:
    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/Xsmvjdg0msJp07Du_xy6NXt8-JAeBRiFJ.png
    //Стрелки на первой и второй диаграмме означают типы отношений: один-к-одному,
    //один-ко-многим и многие-ко-многим. Они могут отображаться по-разному на разных диаграммах,
    //но обозначения на одной диаграмме должны быть одинаковыми.
    //На ERD приложения FTB есть двойная связь между таблицами рейсов и аэропортов
    //и 2 идентификатора аэропорта в таблице рейсов. Этот интересный случай показывает,
    //что две таблицы действительно могут быть дважды или даже более раз связаны друг с другом.


    //Результаты урока

    //Итак, что мы узнали о таблицах баз данных?

    //Для максимально быстрой работы приложения мы храним информацию особым образом.

    //1 - Таблицы (Tables) необходимы для хранения информации об объектах реального мира.

    //2 - Каждый элемент информации хранится в отдельном столбце (Column).

    //3 - Структура базы данных должна обеспечивать максимальную скорость получения данных из нее.

    //4 - Информация не должна дублироваться.

    //5 - У каждой строки таблицы в большинстве случаев должен быть уникальный идентификатор (ID).

    //6 - Таблицы можно связать друг с другом,
    //используя идентификаторы в качестве указателей из одной таблицы на данные в другой.

    //7 - Отношения между таблицами базы данных могут быть следующих типов: один-к-одному,
    //один-ко-многим или многие-ко-многим.

    //8 - Существует несколько типов данных, которые различаются способами хранения и обработки.

    //9 - Схема таблиц, столбцов и связей называется ERD
    //(entity-relationship diagram, диаграмма сущностей и отношений).


    //Для самообучающихся студентов
    //Прочитайте следующие статьи (англ.):
    //Статья о ER-диаграммах    https://www.lucidchart.com/pages/er-diagrams
    //Пошаговое руководство по нормализации.    https://www.databasestar.com/database-normalization/
}
