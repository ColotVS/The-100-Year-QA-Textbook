public class chapter_38 {
    //#38.1 Что такое автоматизация тестирования: Теория

    //План урока
    //Автоматизация тестирования - что это такое?
    //Что именно нужно делать?
    //Начала автоматизации: Postman


    //Автоматизация тестирования - что это такое?

    //Определение

    //Автоматизация тестирования — это использование любого подходящего программного обеспечения для формирования тестовых данных,
    //создания предварительных условий тестов, выполнения тестов, управления тестами,
    //составления отчетов о результатах и всего того, что может упростить жизнь инженера-тестировщика.

    //Виды автоматизации тестирования

    //Обратите внимание на приведенную ниже схему:

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/nDGKVPTjDXSmkTAH_J261HUNfxihdKn9-.png

    //Существует две ветви:
    //Тестирование.
    //Поддержка тестирования.

    //Тестирование бывает следующих видов:
    //Юнит-тестирование —  низкоуровневый вид тестирования, автоматизированный на 100%.
    //Юнит-тесты охватывают самые малые блоки программного обеспечения, например, методы или функции в исходном коде.
    //В большинстве случаев юнит-тесты создаются разработчиками.

    //Функциональное автоматизированное тестирование — это то, что обычно подразумевается под термином "автоматизация тестирования".
    //Функциональные тесты охватывают функции системы на уровне конечного пользователя,
    //например, "зарегистрировать новый аккаунт", "войти в систему", "сформировать отчет" и т.д.
    //Также функциональные автоматизированные тесты могут охватывать графический пользовательский интерфейс
    //(имитация действий реального пользователя, например, нажатие кнопки и т.д.)
    //или API (автоматическая отправка запроса и проверка ответа).

    //Нефункциональное автоматизированное тестирование.
    //В большинстве случаев речь идет о различных проверках производительности/нагрузки,
    //которые практически невозможны без автоматизации.

    //Статическое автоматизированное тестирование — проверка кода с помощью различных анализаторов исходного кода и т.д.


    //К поддержке тестирования относят следующие виды работ:

    //Формирование отчетов. Составление подробного отчета о выполнении теста может занять очень много времени.
    //Если есть инструмент, позволяющий сгенерировать отчет - используйте его!  Это сэкономит вам массу времени и стресса.

    //Генерирование тестовых данных —  создание тестовых данных.
    //Обычно, это является сложной и трудоемкой задачей как для ручного, так и для автоматизированного тестирования.
    //Например, тестовые данные могут иметь определенный срок годности или ограниченный перечень наименований.
    //Существуют инструменты для формирования тестовых данных.
    //Данные можно добавлять вручную при необходимости, но генератор тестовых данных экономит годы жизни.
    //Это тоже автоматизация тестирования!

    //Инструменты управления тестированием освобождают вас от бесконечных электронных таблиц Excel,
    //в которых хранятся тестовые случаи, сценарии и т.д.
    //Контроль версий, отчетность, история выполнения и многие другие функции обеспечиваются такими инструментами.
    //Это упрощает повседневную работу инженера по тестированию.


    //Итог:

    //Автоматизация тестирования - это использование любого подходящего программного обеспечения для упрощения и
    //ускорения процесса тестирования.
    //Автоматизация позволяет не только записать и выполнить последовательное нажатие кнопок,
    //но и генерировать данные, формировать отчеты и проводить нагрузочное тестирование.


    //Что именно нужно делать?

    //1 - Анализ.
    //Как инженер по автоматизации тестирования вы должны быть готовы потратить некоторое время на анализ требований,
    //существующих тестов, целесообразности автоматизации тестирования и т.д.

    //2 - Дизайн тестов.
    //Тесты должны быть спроектированы до их написания и реализации.
    //Поскольку автотесты это тоже программное обеспечение,
    //при их разработке необходимо использовать общие принципы архитектуры и проектирования программного обеспечения.

    //3 - Написание кода для автоматизации тестов.
    //Когда все спроектировано и определено, наступает время написания программного кода для автоматизации тестовых случаев.
    //Многие считают, что написание кода - это единственная работа, которую выполняют инженеры по автоматизации тестирования.
    //Как видно из этого списка, это представление не соответствует действительности.

    //4 - Выполнение ревью кода.
    //Исходный код автоматизированных тестов должен быть проанализирован перед реальным использованием.
    //Вы проверяете код своих коллег, а коллеги, в свою очередь, проверяют ваш код.

    //5 - Поддержка и сопровождение.
    //Автоматизированные тесты быстро теряют свою актуальность,
    //поэтому крайне важно поддерживать и обновлять код.
    //Если решение для автоматизации тестирования было плохо спроектировано,
    //то работы по сопровождению могут занимать практически все ваше время.
    //Поэтому важно выполнить шаги 1 и 2 до начала написания кода.


    //Пример автоматизированного теста

    //Ознакомьтесь с реальным примером автоматизированного теста.
    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/QSxhJPCXdb1tHDRo_-VM7keRr_ozB4Id1.png


    //Что нужно для начала работы в автоматизации тестирования?

    //Идеальный инженер по автоматизации тестирования выглядит следующим образом:

    //Ваше желание.
    //Самый первый шаг на пути к автоматизации тестирования - решить, интересно ли вам это или нет.

    //Опыт ручного тестирования.
    //Очень хорошо, если у вас уже есть несколько лет опыта ручного тестирования.
    //Навыки анализа и проектирования тестов необходимы при автоматизации тестирования.
    //Знание жизненного цикла разработки программного обеспечения является большим плюсом при автоматизации тестирования.

    //Опыт программирования. Автоматизация тестирования - это создание специального программного обеспечения
    //для тестирования другого программного обеспечения, поэтому программирование является обязательным условием!
    //Вы должны быть более или менее знакомы с такими языками программирования, как Java, Python, JavaSript или C#.
    //Для начала достаточно базовых знаний.

    //В качестве инженера по автоматизации тестирования вам придется не только писать код для существующих тестовых примеров,
    //но и выполнять множество других действий,
    //таких как анализ требований, дизайн тестов, рецензирование и поддержка кода.


    //Начала автоматизации: Postman
    //Отличный способ начать автоматизировать, имея только начальные знания языков программирования - это Postman.

    //Инструмент тестирования REST API - Postman - уже был рассмотрен в главе "HTTP, REST, API - инструменты и тестирования",
    //и прежде чем показать способ автоматизации с использованием этого инструмента,
    //давайте повторим основные положения раздела, посвященного мануальному тестированию на Postman.

    //Postman - популярный программный продукт, позволяющий создавать API запросы разных типов,
    //запускать их и объединять в так называемые коллекции - группы запросов,
    //для которых можно задавать одинаковые параметры, настройки, а также импортировать и экспортировать пакетно, а не по одному.

    //Можно выбирать метод, тип авторизации, тип контента и пр., а также оперировать Raw (исходными) запросами в том виде,
    //как мы их пишем в cURL.

    //Можно запускать отдельные запросы и тестировать API вручную, изменяя параметры в теле запроса или URL.

    //Однако давайте еще раз посмотрим на скриншот Postman:
    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/xh_9xkGOwK77pt9F_aBe9ewDa0PAbU2WY.png

    //Две вкладки - Pre-request Script и Tests - до сих пор не были рассмотрены,
    //но именно они дают возможность написать ваши первые автотесты.

    //Стоит иметь в виду, что такая автоматизация - это так называемая semi-automation, и строго говоря, тестировщик,
    //который владеет только Postman, не может считаться полноценным автоматизатором.
    //Но общие принципы, пусть и в упрощенном виде, действуют и здесь: можно потренироваться в отладке простого кода,
    //вынесении данных в глобальные переменные, применении простых языковых конструкций и пр. В том случае,
    //если такая деятельность окажется для вас интересной,
    //можно задуматься о глубоком изучении языков программирования и последующем переходе из ручных тестировщиков в автоматизаторы.

    //Прежде чем написать наш первый скрипт на Postman,
    //давайте протестируем работает ли наш запрос к petstore.swagger.io из примера,
    //данного в разделе учебника, посвященному мануальному тестированию на Postman.
    //Для этого выберем метод POST, введем в строку вызова https://petstore.swagger.io/v2/pet и добавим следующие настройки:

    //Authorization = OAuth 2.0

    //Body: JSON и собственно, тело запроса:

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/Wv5DYsA9ZzxFFMCB_emKPGT0FSzY8g8_F.png

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/q3Xa5Jy-YITDHbZe_SeBPL6RgUn5kUOAQ.png

    //{
    //    "name": "doggie",
    //    "photoUrls": [
    //        "ad tempor id magna",
    //        "Duis"
    //    ],
    //    "id": 8979789078978969,
    //    "category": {
    //        "id": -20476978,
    //        "name": "id occaecat est"
    //    },
    //    "tags": [
    //        {
    //            "id": 895601,
    //            "name": "magna ipsum"
    //        },
    //        {
    //            "id": 86688648,
    //            "name": "quis voluptate"
    //        }
    //    ],
    //    "status": "available"
    //}

    //Теперь можно нажать Send и увидеть, как запрос отработал.

    //Если все хорошо, можно приступать к автоматизации.
    //Давайте начнем с простого - проверим, что запрос возвращает код 200.

    //Переключитесь на вкладку Tests.
    //В правом списке вы увидите так называемые Snippets (сниппеты) - шаблоны готовых тестов,
    //которые можно выбрать, минимально изменить под себя и запустить.
    //Вы увидите вот такой простой шаблон:

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/FY1nLv7uYJq6jrF8_FGpXPM-BNdam5gfo.png

    //pm.test("Status code is 200", function () {
    //    pm.response.to.have.status(200);
    //});

    //Давайте разберем каждый элемент этого кода.

    //pm.test("Status code is 200" - вызов метода test, который для более простой идентификации в списке тестов
    //(когда их станет больше одного) обеспечит данному конкретному тесту название "Status code is 200" (Код статуса 200).
    //Скобка, которая напрашивается после 200", на самом деле закрыта в самом конце, проверьте.

    //function () {} - функция, небольшой отрезок кода, выполняющий какое-то законченное действие и часто (но не всегда)
    //выдающий какой-то результат. Все, что между {} - это так называемое тело функции.

    //pm.response.to.have.status(200); - собственно, проверка. Каждый элемент после очередной точки - это отдельный метод,
    //а их последовательность в данном случае складывается в проверку статуса в скобках.
    //Если то, что мы получим в результате в виде статуса, будет совпадать со значением в скобках, тест пройден.
    //Если нет - тест не пройден.

    //Точки с запятой после строк - это особенность синтаксиса языка, они показывают, что данная строка завершена.
    //Если забудете поставить точку с запятой, код сломается не заработает.
    //То же касается скобок. "Если сказал А, говори Б", иными словами, открыл скобку-не забудь закрыть.
    //Если количество открытых скобок данного типа (круглых, квадратных или фигурных)
    //не совпадает с количеством закрытых - программа не заработает.

    //Теперь попробуем запустить наш тест (пока ничего не изменяя в нем).

    //Нажмите кнопку Send.
    //Переключитесь на вкладку Test Results в нижней части экрана.
    //Убедитесь, что тест пройден (он "зеленый" - по цвету результата)

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/OKbMeJ0iq6lwZeAA_qUqHsPl7sNMpjcr2.png

    //Теперь давайте убедимся, что наш тест действительно что-то проверяет.
    //Поменяем код 200 в скобках на любой другой, например, 500.
    //Получим следующий тест и запустим его нажатием на кнопку Send:

    //pm.test("Status code is 200", function () {
    //    pm.response.to.have.status(500);
    //});

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/P1SRod4075UuQfm1_wgZHsvYt9x1Ly3y_.png

    //Изменения ожидаемого результата привели к покраснению теста - ведь на самом деле наш API метод по-прежнему возвращает 200,
    //но тест теперь ждет 500!

    //Хорошо, проверка прошла, возвращаем все обратно и попробуем написать еще один тест, чуть посложнее.
    //Пусть теперь наш тест проверяет, что в ответе приходит определенная строка (в любом из параметров).
    //Чтобы сделать тест максимально похожим на реальный, проверим, что приходит статус "available" ("доступен").

    //Нажмите Response body: Contains string и добавьте еще один фрагмент кода. Теперь наш код выглядит так:

    //pm.test("Status code is 200", function () {
    //    pm.response.to.have.status(200);
    //});

    //pm.test("Body matches string", function () {
    //    pm.expect(pm.response.text()).to.include("string_you_want_to_search");
    //});

    //Принцип здесь тот же, что и в предыдущем тесте:

    //pm.test("Status code is 200" - вызов метода test, который для более простой идентификации в списке тестов
    //(когда их станет больше одного)
    //обеспечит данному конкретному тесту название "Status code is 200" (Код статуса 200).
    //Скобка, которая напрашивается после 200", на самом деле закрыта в самом конце, проверьте.

    //function () {} - функция, небольшой отрезок кода, выполняющий какое-то законченное действие и часто
    //(но не всегда) выдающий какой-то результат. Все, что между {} - это так называемое тело функции.

    //pm.expect(pm.response.text()).to.include("string_you_want_to_search"); - собственно, проверка.
    //Только на этот раз мы будем проверять что ответ pm.response.text() содержит строку в скобках.

    // Осталось только поменять строку string_you_want_to_search (строка_которую_вы_хотите_найти) на available:

    //pm.test("Status code is 200", function () {
    //    pm.response.to.have.status(200);
    //});

    //pm.test("Body matches string", function () {
    //    pm.expect(pm.response.text()).to.include("available");
    //});

    //Запустим наши 2 теста и убедимся, что они "зеленые":
    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/ohFJRkMd6nFWp_sC_4ybzG3V2TkOmq9_L.png


    //Результаты урока

    //Итак, что же мы узнали об автоматизации тестирования?

    //1 - Существуют различные виды автоматизации, которые могут упростить вашу работу.

    //2 - Любая часть программного обеспечения, маленькая или большая, может быть протестирована автоматически
    //и станет частью работы QA-инженера.

    //3 - В идеале для начала работы в области автоматизации тестирования
    //необходимо иметь опыт как ручного тестирования, так и программирования







}
