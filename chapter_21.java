public class chapter_21 {
    //#21.1 Локализация дефектов в трёхзвенных приложениях: Теория

    //План урока
    //Распространённые проблемы, свойственные трёхзвенным приложениям
    //Локализация дефектов в трёхзвенном приложении
    //Реальные примеры


    //Распространённые проблемы, свойственные трёхзвенным приложениям

    //Введение

    //В предыдущих модулях вы узнали следующее:

    //У серверных приложений могут быть различные типы архитектуры и точки отказа, характерные для каждого типа.

    //Надлежащая локализация дефектов включает декомпозицию приложения,
    //выработку гипотез и их проверку с помощью подходящих инструментов и методик.

    //Рассмотрим трёхзвенные приложения и характерные для них виды неполадок,
    //чтобы лучше понять, как это работает в реальной жизни.


    //Пример трёхзвенных приложений
    //За исключением исследовательского тестирования (с которым мы познакомимся в следующем модуле),
    //в большинстве случаев перед началом работы с приложением необходимо познакомиться с его документацией.

    //Описание и варианты использования
    //"Auth" — это простое трёхзвенное приложение (т. е. приложение, включающее фронтенд, бэкенд и базу данных).
    //Для работы с ним необходимо залогиниться, указав имя и пароль.
    //После успешного входа в систему отображается страница личного профиля. Также реализована функция выхода из системы.

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/U4FcPXqn9gcIlS0H_CJiHX_cIFy-wzsLf.jpg
    //Интерфейс пользователя: до (слева) и после (справа) входа в систему

    //Всесторонняя обработка ошибок не предусмотрена, поэтому пользователи могут увидеть простое сообщение «Invalid user or password»,
    //даже если учётные данные и пароль были верными.
    //Это было реализовано намеренно, поскольку:
    //а) и в настоящих приложениях зачастую не реализуют полноценные сообщения об ошибках;
    //б) нужен был пример для модуля, посвящённого локализации дефектов.

    //Аутентификация выполняется с помощью cookie-файла auth_token. Если файл найден, то отображается страница входа в систему.
    //Список корректных имён пользователей и паролей:
    //root/1234, gosha/12334, kolya/11111, fel/1234, lil/0000, bobby/777, max/1234, test/9999.

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/zpk_yfHsF0Tx88IT_XHDScqG-HXXx9yvY.jpg
    //Личная страница (доступная после входа в систему) с открытыми инструментами разработчика браузера Google Chrome


    //Приложение Auth: техническая документация

    //Auth — очень простое трёхзвенное приложение, состоящее из фронтенда, бэкенда и базы данных, развёрнутых на отдельных серверах.
    //Всё взаимодействие с пользователями предполагается посредством браузера.

    //Для каждого учащегося предусмотрен свои экземпляры приложений фронтенда и бэкенда,
    //развёрнутых на серверах 192.168.40.14 и 192.168.40.100 соответственно.

    //Номера прослушиваемых этими приложениями портов (90XY и 70XY) зависят от идентификатора UID учащегося в ОС Linux,
    //который един на всех образовательных серверах. XY — это две последние цифры в UID.

    //Все экземпляры бэкенда используют один и тот же сервер базы данных (БД), но сами базы данных — разные
    //(для разделения между пользователями).
    //Соответствующие названия БД — auth_$USER, где $USER это имя учётной записи в ОС Linux каждого из студентов.

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/5cB7WvlOBOV_bFw2_NRxe6eclPMPU-CHT.png
    //Архитектура трёхзвенного приложения


    //Принцип работы аутентификации:

    //Если cookie-файл auth_token отсутствует, то отображается страница входа в систему.

    //Если cookie-файл auth_token найден, то он проверяется в кэше серверного приложения.
    //Если проверка пройдена успешно, то отображается страница профиля со всеми доступными сведениями.


    //Доступные запросы HTTP:

    //Фронтенд:
    //POST /api/login
    //Для входа в систему. Имя пользователя и пароль отправляются в теле запроса (BODY).

    //GET /api/token/info
    //Показывает информацию токена. Информация в ответе присылается только после успешного входа в систему.

    //Бэкенд:
    //GET /health
    //Проверка доступности. В ответ должно приходить сообщение с кодом HTTP 200 OK.

    //GET /role/all
    //Показывает все роли из БД в формате JSON.

    //GET /login/all
    //Показывает все имена пользователей, пароли и роли из БД в формате JSON.

    //POST /auth
    //Проверка пары имя+пароль посредством отправки этих двух параметров.

    //База данных:
    //Название БД — auth_$USER.

    //В базе данных должны быть две непустые таблицы: login (имя пользователя), role (роль).

    //Соответствующий сервер БД MySQL развёрнут по адресу 192.168.40.150, порт TCP 3306.


    //Руководство по развёртыванию: фронтенд

    //Расположение                  192.168.40.14

    //Серверный TCP-порт            90XY, где XY — это две последние цифры UID каждого студента в операционной системе
    //                              (UID показывается командой id)

    //Стек технологий               nodejs express bootstrap

    //Директория приложения         /apps/nodejs/$USER

    //Название службы в системе     nodejs-auth.$USER

    //Шаги для запуска              sudo systemctl start nodejs-auth.$USER

    //Основные файлы конфигурации   Адреса и порты бэкенда указаны в файле  /apps/nodejs/$USER/config/default.json
    //                              Порт сервера фронтенда указан в файле  /apps/nodejs/$USER/bin/www

    //Журналы                       Можно просмотреть посредством команды journalctl.
    //                              Не содержит какого-либо подробного описания проблем,
    //                              за исключением ошибок соединения с приложением бэкенда.
    //                              journalctl -u nodejs-auth.$USER.service

    //URL                           http://192.168.40.14:90XY


    //Deployment guide: Backend

    //Местоположение                192.168.40.100

    //Порт TCP сервера              70XY, где XY — это две последние цифры UID студента в операционной системе
    //                              (UID показывается командой id)

    //Стек технологий               java springboot

    //Директория приложения         /apps/java/auth/$USER

    //Название службы в системе     java-auth.$USER

    //Шаги для запуска              sudo systemctl start java-auth.$USER

    //Основные файлы конфигурации   /apps/java/auth/$USER/application.properties

    //Журналы                       Можно просмотреть посредством команды journalctl.
    //                              Заполняются при запуске приложения.
    //                              Корректные операции (например, вход в систему) не порождают новых записей журналов.
    //                              В ходе работы приложения в журналы заносятся только ошибки.
    //                              Ключевые слова для поиска ошибок: ERR, WARN, SQL.
    //                              journalctl -u java-auth.$USER.service

    //URL                           http://192.168.40.100:70XY


    //Проблемы, возможные в трёхзвенном приложении

    //Вспомним урок «Архитектура серверного ПО», где были показаны все типичные проблемы.

    //Вот компактный перечень проблем. Далее не все они будут показаны далее, но лучше здесь перечислить всё,
    //чтобы у нас был полный список в одном месте:

    //Сторона клиента:
    //1 - Некорректное или неподдерживаемое действие пользователя.
    //2 - Неподдерживаемый тип или версия клиентского приложения.
    //Например, веб-сайт, разработанный для Chrome, Firefox и Safari, может некорректно работать с Edge.
    //3 - Некоторое ПО, обеспечивающее безопасность, препятствует доступу пользователя к серверу.
    //4 - Некоторые настройки клиентского программного обеспечения неким образом конфликтуют с конфигурацией сервера.
    //5 - Если для доступа к серверу требуется залогиниться, то могут использоваться неверные учётные данные.
    //6 - Пользователь может запросить что-либо неразрешённое или запрещённое для его роли.

    //Общее для стороны сервера:
    //1 - Отсутствующие объекты файловой системы: файлы, директории, символьные ссылки и т.п.
    //Если кто-нибудь переместит или удалит их или отключит файловую систему,
    //содержащую необходимые объекты, то приложение может даже не запуститься.

    //2 - Некорректные настройки прав доступа к файлам, директориям и другим объектам операционной системы или приложения.
    //Если прав недостаточно, то приложение не сможет получить доступ к этим объектам (см. п. 1 выше).
    //Если же для конфиденциальных файлов (например, содержащих учётные данные) или каталогов настроены недостаточно строгие права,
    //то качественно спроектированное приложение остановит работу, обнаружив такие права при запуске.

    //3 - Проблема с правами пользователя для запуска приложения.
    //Например: некоторые приложения не допускают запуск со стороны администратора (root),
    //другие же, наоборот, для запуска требуют права администратора или включения в определённую группу ОС.

    //4 - Конфликты, связанные с портами. Если нужный порт уже используется другим процессом, то приложение не запустится.

    //5 - Недостаточное дисковое пространство для размещения временных файлов или файлов, запрошенных пользователем.

    //6 - Нехватка памяти (Out of memory).
    //В случае перегрузки сервера и исчерпания оперативной памяти операционная система может завершить работу
    //некоторых приложений или по крайней мере отказаться выделить запрошенную приложением память.


    //Границы сетей между всеми соседними компонентами:
    //Включает сетевое взаимодействие сервер-сервер и соответствующие настройки.

    //1 - Проблемы с маршрутизацией, когда сообщения клиента не достигают сервера.

    //2 - Проблемы, связанные с системой DNS, в случае,
    //когда пользователь обращается к серверу посредством FQDN (полного доменного имени).

    //3 - Межсетевые экраны, блокирующие прохождение пакетов.
    //Например, некорректные или чрезмерно строгие настройки межсетевого экрана
    //могут быть на любом сетевом устройстве между клиентом и сервером, включая самих клиента и сервера.

    //4 -Неправильная настройка компонентов верхнего уровня
    //(например, неверный IP-адрес или FQDN сервера БД, некорректные учётные данные для подключения к БД,
    //неверное название БД и т. д.).



}
