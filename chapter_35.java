public class chapter_35 {
    //#35.1 Методы проектирования тестов — попарное тестирование: Теория

    //План урока
    //Идея попарного тестирования
    //Использование попарного тестирования для покрытия требований
    //Инструменты попарного тестирования
    //Как сочетать попарное тестирование с разделением на классы эквивалентности


    //Идея попарного тестирования

    //Проблема комбинаций параметров

    //В предыдущем модуле мы рассмотрели разделение на классы эквивалентности для следующего примера:

    //private int divideNumbers (int a, int b) {
    //       if (b == 0)
    //             return  0;
    //       else
    //            return a/b;
    //}

    //Даже если исключить из рассмотрения классы значений, приводящих к тому,
    //что программа просто не скомпилируется, классов эквивалентности все равно получается довольно много:

    //a > 0;
    //a = 0;
    //a < 0;
    //b > 0;
    //b = 0;
    //b < 0;

    //Все возможные комбинации
    //Что же делать, если нужно протестировать комбинации входных данных?

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/8L4so9KMq43loZuJ_v2y5VgB3lPuJv9gz.png

    //Покрытие всех комбинаций для этого примера выглядит не слишком пугающе и не очень затратным по времени,
    //а теперь посмотрите на страницу Amazon на рисунке ниже.

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/Ls3yxdEkHXn3GbOK_Ee8IpDa2lmDqnInc.png

    //Как много классов эквивалентности и граничных значений можно определить для каждого параметра?

    //Номер заказа: минимальный и максимальный, номер из середины диапазона, номера вокруг минимального и максимального,
    //номер, начинающийся с нуля и т. д.
    //Статус: выполнен, выполняется (и, возможно, некоторые другие).
    //Примечания: множество типов символьных строк.
    //И т. д.

    //У нас есть 12 параметров для сведений о заказе и 15 параметров для сведений о доставке.
    //Для каждого параметра возможно от 2 до 10 значений.

    //Сколько тестов понадобится для покрытия всех комбинаций?

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/V3eudirDzYl8RRp2_gPTqPpH3JsA61g7F.png

    //Теперь тестирование выглядит довольно затратным по времени.


    //Попарное тестирование (Pairwise testing)

    //Конечно, для снижения количества тест-кейсов необходимо применять специальные методы.
    //Опытные данные показывают, что тестовые комбинации каждой пары значений способны обнаружить от
    //68 % до 97 % дефектов и что любой из этих дефектов вызывается не комбинацией нескольких значений
    //(например, статус заказа = выполнен, город = Владивосток, покупатели = Алиса Селезнёва, пустой адрес доставки 3),
    //но парой этих параметров (в теории попарного тестирования они называются факторами).

    //Другими словами, неважно, какой статус у заказа и кто является покупателем (Алиса или Игорь Селезнёв),
    //поскольку первопричина дефекта кроется, например, в паре: город = Владивосток + пустой адрес доставки.

    //Например:

    //1 - Минимальный номер заказа необходимо протестировать минимум один раз вместе с параметром:
    //валюта = долл. США (1-я пара),
    //минимум один раз вместе с параметром: товар зарезервирован = да (2-я пара),
    //минимум один раз вместе с параметром: программа Prime = да (3-я пара) и т. д.

    //2 - Максимальный номер заказа необходимо протестировать с теми же значениями минимум один раз.

    //3 - Номер заказа из середины диапазона также необходимо протестировать с теми же значениями минимум один раз.

    //4 - И то же самое для других факторов.

    //Поскольку первопричина любой из проблем кроется в комбинации пары факторов, нам нужен алгоритм для определения таких пар,
    //при которых каждое значение фактора сопоставляется с каждым значением других минимум один раз.

    //Такие алгоритмы реализованы в ряде специального программного обеспечения, предназначенного для попарного тестирования.
    //Самый простой из таких инструментов — это Teremok.

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/209ofaegx9cjHtro_j_zaGNgHRoqI4biw.png

    //Посмотрите на пример, составленный авторами программы.

    //Метод попарного тестирования очень часто используется для конфигурационного тестирования,
    //когда необходимо провести тестирование для сочетаний разных операционных систем и веб-браузеров с целью проверки,
    //как приложение работает в различном окружении.

    //Чтобы посмотреть, какое количество комбинаций может образоваться без использования алгоритма попарного тестирования,
    //нажмите кнопку Generate All Combinations (сгенерировать все комбинации).
    //Программа создаст файл Excel.

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/Es-BGytAE7EdhRgu_trIu76R-9rkdH_xE.png
    //Все комбинации для примера из приложения Teremok

    //18 тест-кейсов займут, кажется, не так много времени, если не учитывать,
    //что нужно будет провести тесты для всех комбинаций операционных систем и веб-браузеров.
    //При ручном тестировании и запуске полного регрессионного набора каждый тест может занять по целому дню.
    //Весь цикл займёт 18 дней.

    //Теперь нажмите кнопку Generate Pairwise (сгенерировать для попарного тестирования) и откройте новый файл Excel.

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/oc-7lnMdJOY4yZvP_12CSaSK0gn7eDOv-.png
    //Попарные комбинации для примера из приложения Teremok

    //Как видно, длительность цикла снизилась значительно (до 6 дней).
    //Но чтобы убедиться, что и в этом случае тестами покрыто всё необходимое,
    //давайте вспомним идею попарного тестирования.

    //Опытные данные показывают, что тестовые комбинации каждой пары значений способны обнаружить от 68 % до 97 %
    //дефектов и что любой из этих дефектов вызывается не комбинацией нескольких значений.

    //Таким образом, каждое значение фактора должно быть минимум один раз сопоставлено с каждым значением других факторов. Итак…

    //Есть ли у нас Windows 10 + Firefox?
    //Есть ли у нас Windows 7 + Firefox?
    //Есть ли у нас Windows 10 + 1920*1080?
    //Есть ли у нас Safari + MacOS?
    //Пропустили ли мы что-нибудь? (Чтобы понять почему, см. далее в разделе, посвящённом другим инструментам.)


    //Итог:

    //Идея попарного тестирования в том, что большинство дефектов вызываются комбинациями каких-либо двух факторов,
    //а не комбинациями нескольких факторов, поэтому для снижения количества тест-кейсов можно использовать специальный алгоритм.

    //Самый простой программный инструмент для попарного тестирования — Teremok.
    //Он не требует установки, и его можно использовать с помощью любого веб-браузера.


    //Применение попарного тестирования для покрытия требований тестами

    //Давайте обратимся к примеру из одной из предыдущих секций.

    //Как использовать попарное тестирование для покрытия тестами авиарейсов

    //К авиарейсу относятся:
    //самолёт, номер авиарейса, время отправления, аэропорт отправления, аэропорт прибытия, время прибытия, авиационный сбор.

    //В предыдущей секции мы определили классы эквивалентности для параметра имени аэропорта.

    //1 - Определить тип параметра: символьная строка.

    //2 - Определить домен входных значений: все возможные символьные строки.
    //Специальные символы, такие как «-», разрешены, но некоторые из них могут встречаться в именах аэропортов нечасто.

    //3 - Разделить домен на поддомены (классы эквивалентности):
    //короткая строка, длинная строка, строка со специальными символами, строка,
    //содержащая только буквы, строка, содержащая буквы и цифры, строка,
    //содержащая символы из нелатинского алфавита, различные комбинации символов, пробелы и т. д.

    //4 - Выбрать по одному значению из каждого класса:
    //«Nezabudka», «wperwpeorwpeoriwpeoripiopoipoipoipipoi», «Zanzi-B», «օդանավակայան» и т. д.

    //5 - Составить список предполагаемых ошибок, которые может совершить пользователь,
    //и разделить их на классы: название не указано, слишком длинная строка, недопустимые специальные символы и т. д.

    //6 - Выбрать по одному значению из каждого класса ошибок:
    //« »,
    //«wwperowpeoriwpeowpeorpweiwpoerpweipwoerpwoeipweirpwoeirpwoeirpweirpweoirpweirpweirpwoeirpweirpwoerpweirpwoeipwoeirpwoeirwpeoriwpoeirwpeori»,
    //«!@#$#$%#%^&*()_+»
    //и т. д.

    //Но для полного тестирования параметра авиарейса нам нужно проверить комбинации значений для различных факторов:
    //самолёт, номер авиарейса, время отправления, аэропорт отправления, аэропорт прибытия, время прибытия и авиационный сбор.


    //Использование самого простого инструмента для попарного тестирования

    //Для самопроверки: классы эквивалентности, добавленные в приложение Teremok, показаны ниже:

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/JBi01rIy38oeK5z6_FSI3HnBH4dzvuwZI.png

    //При применении попарного тестирования, если очевидно, что ошибочное значение какого-то из факторов дает ошибку в любом случае,
    //независимо от сочетаний со значениями других параметров, эти ошибочные значения можно пропустить.

    //В нашем случае это шаги 4 и 5 приведенного выше списка классов эквивалетности:

    //Составить список предполагаемых ошибок, которые может совершить пользователь, и разделить их на классы:
    //название не указано, слишком длинная строка, недопустимые специальные символы и т. д.

    //Выбрать по одному значению из каждого класса ошибок:
    //« »,
    //«wwperowpeoriwpeowpeorpweiwpoerpweipwoerpwoeipweirpwoeirpwoeirpweirpweoirpweirpweirpwoeirpweirpwoerpweirpwoeipwoeirpwoeirwpeoriwpoeirwpeori»,
    //«!@#$#$%#%^&*()_+» и т. д.

    //Уберите ошибочные значения из таблицы.

    //Нажмите кнопку Generate All Combinations (сгенерировать все комбинации). Сколько комбинаций получилось? 3528 комбинаций

    //Теперь нажмите Generate Pairwise (Сгенерировать для попарного тестирования). Сколько получилось тестов? 49 комбинаций


    //Итог:
    //Чтобы радикально снизить количество тест-кейсов, необходимо применять метод попарного тестирования.
    //Чем больше общее количество тестовых комбинаций, тем больше разница между полным набором комбинаций
    //и набором после применения метода попарного тестирования


    //Другие инструменты для попарного тестирования

    //На рынке представлено несколько популярных инструментов для применения метода попарного тестирования.

    //Онлайн-инструмент PICT

    //PICT — это самый популярный инструмент для попарного тестирования.
    //Если вы знакомы с сервисом Github, то можете скачать это приложение из соответствующего хранилища.
    //(opens in a new tab) Но можно использовать более удобную онлайн-версию,
    //не требующую каких-либо первоначальных приготовлений.
    //https://pairwise.yuuniworks.com

    //Давайте попробуем повторить первый сценарий с операционными системами (ОС), веб-браузерами и разрешениями.

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/So6h6sRTIRwSyMuU_XLa-ljplDuMTzyfa.png
    //Приложение Teremok сгенерировало 18 комбинаций всего и 6 для попарного тестирования. А что же получится с PICT?

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/X_3AlLfBbL2AaKyO_vvU3YfvWRSl8Q-hg.jpg
    //Как вы видите, результат отличается.
    //У нас получилось 11 комбинаций вместо 6, полученных с помощью Teremok.


    //Как вы видите, приложение PICT составило некоторые комбинации,
    //пропущенные приложением Teremok. PICT создаёт комбинации с большей точностью.


    //Итог:
    //Существуют различные инструменты для создания пар входных факторов.
    //Выбор инструмента зависит от сложности вашего случая, несовместимости некоторых параметров и
    //даже от частоты применения этого метода.
    //Чтобы время от времени работать с простыми случаями, достаточно простого приложения Teremok.


    //Как сочетать классы эквивалентности и граничные значения с методом попарного тестирования

    //Используйте следующий общий алгоритм для каждого фактора:

    //Определите классы эквивалентности.
    //Определите границы между классами.
    //Определите минимальные и максимальные значения для каждой границы классов.
    //Включите в тестирование по одному значению из каждого класса (лучше из середины диапазона).
    //Включите в тестирование все граничные значения.
    //Включите в тестирование значения, отличающиеся на единицу (+1 и -1) от каждого граничного значения.
    //Объедините идентичные тесты при наличии таковых (например, если у двух классов общее граничное значение).

    //В результате вы получите набор возможных значений для каждого фактора.

    //Пример:

    //При добавлении нового фильма в базу данных онлайн-кинотеатра фильм может получить одну из нескольких маркировок,
    //обозначающих возрастной ценз:
    //0+
    //6+
    //12+
    //18+

    //Кроме того, каждый фильм имеет жанр и рейтинг. Список жанров:
    //Детектив
    //Фантастика
    //Драма
    //Комедия
    //Мультфильм
    //Учебный фильм

    //Рейтинг измеряется в количестве звезд (от одной до пяти)

    //Новый пользователь при регистрации вводит свой возраст, любимый жанр и желаемый минимальный рейтинг,
    //и система показывает список только разрешенных к просмотру фильмов нужного жанра и рейтинга.
    //Покрыть функциональность тестами.

    //Давайте применим описанный выше алгоритм для каждого фактора.

    //Очевидно, что в прошлом модуле мы уже решили эту задачу для возраста и получили следующий список:

    //-1
    //0
    //3
    //6
    //9
    //12
    //15
    //18
    //30
    //максимальный возраст - 1
    //максимальный возраст
    //максимальный возраст + 1

    //При применении попарного тестирования, если очевидно, что ошибочное значение какого-то из факторов дает ошибку в любом случае,
    //независимо от сочетаний со значениями других параметров, эти ошибочные значения можно пропустить.

    //Создайте таблицу в формате, который поддерживает ваш инструмент.
    //В таблицу следует включить все факторы, значения из каждого класса эквивалентности и каждое граничное значение.

    //Обработайте таблицу с данными с помощью выбранного вами инструмента, предназначенного для попарного тестирования.


    //Результаты урока

    //Итак, что мы узнали о попарном тестировании?

    //1 - Когда необходимо протестировать большое количество комбинаций параметров, можно использовать метод попарного тестирования.

    //2 - В основе попарного тестирования лежат статистические данные,
    //согласно которым до 97 % дефектов вызываются парами факторов,
    //а не комбинациями нескольких факторов.

    //3 - Для попарного тестирования можно использовать различные инструменты.
    //Выбор инструмента зависит от частоты применения метода и сложности вашего случая.
}

