public class chapter_22 {
    //#22.1 Исследовательское тестирование: Теория

    //План урока
    //Что такое исследовательское тестирование?
    //Типы и подходы к исследовательскому тестированию
    //Сессии исследовательского тестирования

    //Что такое исследовательское тестирование

    //Обычно тестирование программного обеспечения (ПО) подразумевает сравнение ожидаемых результатов с фактическими.
    //Ожидаемые результаты при этом описываются в требованиях.
    //Но в реальности это определение затрагивает только один подход — скриптовое тестирование
    //(его также можно назвать тестированием на основе тест-кейсов).
    //Оно полезно при наличии качественно подготовленной технической документации,
    //поддерживаемой в актуальном и согласованном состоянии.

    //Но даже если вам повезло с такой документацией, есть несколько ситуаций,
    //в которых будет лучше, если вы не ограничены скриптовым подходом.

    //Исследовательское тестирование часто даёт возможность протестировать новое ПО,
    //когда требования ещё не подготовлены или качество требований не очень высокое
    //или когда тестировщик хочет изучить функции и свойства приложения перед тем,
    //как начать реальное скриптовое тестирование.
    //В любом случае исследовательское тестирование включает «тестирование без путеводителя»
    //на основе интуиции и знаний в сфере информационных технологий и стремления тестировщика к пониманию приложения.

    //Ещё один пример исследовательского тестирования — отход от составленного плана для более глубокого исследования приложения.
    //Возможно, план не подразумевает анализа сетевого взаимодействия или изменения свойств операционной системы,
    //поэтому возникает необходимость выйти за рамки плана, чтобы понять, как та или иная функция работает в неизвестных условиях.
    //Или, например, ситуация, когда нарушение взаимодействия с базой данных может привести к аварийному завершению приложения,
    //но никто в здравом уме не планирует тестирование такого случая.

    //И, конечно, третий вариант исследовательского тестирования — это локализация дефектов.
    //Алгоритм декомпозиции системы на части, в которых могут быть дефекты, хорошо описан в предыдущем модуле.
    //Этот алгоритм по сути представляет собой применение исследовательского тестирования в отношении дефектов.


    //Типы и подходы к исследовательскому тестированию

    //Исследовательское тестирование в широком смысле

    //В некоторых источниках перечисленные ниже типы тестирования упоминаются как методики исследовательского тестирования.
    //У них есть одна общая черта:
    //отсутствие заранее подготовленного плана и использование вместо него интуиции тестировщика или даже случайно выбранных действий.

    //Хаотическое тестирование, или метод обезьяны — monkey testing.
    //Метод гориллы— gorilla testing.
    //Cвободное, или интуитивное, тестирование — ad hoc testing.
    //Метод предугадывания, или просто угадывания, ошибок — error guessing.
    //Исследовательское тестирование — exploratory testing.

    //Эти подходы рассмотрены ниже.

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/CV773Bb1YVmqQoec_5vG_V1KE2wbzpNd0.jpg
    //Исследовательское тестирование в широком смысле

    //Как видно из рисунка, методики исследовательского тестирования
    //различаются уровнем знаний тестировщика о приложении и степенью случайности тестирования.


    //Monkey testing

    //«Обезьяна, неограниченное количество времени беспорядочно стучащая по клавишам пишущей машинки,
    //почти наверняка наберёт любой заданный текст».
    //Это "Теорема о бесконечных обезьянах". Хаотическое тестирование похоже на ситуацию из теоремы,
    //но целью здесь является не набор пьес Шекспира, а аварийное завершение работы системы.

    //В рамках хаотического тестирования в качестве входных системе предоставляются совершенно случайные данные,
    //и этот процесс продолжается, пока не произойдёт аварийное завершение работы системы или не проявится серьёзный дефект.
    //Этот процесс, и особенно генерацию данных, можно автоматизировать.

    //Хаотическое тестирование нельзя использовать для первоначального исследования ПО,
    //но можно использовать как дополнение к скриптовому тестированию или иногда для локализации дефектов.


    //Метод гориллы (Gorilla testing)

    //Горилла умнее обычной обезьяны, и в этом методе используется больше планирования, а само тестирование более упорядочено.
    //Объект тестирования здесь — выбранный программный модуль. Входные данные подготавливаются заранее.
    //Целью является проверка надёжности модуля с помощью многократного повторения теста с одними и теми же данными.
    //Тестирование методом гориллы нельзя использовать для первоначального исследования ПО,
    //но можно использовать как дополнение к скриптовому тестированию.


    //Свободное, или интуитивное, тестирование (Ad hoc)

    //Свободное тестирование подразумевает спонтанность (англ. ad hoc — спонтанный, непродуманный, произвольный,
    //случайный; незапланированный; эпизодический; специальный; специально подобранный к данному случаю),
    //означающую «по необходимости».

    //Такое тестирование не планируется и не ограничивается по времени.
    //Его цель — улучшить понимание системы. Ничего не планируется заранее, ничего не документируется.
    //Только творческое свободное применение. Тестировщик может нажать любую кнопку,
    //запустить любой сценарий и изменить всё что угодно внутри приложения, но без какой-либо надежды найти дефект.

    //Подход весьма полезен при первом знакомстве с приложением, особенно когда предметная область не очень знакома.
    //Как дополнение к локализации дефектов и скриптовому тестированию этот подход мало пригоден,
    //так как эти виды тестирования подразумевают получения какого-либо результата.


    //Метод угадывания ошибок (Error guessing)

    //Подход основан на знании приложения и информационных технологий в целом со стороны тестировщика.
    //На самом деле это не угадывание, а применение ваших знаний о тех местах ПО, где могут быть неисправности.
    //Тестировщик использует пограничные варианты, нарушение взаимодействия, случаи совпадений и параллельной работы и т. д.
    //для проверки надёжности приложения или просто для выяснения реакции.
    //Это может быть просто длинное имя пользователя или искусственное замедление сети.

    //Метод угадывания ошибок не очень полезен для первоначального исследования ПО,
    //но определённо может применяться как дополнение к скриптовому тестированию.

    //Исследовательское тестирование мы рассмотрим как отдельную тему далее.


    //Итог:
    //Существуют различные типы исследовательского тестирования
    //(хаотическое тестирование, метод гориллы, свободное тестирование и угадывание ошибок),
    //но все они не подразумевают планирование и документирование.


    //Исследовательское тестирование

    //Тест-туры (Testing tours)

    //Понятие тест-туров (тестовых туров) подразумевает использование определённых стратегий тестирования,
    //выбор которых зависит от типа искомых дефектов или типа исследуемых функций.
    //Термин тест-тур обращается к образу туриста в незнакомом городе,
    //который осматривает местность и достопримечательности, а затем переходит к менее занимательным объектам.
    //Город разделяется на районы, подобным же образом делится и приложение.
    //Нет смысла перечислять здесь все виды туров. Мы опишем самые полезные.
    //Полный список можно найти в продвинутых материалах.


    //Деловой район: тур по ориентирам.
    //Ориентиры ведут туриста от одной достопримечательности города к другой.
    //В случае с приложением это тур по самым используемым функциям или, например, по упомянутым в главном меню.
    //Этот тур очень полезен при первом знакомстве с приложением,
    //но не особо применим для экспериментирования с запланированными тестами или для локализации дефектов.


    //Деловой район: интеллектуальный тур.
    //Этот вид тура связан с образом очень умного туриста, который прочитал множество книг о городе и донимает расспросами.
    //Тестировщик в роли такого туриста должен задавать умные и порой неудобные вопросы.
    //Что если название объекта будет длинным? Что если список будет пустым? Что если сетевое соединение будет медленным?
    //Этот вид тура, в отличие от предыдущего, наиболее применим для локализации дефектов и в
    //качестве дополнения к скриптовому тестированию.


    //Исторический район: тур по плохому району.
    //Тур по плохому району относится к местам, в которых вам бы не хотелось побывать.
    //В приложениях есть фрагменты кода, с которыми никто не работал уже долгое время и с которыми все опасаются иметь дело.
    //Для вас это означает проверку таких фрагментов (можно спросить программистов, где такие фрагменты находятся)
    //и попытки найти в них дефекты.
    //Здесь применимы все варианты исследовательского тестирования от первого знакомства с ПО до локализации дефектов.


    //Гостиничный район: тур, отменённый из-за дождя.
    //Представьте, вы отменили прогулку из-за дождливой погоды и решили остаться в гостинице.
    //Для тестировщиков это означает отмену какой-либо длительной операций, выполняемой программным обеспечением.
    //Например, отправить большой файл по сети, а затем отменить отправку.
    //Нормально ли отреагирует приложение на такое действие?
    //Как отреагирует сеть? Помогает ли это в локализации каких-либо сетевых дефектов?


    //Захудалый район.
    //В этом районе живут люди с плохой репутацией, по такому району опасно ходить.
    //Тестировщики должны имитировать действия таких людей, например нарушая связь с сервером или базой данных,
    //вызывая аварию сети и т. д.
    //Другими словами, это действия, которые могут привести к аварийному завершению работы приложения.


    //Подводя итоги

    //В исследовательском тестировании используется образ туристического тура в неизвестном городе.
    //Некоторые виды туров можно использовать для первоначального знакомства с приложением,
    //некоторые для локализации дефектов или в качестве дополнения к скриптовому тестированию.


    //Сессии исследовательского тестирования

    //Несмотря на название, исследовательское тестирование не подразумевает свободу и творчество.
    //Для него требуются спланированные сессии, ограниченные по времени и ресурсам.

    //Этапы планирования сессии следующие:

    //Обоснование необходимости сессии (локализация серьёзного дефекта, исследование приложения, обновление тест-кейсов и т. д.)

    //Выбор лиц, которые будут участвовать в сессии.
    //Как правило, они должны быть знакомы с приложением, или предметной областью,
    //или как минимум с основами информационных технологий.
    //Несмотря на широко распространённое мнение, исследовательское тестирование не предназначено для начинающих.

    //Выбор инструмента для сессии. Самый простой инструмент показан дальше.

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/SnGpK1hM8nr20XzN_NuoorOsKhX87a7CZ.png
    //Расширение браузера Chrome "Exploratory Testing"

    //Приложение XRay - Exploratory Testing App

    //У сессии должно быть название (поле title),
    //описание (chapter — англ., сюжет, тема, предмет),
    //временные рамки (time limit — англ., предельный срок) и
    //предварительные условия (preconditions).

    //Инструмент позволяет работать в рамках предельных сроков, создавать снимки экрана и заметки.

    //В начале сессии  тестировщик нажимает кнопку Start session (начать сессию)
    //и старается достичь целей в течение запланированного времени.
    //Это может быть исследование новой функции, локализация дефекта или тестирование «вокруг» запланированных сценариев.

    //В качестве примера сессии тестирования можно привести локализацию дефекта, описанную в предыдущей секции.


    //Результаты урока

    //Итак, что мы узнали об исследовательском тестировании?

    //Понятие исследовательского тестирования можно использовать как в широком, так и в узком смысле.
    //Исследовательское тестирование в широком смысле включает следующие типы:
    //1 - Хаотическое тестирование, или метод обезьяны (monkey testing)
    //2 - Метод гориллы (Gorilla testing)
    //3 - Cвободное, или интуитивное, тестирование (Ad hoc testing)
    //4 - Метод предугадывания, или просто угадывания, ошибок (Error guessing)
    //5 - Исследовательское тестирование (Exploratory itself)

    //В исследовательском тестировании используются тест-туры.
    //Исследовательское тестирование можно применять для исследования новых функций,
    //при необходимости обновления существующих сценариев тестирования и в случае локализации серьёзного дефекта.
}
