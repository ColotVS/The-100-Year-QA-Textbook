public class chapter_37 {
    //#37.1 Методы проектирования тестов — диаграммы состояний и переходов: Теория

    //План урока
    //Идея диаграмм состояний и переходов
    //Как создавать диаграммы состояний и переходов
    //Как сочетать диаграммы состояний и переходов с разделением на классы эквивалентности и анализом граничных значений


    //Идея диаграмм состояний и переходов (State-transition diagrams)

    //Состояния объектов и переходы состояний

    //В любом приложении, как и в реальной жизни, мы имеем дело с объектами.
    //У объектов есть характеристики (атрибуты) и способности (методы). В качестве примера давайте возьмём
    //требования предметной области и технические требования (на языке UML) приложения покупки билетов FTB.

    //Приложение Flight Ticket Booking (FTB) представляет собой решение для покупки билетов на самолёт через Интернет.
    //У приложения будут такие функции, как составление расписания авиарейсов,
    //поиск, бронирование билетов для клиентов и проверка билетов.
    //Система должна быть удобной для пользователей…

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/w1RADiXLiBRZSrQr_qVgbyYOXCntnIY24.jpg
    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/W1yW1tB3qkD4kbpI_xkSX5gpksl1exn5j.png

    //Одним из основных объектов приложения является авиарейс.

    //Что мы можем узнать о нём, анализируя приведённые требования?

    //1) Рейс можно изменить, совершив определённые действия.

    //2) Конечно, изменять можно свойства, перечисленные на диаграмме классов в прямоугольнике Flight (авиарейс).

    //3) Кроме того, у рейса есть состояния.
    //О некоторых из них можно узнать из диаграммы вариантов использования (добавлен, забронирован и отменён).

    //4) Сведения об изменениях состояния (как изменить состояние определённого рейса)
    //можно узнать из соответствующих вариантов использования.

    //В итоге авиарейс (конкретный авиарейс с номером в базе данных и некий абстрактный)
    //можно рассматривать как объект, который изменяется пользователем.
    //То есть операция с рейсом может привести к изменению его состояния. Например:

    //Администратор создаёт новый авиарейс. Авиарейс получает состояние «Новый».

    //Пассажир или администратор резервирует место на этом рейсе. Авиарейс получает состояние «Место зарезервировано».

    //Пассажир или администратор отменяет резервирование. Авиарейс получает состояние «Резервирование отменено».


    //Как создать диаграмму состояний

    //Состояния

    //Как понять, какие действия ведут к изменениям в состоянии объекта и к каким именно?
    //Есть ли у нас какой-либо специальный тип схем, описывающий такие изменения?

    //В модуле, посвящённом языку моделирования UML, мы уже познакомились с такой схемой.
    //Она называется диаграммой состояний и переходов (или ещё диаграммой перехода состояний, State-transition diagram).
    //Теперь пришло время изучить её подробнее.

    //Какие состояния возможны для авиарейса?

    //1 - New (новый, или добавлен): известно из диаграммы вариантов использования.

    //2 - Booked (место забронировано): известно из диаграммы вариантов использования.

    //3 - Canceled (бронирование отменено): известно из диаграммы вариантов использования.

    //4 - Expired (прошедший): известно из диаграммы классов и требований предметной области.
    //Поскольку существует дата отправления, то авиарейс может быть прошедшим.

    //Обратите внимание, что операции Verify (проверить) и Search (поиск) не изменяют состояние рейса.
    //Они лишь показывают его текущее состояние.

    //Давайте поместим перечисленные состояния на схему.

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/TDbYW2BZ2SJoawWT_9PcCVgRnFt5CcgfN.png


    //Переходы

    //Изменения состояний называют переходами. Чтобы поместить их на схему, необходимо ответить на следующие вопросы.

    //Между какими состояниями возможны переходы?

    //Какие действия нужно выполнять, чтобы происходили переходы?

    //Например, из состояния New (новый) допускается переход только в два состояния:
    //Booked (место забронировано) или Expired (прошедший).
    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/tjR4SiW3OCSUHjis_T2NzJE4JIpzTgZtI.png

    //Чтобы произошёл переход из состояния New в состояние Booked,
    //необходимо выполнить шаги из варианта использования Book Flight (забронировать авиабилет).
    //Для перехода New — > Expired действий пользователя не требуется,
    //переход происходит при наступлении определённого времени.
    //На рисунке ниже эта операция показана как departureDate > now()
    //(датаОтправления > сейчас()), она может быть легко выполнена на уровне базы данных с помощью языка SQL.
    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/eJH5IEO49eXl-yXR_84ysoXEq1WblOLeb.png

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/DS1G8a2yaE_EoQS3_KpnRMgGNnCwUw9V_.png
    //На схеме есть один странный пробел.
    //В случае отмены бронирования должно ли состояние автоматически смениться на New (новый),
    //чтобы кто-нибудь другой мог забронировать место?
    //В требованиях об этом ничего не сказано, поэтому, как и в предыдущих главах, есть смысл спросить у заинтересованных лиц.

    //Итог:

    //Диаграмма состояний и переходов показывает высокоуровневые связи между состояниями объектов и
    //способы перехода между ними (в результате действий пользователей или системы).


    //Сочетание диаграмм состояний и переходов с классами эквивалентности и граничными значениями

    //Первая операция на схеме — Create Flight (создать авиарейс).
    //Что если мы разделим эту операцию на классы и пройдём процесс смены состояний для каждого класса? Например, сценарий 1:
    //1 - Создать международный рейс с текущей датой
    //2 - Забронировать место на рейсе
    //3 - Изменить дату на истёкшую

    //Сценарий 2:
    //1 - Создать международный рейс с датой в будущем.
    //2 - Забронировать место на рейсе.
    //3 - Изменить дату на истёкшую.

    //И т. д.

    //Также можно свободно использовать граничные значения.
    //Например, можно установить время отправления departureTime в значение,
    //которое на одну минуту меньше текущего времени currentTime (примените SQL для этого!).


    //Использование диаграмм состояний и переходов для тестирования различных объектов

    //Диаграммы состояний и переходов могут быть использованы на практике для тестирования любых объектов системы,
    //от высокоуровневых, описанных выше,
    //до низкоуровневых объектов тестируемой системы, железа или даже операционной системы.

    //Пример 1. Диаграмма состояний и переходов для логина
    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/aJRdzaVi3FliYTFz_LhsAw8k6NSaYxAdr.jpg

    //Пример 2. Диаграмма состояний и переходов для банкомата
    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/F350IVbzkANJeVuK_eIBkWCz5nK9lmhey.png

    //Пример 3. Диаграмма состояний и переходов для процесса ОС
    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/FLuzDl3njdJvioCv_sLFk6ABFkx7-P0-_.png


    //Некоторые более сложные случаи диаграмм переходов и состояний

    //Случай 1. При выполнении действия происходит переход в то же состояние.
    //Диаграмму логина, представленную выше, можно сделать более короткой и лаконичной,
    //если процесс выполнения попыток логина представить в виде цикла:
    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/jdXsdN4PYSQGkTUr_HEuvDeZHHyYdhDTJ.png
    //В данном случае стрелка Login unsuccessful 1..4 означает,
    //что пользователь может осуществить от 1 до 4 попыток неправильно ввести свои данные.
    //Пятая попытка ведет к закрытию приложения.

    //Случай 2. Старт и финиш процесса.
    //Давайте повнимательнее посмотрим на диаграмму работы банкомата, представленную выше.
    //При проектировании тестов может быть важно, что какое-то из состояний системы является конечным,
    //т.е. придя в это состояние, система будет требовать перезапуска, либо пользователь достигнет цели сценария,
    //либо процесс остановится в этой точке. В то же время иногда не слишком очевидно,
    //что начинать путь необходимо с определенного состояния
    //(как в сквозном примере с рейсом, когда состояние "Новый" (New) не требует дополнительных пояснений).

    //Чтобы отметить начальную и конечную точки процесса, существуют специальные значки -
    //черный круг (начало) и черный круг внутри белого круга - конец
    //(как на диаграмме, описывающий состояния банкомата, показанной выше).
    //Их обязательно нужно учитывать при планировании тестирования.


    //Итог:

    //Диаграммы состояний и переходов можно применять совместно с другими методами проектирования тестов.
    //Они могут быть использованы для описания процесса на любом уровне приложения, для поведения процесса ОС или аппаратуры.


    //Результаты урока

    //Итак, что мы узнали о диаграммах состояний?

    //1 - Метод, использующий переходы состояний, применяется, когда есть состояния объектов и действия,
    //служащие для перехода между состояниями.

    //2 - Диаграммы состояний и переходов — это высокоуровневое представление состояний и переходов.
    //На этих диаграммах подробные сведения не приводятся.

    //3 - Для преобразования диаграмм состояний и переходов в тест-кейсы используются сценарии
    //(см. главу, посвящённую языку моделирования UML).

    //4 - Для выявления более подробной информации и дополнительных вариантов можно добавить метод классов эквивалентности,
    //анализ граничных значений.

    //5 - Диаграммы состояний и переходов могут быть использованы для описания процесса на любом уровне приложения,
    //для поведения процесса ОС или аппаратуры.
}
