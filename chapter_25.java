public class chapter_25 {
    //#25.1 Гибкая методология или каскадная модель: Теория

    //План на сегодня
    //Сравнение гибкой методологии и каскадной модели процесса разработки ПО
    //Ключевые принципы и идеи гибкой разработки


    //Сравнение гибкой методологии (Agile) и каскадной (водопадной) модели (Waterfall) процесса разработки ПО

    //В наши дни чаще всего используются два подхода к разработке программного обеспечения (ПО):
    //каскадная модель (Waterfall) и гибкая разработка (Agile).
    //Каскадная модель применяется на протяжении десятилетий,
    //но неудобство строгих рамок каскадной модели привело к появлению гибкой методологии.

    //Когда в 2001 году был предложен гибкий подход к разработке, многие участники отрасли думали,
    //что применение каскадной модель скоро сойдёт на нет. Однако она до сих пор широко используется и в наши дни.
    //В отчёте 2017 года Института управления проектами сообщается,
    //что 51 % опрошенных организаций используют каскадную модель всегда или, по крайней мере, часто.

    //Ведётся множество дискуссий, какая методология лучше.
    //Но на самом деле, нет одного «самого лучшего» подхода для ВСЕХ проектов.
    //Чтобы выбрать методологию для конкретного проекта, нужно учесть много факторов.
    //Важную роль при выборе играют уникальные цели каждого проекта,
    //а также приемлемость тех или иных инструментов, технологий и процессов.
    //Какой из вариантов позволит получить высококлассный продукт наиболее эффективным способом?
    //Давайте посмотрим на преимущества и недостатки каскадной модели и гибкой методологии.


    //Каскадная модель

    //В каскадной модели разработки ПО предусмотрены обособленные этапы, каждый из которых зависит от результатов предыдущего.
    //До начала новой стадии предыдущая должна быть полностью завершена.
    //В самом конце результатом будет функциональное наполнение разработанного продукта.
    //На рисунке ниже показана схема из строго предписанных шагов.

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/wPkXlHFRmiA2KAKe_qqYtmJ-naKfHLDbC.png
    //Каскадная (водопадная) модель процесса разработки программного обеспечения.
    //Этапы - Анализ, Утверждение требований, Имплементация, Тестирование, Релиз. Обратная стрелка - стабилизация.

    //1 - Анализ: на этом этапе узнают потребности конечного пользователя.
    //Какие существуют прикладные потребности и как на них можно ответить с помощью ПО?
    //В ходе этой фазы вырабатываются требования. (ЧТО необходимо?)

    //2 - Утверждение требований: документируются конкретные потребности конечных пользователей.
    //Требования записываются таким образом,
    //чтобы определить, КАК код будет разрабатываться, чтобы удовлетворить потребности пользователей.

    //3 - Разработка: программисты пишут код, реализуя функции, зафиксированные в требованиях.
    //Программисты же выполняют модульное тестирование внесённых изменений с помощью юнит-тестов,
    //а уже затем отправляют программу на тестирование специалистам по обеспечению качества.

    //4 - Тестирование: на этом этапе за работу принимаются специалисты по обеспечению качества.
    //Они знакомятся с требованиями и создают тестовую документацию, чтобы определить, КАК тестировать соответствующие функции.
    //Этот шаг вместе с шагом разработки является итеративным.
    //Находятся дефекты, и в код вносятся изменения, после чего программы тестируются снова.

    //5 - Релиз: разработка и тестирование полностью завершены.
    //Все заинтересованные лица согласны, что продукт функционирует, как задумано, и нет неисправленных критических дефектов.


    //Преимущества каскадной (водопадной) модели (Waterfall)

    //- Это проверенная временем методология, давно применяемая на практике.
    //Она используется множеством разных компаний.
    //Концепция проста, а ожидаемые результаты ясны.

    //- В рамках методологии требуется подробная документация уже на начальном этапе проекта.
    //Много времени посвящается тому, чтобы определить, что В ТОЧНОСТИ хочетcя получить, и как это будет реализовано.

    //- Фазы этой модели более изолированы.
    //Тестировщики и программисты обычно не взаимодействуют с конечными пользователями.
    //С пользователями в основном работают бизнес-аналитики и «владельцы продукта».
    //Поскольку команды обеспечения качества и разработчики не контактируют
    //с пользователями, у них есть больше времени на код и тест-кейсы.

    //- Получаемый результат предсказуем благодаря вложенным силам и времени на стадиях анализа и утверждения.


    //Недостатки каскадной (водопадной) модели (Waterfall)

    //
}
