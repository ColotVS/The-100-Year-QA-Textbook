public class chapter_25 {
    //#25.1 Гибкая методология или каскадная модель: Теория

    //План на сегодня
    //Сравнение гибкой методологии и каскадной модели процесса разработки ПО
    //Ключевые принципы и идеи гибкой разработки


    //Сравнение гибкой методологии (Agile) и каскадной (водопадной) модели (Waterfall) процесса разработки ПО

    //В наши дни чаще всего используются два подхода к разработке программного обеспечения (ПО):
    //каскадная модель (Waterfall) и гибкая разработка (Agile).
    //Каскадная модель применяется на протяжении десятилетий,
    //но неудобство строгих рамок каскадной модели привело к появлению гибкой методологии.

    //Когда в 2001 году был предложен гибкий подход к разработке, многие участники отрасли думали,
    //что применение каскадной модель скоро сойдёт на нет. Однако она до сих пор широко используется и в наши дни.
    //В отчёте 2017 года Института управления проектами сообщается,
    //что 51 % опрошенных организаций используют каскадную модель всегда или, по крайней мере, часто.

    //Ведётся множество дискуссий, какая методология лучше.
    //Но на самом деле, нет одного «самого лучшего» подхода для ВСЕХ проектов.
    //Чтобы выбрать методологию для конкретного проекта, нужно учесть много факторов.
    //Важную роль при выборе играют уникальные цели каждого проекта,
    //а также приемлемость тех или иных инструментов, технологий и процессов.
    //Какой из вариантов позволит получить высококлассный продукт наиболее эффективным способом?
    //Давайте посмотрим на преимущества и недостатки каскадной модели и гибкой методологии.


    //Каскадная модель

    //В каскадной модели разработки ПО предусмотрены обособленные этапы, каждый из которых зависит от результатов предыдущего.
    //До начала новой стадии предыдущая должна быть полностью завершена.
    //В самом конце результатом будет функциональное наполнение разработанного продукта.
    //На рисунке ниже показана схема из строго предписанных шагов.

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/wPkXlHFRmiA2KAKe_qqYtmJ-naKfHLDbC.png
    //Каскадная (водопадная) модель процесса разработки программного обеспечения.
    //Этапы - Анализ, Утверждение требований, Имплементация, Тестирование, Релиз. Обратная стрелка - стабилизация.

    //1 - Анализ: на этом этапе узнают потребности конечного пользователя.
    //Какие существуют прикладные потребности и как на них можно ответить с помощью ПО?
    //В ходе этой фазы вырабатываются требования. (ЧТО необходимо?)

    //2 - Утверждение требований: документируются конкретные потребности конечных пользователей.
    //Требования записываются таким образом,
    //чтобы определить, КАК код будет разрабатываться, чтобы удовлетворить потребности пользователей.

    //3 - Разработка: программисты пишут код, реализуя функции, зафиксированные в требованиях.
    //Программисты же выполняют модульное тестирование внесённых изменений с помощью юнит-тестов,
    //а уже затем отправляют программу на тестирование специалистам по обеспечению качества.

    //4 - Тестирование: на этом этапе за работу принимаются специалисты по обеспечению качества.
    //Они знакомятся с требованиями и создают тестовую документацию, чтобы определить, КАК тестировать соответствующие функции.
    //Этот шаг вместе с шагом разработки является итеративным.
    //Находятся дефекты, и в код вносятся изменения, после чего программы тестируются снова.

    //5 - Релиз: разработка и тестирование полностью завершены.
    //Все заинтересованные лица согласны, что продукт функционирует, как задумано, и нет неисправленных критических дефектов.


    //Преимущества каскадной (водопадной) модели (Waterfall)

    //- Это проверенная временем методология, давно применяемая на практике.
    //Она используется множеством разных компаний.
    //Концепция проста, а ожидаемые результаты ясны.

    //- В рамках методологии требуется подробная документация уже на начальном этапе проекта.
    //Много времени посвящается тому, чтобы определить, что В ТОЧНОСТИ хочетcя получить, и как это будет реализовано.

    //- Фазы этой модели более изолированы.
    //Тестировщики и программисты обычно не взаимодействуют с конечными пользователями.
    //С пользователями в основном работают бизнес-аналитики и «владельцы продукта».
    //Поскольку команды обеспечения качества и разработчики не контактируют
    //с пользователями, у них есть больше времени на код и тест-кейсы.

    //- Получаемый результат предсказуем благодаря вложенным силам и времени на стадиях анализа и утверждения.


    //Недостатки каскадной (водопадной) модели (Waterfall)

    //Определение конечных свойств и функций на столь ранней стадии процесса препятствуют
    //творческому подходу к развитию продукта и внедрению новых идей по ходу разработки.
    //Уже после начала кодирования и тестирования может выясниться,
    //что некоторые составляющие неверно определены ещё на этапе требований, архитектуры или проектирования.
    //Или что есть лучший способ достичь того же самого.

    //Каскадная модель может быть очень затратна.  Перемены — неизменная часть жизни.
    //То, что было верным в апреле, может перестать быть таковым уже в июне.
    //Завершение работы над требованиями на столь ранней стадии осложняет и удорожает любые последующие манёвры,
    //поскольку кодирование и тестирование уже начались.

    //Много времени тратится на документацию вместо написания кода и тестирования.
    //Всё должно документироваться так, чтобы все заинтересованные лица могли воспринимать информацию единообразно.
    //Для этого может потребоваться МНОГО времени и средств.


    //Гибкая разработка (Agile)

    //Agile предполагает больше взаимодействия и более короткие промежутки разработки - итерации - по сравнению с каскадной моделью.
    //Методология предполагает самоорганизацию команд, включающих функции «владельцев продукта»,
    //бизнес-аналитиков, разработчиков, тестировщиков.
    //Члены команды выполняют итерацию за итерацией, чтобы определить требования, разработать код и выполнить тестирование.
    //Итеративные циклы гибкой разработки намного короче, чем в каскадной модели.
    //В этой методологии используется понятие спринта (об этом мы поговорим позже).
    //Спринты обычно длятся одну или две недели.

    //Важно заметить, что нет одного большого продукта, единовременно поставляемого после завершения всей разработки.
    //Вместо этого предусмотрена постепенная разработка нескольких небольших продуктов (или порций функциональности).

    //1 - Анализ: на этом этапе узнают потребности конечного пользователя.
    //Какие существуют прикладные потребности и как на них можно ответить с помощью ПО?
    //В ходе этой фазы вырабатываются требования. (ЧТО необходимо?)
    //Этап выполняется для небольшого первоначального количества функций, а не для всего продукта сразу.
    //Утверждение требований выполняется на этом же этапе.
    //На этом же этапе за работу принимаются тестировщики.
    //Они знакомятся с требованиями и создают тестовую документацию,
    //чтобы определить КАК тестировать соответствующие функции.

    //2 - Разработка: программисты пишут код, реализуя функции, зафиксированные в требованиях.
    //Программисты выполняют модульное тестирование внесённых изменений,
    //а затем отправляют программу на тестирование специалистам по обеспечению качества.
    //На этом этапе тестировщики продолжают создавать тестовую документацию.

    //3 - Тестирование:  этот шаг вместе с шагом разработки является итеративным.
    //Программы создаются и тестируются.
    //Находятся дефекты, и в код вносятся изменения.
    //Программы тестируются снова.

    //4 - Релиз: разработка и тестирование полностью завершены.
    //Все заинтересованные лица согласны, что продукт функционирует, как задумано, и нет неисправленных критических дефектов.

    //Как вы видите, глобальные шаги те же, что и в каскадной модели.
    //Но на схеме, приведённой выше, важно обратить внимание на круг справа.
    //Он иллюстрирует идею итераций, затрагивающих КАЖДЫЙ шаг процесса разработки.
    //Т.е. цикл фактически повторяется каждую одну-две недели.

    //1 - Планируй (Plan): планируется, что будет включено в итерацию.
    //2 - Проектируй (Design): определяется, как это будет реализовано.  Как много времени займёт путь от идеи до конечного продукта.
    //3 - Разрабатывай (Develop): программисты пишут код.
    //4 - Тестируй (Test): специалисты по обеспечению качества тестируют функции на соответствие требованиям.
    //5 - Релиз (Release): прикладное применение новых функций в продукте.
    //6 - Обратная связь (Feedback): все заинтересованные лица обсуждают,
    //что в ходе итерации было сделано хорошо, а что требуется улучшить.

    //Преимущества гибкой разработки

    //Появление гибкой методологии разработки ПО повысило способность команд к адаптации и позволило вносить изменения быстрее.
    //Результат появляется в виде небольших наиболее полезных приращений.
    //Благодаря этому растёт скорость реакции на изменения в окружающем мире.

    //Процесс приобретает большую гибкость.  Требования и приоритеты можно легко менять на ходу.

    //В командах больше воодушевления.  Все одинаково важны.
    //Все члены команды вносят вклад для получения качественного продукта.
    //Возможность определять, КАК и ЧТО должно делаться, воодушевляет отдельных разработчиков и всю команду.

    //Пользователи быстрее получают нужные функции.
    //Скорость играет решающую роль в сегодняшнем мире, когда требования пользователей постоянно меняются.
    //Итеративные циклы, используемые в гибкой методологии, намного короче, чем в каскадной модели.

    //Поддерживается расширение знаний.  В рамках гибкого подхода признаётся, что разработка ПО — сложный процесс.
    //У членов команды всегда есть возможность выяснить, как можно сделать то или иное лучше или быстрее.

    //Поощряется творчество.  Возможность изменять требования позволяет использовать самые новые технологии.
    //Или находить лучшие способы реализации.


    //Недостатки гибкой разработки (Agile)

    //Гибкая разработка широко используется, но не всегда применима.

    //Конечный результат и сроки менее предсказуемы по сравнению с каскадной моделью.
    //Процесс более итеративен и способствует изменениям, что может привести к неконтролируемому росту масштабов проекта.
    //Поэтому если вам важны жесткие неизменяемые сроки - не используйте Agile.

    //«Владельцы продукта» в ходе процесса должны проводить больше времени во взаимодействии с командой.
    //Не только в начале, но и на протяжении всей разработки.
    //Поэтому, если владельцы продукта к взаимодействию не готовы, Agile - это не ваш выбор.

    //ОБЯЗАТЕЛЕН высокий уровень доверия между членами команды.
    //Доверие необходимо для совместной работы, включая честную обратную связь и творческий подход.
    //Поэтому в матричной структуре и схеме "начальник всегда прав" Agile, скорее всего, не приживется.

    //Переделывание неизбежно.  Из-за изменений в проекте уже разработанный код может устареть и до, и после внедрения в продукт.
    //Переработка кода может вызвать разочарование и заметно повысить затраты.
    //Придется привыкнуть к тому, что с таким трудом написанная функциональность
    //через какое-то время может быть просто удалена из проекта.


    //Какую методологию выбрать?  Каскадную модель или гибкую разработку?

    //Итак, как нам решить, что использовать?  Вот некоторые рекомендации:

    //1 - Если уже на начальном этапе есть полные и качественные требования,
    //то большая гибкость процесса разработки не потребуется, поэтому выбирайте каскадную модель.
    //Например: в случае внедрения изменений в законодательстве новые перемены в скором времени не последуют,
    //поэтому весь процесс разработки можно распланировать заранее.
    //Если требования расплывчатые или подвержены изменениям, то выбирайте гибкую методологию.
    //Тогда позже будет достаточно возможностей для уточнения.

    //2 - При наличии строгого неизменного процесса используйте каскадную модель.
    //Например: нередко в государственных контрактах ТОЧНО описываются процессы, которым нужно следовать.
    //Но если разработчику предоставлена свобода в выборе путей реализации системы, то используйте гибкую методологию.

    //3 - Если процесс разработки не предполагает участие «владельца продукта» (об этой роли расскажем позже),
    //то ваш выбор — каскадная модель.
    //Пример: у исполняющего роль «владельца продукта» высокая загрузка и нет времени на участие в конкретном проекте.
    //Если «владелец продукта» входит в команду и будет участвовать в ежедневных коротких собраниях
    //(стендапах) или хотя бы раз в спринт приходить на демо или ретроспективу, остановитесь на гибкой методологии.

    //4 - Когда вносятся улучшения в существующий продукт с чётко определёнными функциями и
    //интерфейсами со множеством других приложений, то следует выбрать каскадную модель.
    //Пример. Добавление поля в таблицу базы данных. Необходимо изменить ВСЕ программы, обращающиеся к таблице.
    //ВСЕ программы необходимо изменить и протестировать до внедрения в действующий продукт.
    //Если проект подразумевает новый продукт или новые функции, стоит выбрать гибкую методологию.

    //5 - Если график работ фиксированный, то может лучше подойти каскадная модель.
    //Пример. Выход новых законов, которые нужно учесть в продукте.
    //Конечный срок реализации определяется вступлением закона в силу, а не «владельцем продукта».
    //Если есть некоторая свобода по времени, то выберите гибкую разработку.


    //Теперь, зная о различных способах организации процесса разработки, вы, возможно, задаётесь вопросом:
    //не является ли комбинация двух методологий лучшим решением по крайней мере для некоторых проектов.

    //Многие компании используют гибридный подход.
    //При этом одновременно применяются принципы, заложенные в каскадной модели и гибкой методологии, таким образом,
    //чтобы оптимизировать затраты времени и ресурсов команды и при этом достичь высокого уровня удовлетворения пользователей.


    //Подведём итог.

    //Каскадная модель и гибкая методология — обе находят применение в мире разработки программного обеспечения.
    //Порой применяется гибридный подход, комбинирующий оба подхода.

    //В рамках этого учебника, адресованного начинающим тестировщикам, мы сконцентрируемся на гибкой разработке.


    //Ключевые принципы и идеи гибкой разработки

    //Agile Manifesto

    //После разработки гибкой методологии её авторы составили краткий манифест, описывающий основные ценности Agile.

    //Agile-манифест разработки программного обеспечения

    //Мы постоянно открываем для себя более совершенные методы разработки
    //программного обеспечения, занимаясь разработкой непосредственно и помогая
    //в этом другим. Благодаря проделанной работе мы смогли осознать, что:

    //Люди и взаимодействие важнее процессов и инструментов
    //Работающий продукт важнее исчерпывающей документации
    //Сотрудничество с заказчиком важнее согласования условий контракта
    //Готовность к изменениям важнее следования первоначальному плану

    //То есть, не отрицая важности того, что справа,
    //мы всё-таки больше ценим то, что слева.


    //1 - Наш главный приоритет — удовлетворение потребностей пользователей благодаря быстрой и
    //непрерывной разработке полезного программного обеспечения.
    //На деле это - постоянное общение с владельцами продукта.

    //2 - Изменения требований одобряются даже на поздних этапах разработки.

    //3 - Частые релизы работоспособного ПО, от пары недель до пары месяцев, чем короче - тем лучше.
    //Встречаются компании, в которых релизы выходят каждый день.

    //4 - Представители предметной области и разработчики должны каждый день обсуждать текущие результаты работы.

    //5 - Основа проектов — мотивированные участники.
    //Организуйте окружающее пространство, обеспечьте необходимым и наделите свободой и полномочиями для выполнения работы.

    //6 - Самый эффективный и продуктивный способ донесения информации до команды
    //разработчиков и передачи информации между членами команды — это личное общение.

    //7 - Главный показатель достижений — работоспособное программное обеспечение, а не документация.

    //8 - Гибкая методология поддерживает жизнеспособность процессов разработки.
    //У заказчиков, разработчиков и пользователей должна быть возможность неограниченно долго сохранять постоянный темп.

    //9 - Постоянное внимание к техническому совершенствованию и качественному проектированию.

    //10 - Простота как искусство делать только действительно необходимое.
    //Основной принцип Agile - "make it simple" (будь проще).
    //Если какая функция может быть реализована несколькими способами, нужно выбирать самый простой.

    //11 - Самоорганизующиеся команды.
    //Менеджер не нужен, все и так знают, что им делать.
    //А для настройки процессов достаточно SCRUM-мастера.

    //12 - Команда постоянно находит пути повышения эффективности и реализует их.


    //Подведём итог.
    //Манифест гибкой разработки - это суть Agile.
    //Существует 12 принципов применения методологии.


    //Подведём итоги

    //1
    //Гибкая методология — это новый, более эффективный и быстрый способ разработки ПО.

    //2
    //Гибкая разработка зиждется на ряде ценностей и принципов.



}
