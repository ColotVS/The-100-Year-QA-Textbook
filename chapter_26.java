public class chapter_26 {
    //#26.1 Scrum: Теория

    //План урока
    //Применение принципов гибкой разработки и их воплощение в методах (Канбан, Lean)
    //Методология SCRUM
    //Программное обеспечение для управления проектами


    //Применение принципов Agile и различные виды гибкой разработки

    //Мы изучили принципы и идеи гибкой разработки.
    //Теперь посмотрим, как эти принципы применяются в конкретных методах организации процесса разработки.
    //Реализация принципов гибкой разработки даёт множество преимуществ.
    //В процессе команда разработчиков больше сотрудничает с конечными пользователями.
    //Стейкхолдеры (заинтересованные лица) будут знать текущее состояние проекта в любой момент времени и смогут ускорить разработку,
    //назначив приоритеты реализуемым функциям.

    //Основные формы воплощения гибкой разработки.
    //Существует множество путей реализации принципов и идей гибкой разработки. Далее описываются самые используемые.


    //Канбан
    //Этот метод подходит в ситуациях, когда невозможно спрогнозировать,
    //что именно нужно будет сделать, и когда требуется быстрое внедрение без необходимости заботиться о других аспектах работы.
    //Метод используется для построения рабочего процесса, управления им и оптимизации.
    //Канбан позволяет визуализовать ход работ и снизить количество незавершённых задач.
    //В методе Канбан спринты не используются.

    //Доска Канбан делится на три столбца: «нужно сделать», «в работе» и «сделано».
    //На доске виден весь процесс разработки. Доска включает работы, относящиеся к одному конкретному этапу.
    //Команда собирается у доски на ежедневных коротких собраниях (стендапах), проведение которых строго регулируется.
    //Команда начинает обзор с конца доски и анализирует каждое задание.
    //Для каждого задания ставятся вопросы: «Что мешает нам переместить эту задачу на следующую стадию?»,
    //«Не застрял ли на месте исполнитель задания из-за блокирующего препятствия?»,
    //«Что нужно и сколько это займёт времени, чтобы разблокировать задачу?»,
    //«Сколько всего потребуется времени на выполнение этой задачи?».
    //Команда концентрируется на максимально быстром выполнении задачи.


    //Lean

    //Lean — еще одна реализация гибкой методики Agile. Впервые метод был применён в промышленном производстве.
    //Lean настолько хорошо зарекомендовал себя, что его приняло сообщество разработчиков программного обеспечения (ПО).
    //В методе предусмотрено относительно малое количество строгих рекомендаций и правил,
    //поэтому он может поспособствовать повышению продуктивности, эффективности и постоянному усовершенствованию.
    //Lean нацелен на снижение затрат времени и издержек и на повышение качества работы.
    //Предусмотрено пять главных правил реализации метода.

    //1 - Определите ценности с точки зрения пользователей (заказчиков). Что поможет им выполнять свою работу лучше?
    //Во что они готовы вкладывать средства? Как мы можем удовлетворить их потребности?

    //2 - Визуально отобразите каждую ценность, шаг или процесс, вносящие вклад в создание завершённого продукта.
    //Это поможет увидеть, какой шаг или процесс не несёт пользы для конечного продукта.
    //Это позволяет команде обнаруживать и устранять потери времени и сил.

    //3 - Сформируйте непрерывный ход работ благодаря обучению сотрудников, чтобы они могли легко адаптироваться,
    //обладали широким профилем знаний и навыков и были способны выполнять различные обязанности.
    //Это позволит руководителям групп лучше распределять рабочую нагрузку.

    //4 - Создайте систему, позволяющую команде выполнять работу согласно принципу «точно в срок».
    //Разрабатывайте ПО только по необходимости, а не заранее.

    //5 - Для максимальной реализации потенциала метода Lean необходимо постоянное совершенствование.
    //В каждом цикле команда ищет способы для улучшения.


    //Scrum

    //Scrum — один из самых часто используемых методов гибкой разработки.
    //Он лучше других подходит для управления проектами, в которых продукт создаётся небольшими приращениями в ходе итераций.
    //Для управления проектом «владелец продукта» использует ежедневные короткие собрания (стендапы),
    //а для расстановки приоритетов — список незавершённых работ по продукту (бэклог продукта).
    //Разнопрофильная группа работает над частями продукта для реализации потенциально развёртываемого приращения —
    //обычно в течение 2–4-недельного спринта (периода, за который необходимо разработать очередное приращение).
    //В конце каждого спринта список незавершённых работ продукта пересматривается и назначаются новые приоритеты.
    //Метод Scrum популярен, так как ему просто следовать и он легко масштабируем.
    //Руководители с лёгкостью обнаруживают любые проблемы на ранних стадиях.
    //Метод стимулирует активное сотрудничество между членами команды.


    //Система Scrum
    //В этом учебнике акцент будет сделан на методе Scrum.
    //(Scrum — англ., толпа; давка, толкотня, драка, потасовка, схватка вокруг мяча в футболе, регби).
    //Давайте посмотрим поподробнее, что он собой представляет.

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/K7Oc7Y3iBbrFs3vj_jtXjyqpoWn-2BJoF.png

    //Роли, предусмотренные в методе Scrum

    //1 - Владелец продукта: создаёт пользовательские истории
    //(пожелания пользователей, описанные пользователями функции продукта).
    //Отлично знает проект в подробностях и отвечает за работоспособность продукта.
    //Управляет списком незавершённых работ (бэклогом).

    //2 - Скрам-мастер: (мастер процесса) следит, чтобы ход работ соответствовал правилам методологии Scrum.

    //3 - Команда: все члены команды, работающие над конкретным проектом или приращением: разработчики,
    //специалисты по обеспечению качества, аналитики предметной области.
    //Работа самоорганизующихся команд задаётся несколькими принципами гибкой методики.

    //Принцип 11: всё лучшее… исходит от самоорганизующихся команд.
    //Принцип 6: самый эффективный и продуктивный способ обмена информации — это личное общение.
    //Принцип 5: основа проектов — мотивированные участники, обеспечьте их необходимым и наделите свободой
    //и полномочиями для выполнения работы.
    //Принцип 4: технические и нетехнические участники проекта должны работать совместно на ежедневной основе.


    //Терминология, используемая в методе Scrum

    //1 - Спринт: период, за который необходимо выполнить работу по разработке и развёртыванию полезного фрагмента ПО.
    //Обычно это от 2 до 4 недель. Проводится обзор задач. Обсуждаются блокирующие препятствия.
    //Обсуждаются пользовательские истории и дефекты.
    //Здесь отражается принцип 3: частый выпуск работоспособного ПО.

    //2 - Бэклог спринта — список незавершённых работ спринта: список задач, которые необходимо выполнить в ходе спринта.
    //(Бэклог: от англ. backlog — портфель заказов, задолженность по выпуску продукции, нерешённые дела.)

    //3 - Бэклог продукта — список незавершённых работ продукта:
    //список подлежащих реализации функций и нефункциональных требований,
    //а также подлежащих устранению дефектов — всё, что требуется выполнить для получения работоспособного ПО.
    //Пример: новые функции, рефакторинг программного кода, обновление ПО.

    //4 - Пользовательские истории: это центральная часть гибкой методики.
    //Содержат небольшие простые функции и свойства, описанные пользователями.
    //Наиболее часто используемый формат:
    //«Как [вид пользователя] я хочу [какая-нибудь конкретная функция или свойство], чтобы достичь [некая польза]».
    //Пример: как специалист по обеспечению качества я хочу систему управления тестированием, чтобы достичь повышения качества.
    //Принцип 10: …делать только действительно необходимое…
    //Принцип 8: …должна быть возможность неограниченно долго сохранять постоянный темп.

    //5 - Задачи: прикрепляются к историям. Позволяют отслеживать проделанную работу.


    //SCRUM митинги

    //1 - Ежедневные короткие собрания: скрам-собрания (митинги),
    //собрания на ходу, летучки, также называемые «стэндап» (stand-up).
    //Stand-up в переводе с английского означает «выполняемый стоя».
    //Идея в том, что если собрания проводятся стоя, то собрания будут короче и эффективнее.
    //Члены команды описывают работу, проделанную вчера, и работу, которую предстоит сделать сегодня.
    //Также обсуждаются блокирующие препятствия.
    //Принцип 4: технические и нетехнические участники проекта должны работать совместно на ежедневной основе.

    //2 - Груминг ("причесывание", уточнение, grooming): Особая встреча команды, на которой обсуждаются,
    //уточняются и оцениваются пользовательские истории из бэклога продукта в конкретных точках, которые называются задачи.

    //3 - Задачи: прикрепляются к историям. Позволяют отслеживать проделанную работу.

    //4 - Ретроспективные собрания: проводятся в конце каждого спринта.
    //Члены команды обсуждают, что прошло хорошо и что нужно улучшить.
    //Принцип 12: на регулярной основе… изыскиваются пути повышения эффективности…
    //Принцип 9: постоянное внимание техническому совершенствованию и качественному проектированию повышает гибкость.
    //Принцип 2: изменения приветствуются.


    //Программное обеспечение для управления проектами

    //Большинство компаний используют программное обеспечение по управлению проектами, чтобы отслеживать,
    //какие работы необходимо выполнить, кто будет их выполнять и когда они будут выполнены.
    //Для этих целей можно использовать, например, Jira https://www.atlassian.com/software/jira,
    //которую можно скачать и бесплатно использовать не более чем для 10 пользователей.
    //На снимках экрана этой программы показаны роли и термины, используемые в мире гибкой разработки.

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/6acfl82jwwj71QGH_BJiyQmqSlxjjzVJb.jpg

    //Sprint — это спринты, которые были созданы SCRUM-мастером или менеджером и уже определены в проекте.

    //Story — истории, включенные в спринт.
    //На скриншоте выше задачи типа Story помечены зеленым значком.
    //В большинстве компаний существуют стандарты именования историй.
    //Наличие стандартов именования облегчает составление отчетов.
    //Обратите внимание на то, как начинаются названия историй.
    //Обратите внимание, в спринт включены только те истории, которые могут быть выполнены в течение спринта.
    //Иногда объем истории оказывается слишком большим и охватывает несколько спринтов, но SCRUM-команды стараются этого избегать.

    //Tasks - Задачи. На скриншоте задачи помечены голубыми значками.
    //Каждая задача представляет собой единицу работы, которую необходимо выполнить. Обычно они связаны с историей
    //(одна история - несколько задач, например, две для программиста, одна для тестировщика и одна для девопса).

    //Backlog. В папке Backlog находится беклог проекта - все известные на данный момент истории,
    //задачи и баги, не оцененные и не включенные в спринты.
    //Беклог должен постоянно обновляться: новые задачи добавляются, а ненужные - удаляются.

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/iI2AczP9QriCl3FZ_U3t9f5rowYQQQVXb.jpg


    //Пользовательские истории

    //Пользовательские истории — это основа основ гибкой разработки.
    //Поэтому давайте посвятим некоторое время обсуждению, КАК создавать истории.
    //Согласно гибкой методике, в пользовательской истории должно содержаться подробное неформальное описание функции,
    //необходимой конечным пользователям. В ней определяется, каким образом фрагмент ПО может принести пользу конечному пользователю.
    //Истории пишутся нетехническим языком, так как в центре внимания здесь находятся потребности пользователя.
    //Истории помогают командам понять, для чего необходимо выполнить ту или иную часть работы и
    //что должно быть сделано для соответствующего конечного пользователя.
    //Истории могут быть простыми и без дополнительной информации.
    //Для сложных историй могут быть предусмотрены прикреплённые материалы и
    //множество ссылок на другие документы, необходимые для дополнения истории.

    //Многие люди используют для историй специальную схему:
    //Как [пользовательская роль] я [хочу сделать что-то], чтобы у меня [была возможность достичь чего-то].

    //Пример: как наставник я хочу предоставлять учащимся образовательные материалы высокого качества,
    //чтобы у меня была возможность научить их быть успешными специалистами по обеспечению качества.

    //«Пользовательская роль» — это заказчик или конечный пользователь (наставник, учащийся, бухгалтер, клиент).
    //Эта часть связана с принципом 1: наш главный приоритет — удовлетворение потребностей пользователей…

    //«Хочу сделать что-то» — здесь описывается, что пользователь хочет совершить.
    //Писать необходимо обязательно с точки зрения пользователя, а не технического специалиста.

    //«Была возможность достичь чего-то» — здесь описывается получаемая польза от совершения желаемого.
    //Эта часть связана с проблемой, которую хочет решить пользователь.

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/C-6z6pi6IWvCoieB_3sDQXgk_0-ecFMrx.png
    //Экран с одной из историй.

    //У историй есть свой собственный цикл, как и у тест-кейсов и дефектов.
    //Историю создают, воплощают и закрывают. Это основные статусы, но есть и другие.

    //Если история «закрыта» (Closed), это означает, что она выполнена (Done).
    //И нет необходимости в какой-либо дополнительной работе для успешной реализации истории.
    //У некоторых историй может быть две задачи, как у показанной выше,
    //а у некоторых — 50 задач на несколько недель (но так лучше не делать).
    //Необходимо выполнить две задачи, чтобы история считалась реализованной (статус Done)
    //Отчёт о потраченном на задачу времени критически важен, так как он позволяет определить,
    //сколько времени потребовалось на выполнение работы.
    //Эта информация используется в дальнейших проектах, чтобы оценить необходимое для разработки время.


    //Ретроспектива

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/a5_FwnGfTOwgEOrr_moA9HxeeMXXIZB3K.jpg
    //Ретроспектива проводится в конце каждого спринта и отдельная - при завершении проекта.
    //Обычное время проведения ретроспективы - начало следующего спринта
    //(обсуждать прошедший спринт, когда нужно срочно заканчивать все задачи, не очень целесообразно).
    //Во время ретроспективы каждый член команды (включая джунов!) должен вслух рассказать команде,
    //что, по его мнению, в течение спринта, было хорошо, что мешало работать,
    //что можно сделать по-другому, что предпринять, чтобы проблемы в будущем не повторялись.
    //Основное правило - не переходить на личности.

    //Правильно:
    //"К сожалению, команда тестирования получила от команды разработки
    //неработоспособную версию, что замедлило процесс тестирования.
    //Давайте вместе подумаем, как сделать, чтобы такого не повторялось."

    //Продолжительность ретроспективы - от часа до двух.
    //Присутствие всех членов команды обязательно! Все идеи и мнения записываются
    //(один из возможных вариантов записи - выше на скриншоте) и анализируются.

    //Если на предыдущей ретроспективе были выявлены проблемы и намечены пути решения,
    //то к данным проблемам обязательно нужно вернуться на ретроспективе следующего спринта и проверить,
    //существуют ли они все еще и оказались намеченные пути решения действенными.


    //Результаты урока

    //1
    //Гибкая методика — это новый, более эффективный и быстрый способ разработки ПО.

    //2
    //Существует множество путей реализации гибкой методики.

    //3
    //Scrum — один из самых используемых методов воплощения гибкой разработки.
}
