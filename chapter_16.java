public class chapter_16 {
    //#16.1 HTTP, REST, API — инструменты и тестирование: Теория

    //План урока
    //Инструменты для тестирования
    //Тестирование REST API


    //Введение
    //При тестировании бэкенда веб-приложений инженерам обычно требуется следующее:

    //1
    //Подготовить и отправить допустимые и недопустимые запросы исследуемому серверу (подобно запросам к базе данных).

    //2
    //Проверить корректность ответов сервера.

    //Но главный вопрос не в том, что делать, а в том, как делать.
    //Какие инструменты могут помочь в отправке и приёме данных?
    //Что означает «отправлен недопустимый запрос»?
    //Какими способами можно проверить корректность запроса?
    //Для выполнения работы инженерам по тестированию необходимо знать ответы на эти вопросы.
    //В ходе сегодняшнего урока мы проведём обзор инструментов тестирования программных интерфейсов приложений API.
    //Также будут затронуты подходы к тестированию.


    //Инструменты для тестирования

    //cURL

    //В разделе 12.1 учебника уже рассматривалась утилита curl применительно к пакетам TCP.
    //Здесь же она будет применяться для работы с HTTP-запросами.

    //cURL имеет множество опций, ниже приведены наиболее полезные из них:

    //-X / --request — указывает применяемый метод HTTP.

    //-d / --data — задаёт содержимое тела запроса.

    //-H — определяет заголовки запроса.

    //-u — позволяет передать имя пользователя и пароль, если серверу требуется проверка подлинности.

    //-k — предписывает программе cURL игнорировать проблемы, связанные с сертификатом безопасности (применение этой опции небезопасно!).

    //-v — переключение в режим подробного вывода (чтобы получить больше сведений).

    //Пример:

    //curl -X 'GET'   'https://catfact.ninja/fact'   -H 'accept: application/json' -k

    //Отправляет запрос HTTP GET по URL-адресу с заголовком Accept (принимаемые типы содержимого),
    //установленным в значение «application/json».
    //Также cURL будет игнорировать проблемы, связанные с сертификатом безопасности,
    //и выводить не только тело ответов, но и подробные сведения.

    //Теперь давайте применим API зоомагазина, чтобы создать запись о животном в магазине:

    //curl -X 'POST' \
    //  'https://petstore.swagger.io/v2/pet' \
    //  -H 'accept: application/json' \
    //  -H 'Content-Type: application/json' \
    //  -d '{
    //  "name": "Petty",
    //  "status": "available"
    //}'
    //В запросе присутствуют два заголовка, определяющие, что тело запроса — это текст
    //в формате JSON и что тело ответа также должно быть в этом формате.
    //Тело запроса содержит имя и статус животного.

    //В теле ответа можно ожидать примерно такие данные:

    //{
    //  "id": 9223372036854722000,
    //  "name": "Petty",
    //  "photoUrls": [],
    //  "tags": [],
    //  "status": "available"
    //}

    //Если идентификатор животного 9223372036854722000, то запросить сведения о животном можно следующим образом:

    //curl -X 'GET' \
    //  'https://petstore.swagger.io/v2/pet/9223372036854722000' \
    //  -H 'accept: application/json'

    //Как насчёт удаления записи о животном из магазина?

    //curl -X 'DELETE' \
    //  'https://petstore.swagger.io/v2/pet/9223372036854721130' \
    //  -H 'accept: application/json' \
    //  -H 'api_key: special_key'

    //Обратите внимание на заголовок api_key (ключ API).
    //API зоомагазина для получения прав доступа требует от клиента использовать специальный ключ.
    //Попробуйте отправить запрос DELETE без этого заголовка и сравните ответы.


    //Swagger

    //Страница на платформе Swagger представляет собой следующее:

    //Документация с текущей актуальной информацией об API
    //(описывает вызовы API и данные, которые могут быть отправлены и получены).

    //Инструмент для выполнения запросов API

    //Вот одна из таких страниц, посвящённая приложению Catfacts:
    //https://catfact.ninja

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/ZvSkQlBjpMGZXhhj_Cjh_MSppn8DxR-xm.jpg
    //Swagger CatFacts

    //Нажмите Get Random Fact (получить факт, выбранный случайным образом), чтобы развернуть описание:
    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/YOIOUF_L4S0jyU-z_Em5b1Ap9zH0wb4CU.jpg
    //Выполнение API Get Random Fact

    //Нажмите кнопку Try it out (попробовать).
    //Теперь можно изменять данные запроса и отправлять их нажатием кнопки Execute (выполнить):
    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/NrfAUD2KrhMjPV3n_R3sqHhRBXc1Fp5uD.png
    //Выполнение API Get Random Fact

    //Нажмите кнопку и изучите ответ.

    //Сравните с отправкой аналогичного запроса с помощью cURL.

    //Теперь откройте страницу Petstore’s Swagger page.
    //https://petstore.swagger.io

    //Сначала давайте добавим запись о животном:
    //https://petstore.swagger.io/#/pet/addPet

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/zZfoZnvI5Z6PNzzh_8v86oeP4nPQAlUJS.jpg

    //Затем прочтём её, используя идентификатор,
    //значение которого должно содержаться в ответе на запрос POST, приведённый выше:
    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/Dhk74MyIXP4jEm-F_g6jOY3lqON9PyE0_.jpg

    //Наконец, удалим эту запись о животном:
    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/X4uIPMdeU0bWA0iF_Pu9h9BnGBw0FeE1_.jpg


    //Подключаемые модули веб-браузеров

    //Есть особый вид программного обеспечения, называемый подключаемыми модулями веб-браузеров.

    //Они могут значительно помочь тестировщикам в генерации тестовых данных и тестировании заполнения веб-форм.
    //Также подключаемые модули могут помочь при тестировании программного интерфейса API.
    //Существует множество таких модулей, предназначенных для тестирования REST API.

    //Вот два примера:

    //Boomerang https://chromewebstore.google.com/detail/boomerang-soap-rest-clien/eipdnjedkpcnlmmdfdkgfpljanehloah?pli=1 (Chrome)
    //RESTED https://addons.mozilla.org/ru/firefox/addon/rested/ (Firefox)
    //Они похожи с точки зрения функциональности, давайте продолжим с плагином "Boomerang":

    //Этот подключаемый модуль позволяет тестировщику применять разные методы HTTP, указывать URL назначения,
    //определять заголовки запросов, содержимое тела и т. д.
    //Также есть возможность импортировать запросы из файла и сохранять запросы для дальнейшего использования:
    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/XwC2UZ8rNIBffP9z_dBDdAo6hKqFpJpUB.jpg

    //Выполните те же действия, что и в предыдущем разделе: добавьте в зоомагазине запись о животном:
    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/PcRMGL7BFMHecjc7_HzkcTLS-Bv-I6t1v.jpg

    //Далее попробуйте прочитать данные о животном:
    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/WJW-tT596VaYxqfS_M5y1eePIfOfpWKA2.png

    //Заключительный шаг выполните самостоятельно: отправьте запрос на удаление записи о животном.


    //Postman

    //Postman — это очень популярный программный продукт,
    //весьма полезный для разработки и тестирования программных интерфейсов API.

    //В этом приложении предусмотрено множество функций, однако в первую очередь инженеру
    //по тестированию следует обратить внимание на отправку запросов, их сохранение для дальнейшего использования,
    //создание коллекций запросов, сохранение ответов, а также импорт и экспорт запросов и коллекций.

    //Интерфейс пользователя схож с Boomerang: выбор метода HTTP, средства настройки заголовка и тела запроса и т. д.:

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/LxPC99bjWFmz5uTT_6IYsyLZjn7pG23Cz.jpg
    //В то же время набор функций Postman шире по сравнению с подключаемыми модулями веб-браузеров.

    //А пока давайте добавим новый запрос и отправим его.
    //Можно нажать кнопку "New" (новый), выбрать HTTP Request (запрос HTTP) и вручную указать все параметры

    //Также можно нажат кнопку [Import] (импорт), переключиться на вкладку Raw text (необработанный текст),
    //затем вставить строку, которую мы использовали для программы cURL:
    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/f2VkZTdmYjG6npgM_zJuxuVC_Hto1cp9k.png

    //Не забудьте импортировать эту команду как запрос:
    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/yPmfQfFYMBo11CmV_0UoztM7YvxO_kRu-.png

    //Теперь будет возможность отправлять этот новый запрос.


    //Потренируйтесь в использовании Postman, пройдя те же шаги, что и для зоомагазина
    //(добавить запись о животном, прочитать сведения о животном, удалит запись).

    //Сравните работу посредством программы Postman и работу посредством других инструментов
    //(cURL, Swagger и подключаемый модуль).


    //Итог:

    //Инженеры по тестированию используют специальные инструменты для отправки HTTP-запросов.
    //Существуют различные типы таких инструментов: приложения командной строки, веб-приложения,
    //подключаемые модули для браузеров, настольные приложения для ПК.

    //Выбор инструмента зависит от конкретной задачи и набора поддерживаемых функций, а также от личных предпочтений.


    //Тестирование REST API

    //Что следует проверить

    //API с архитектурой, поддерживающей правила REST — это программное обеспечение,
    //поэтому к нему применимы все стандартные методики тестирования
    //(которые мы обсудим в ходе уроков, посвящённых проектированию тестов).

    //Тем не менее существует несколько особенностей, которые необходимо иметь в виду:

    //1
    //Поддерживает ли тестируемый программный интерфейс API все методы HTTP?

    //2
    //Варианты ответов: похожие ответы могут быть получены при различных запросах
    //(например, сведения о пользователе, полученные по идентификатору,
    //имени и фамилии, номеру паспорта и номеру страхового договора).

    //3
    //Структура запросов и ответов: какая структура корректная, какая некорректная, какие запросы и ответы вообще возможны.

    //4
    //Коды ответов: какие коды, приходящие в ответах, может получать клиент.

    //5
    //Обязательные и необязательные параметры URL-адреса и поля тела запроса (перечень конкретных параметров и полей).
    //И что должно прийти в ответ на запрос без обязательных данных.

    //6
    //Какие поддерживаются типы данных: символьные строки, числа, даты
    //(значения дата-время обычно не являются источником проблем).

    //7
    //Пределы и ограничения: например, ограничение по длине имени пользователя в 121 знак.
    //Что, если в теле запроса будет имя из 122 знаков?


    //Давайте рассмотрим эти 7 пунктов на примере страницы зоомагазина https://petstore.swagger.io/.


    //Поддерживает ли тестируемый программный интерфейс API все методы HTTP?

    //Здесь используются следующие методы HTTP:

    //POST: используется для создания изображения для питомца с заданным идентификатором, создания нового питомца,
    //обновления питомца с заданным идентификатором, создания нового магазина, создания нового пользователя и т. д.

    //GET: используется для получения информации о питомце, информации о магазине, информации о пользователе и т. д.

    //PUT: используется для обновления пользователя только с заданным идентификатором.

    //DELETE: используется для удаления питомца, магазина и пользователя.


    //Варианты ответов

    //Примером вариации ответа является набор операций с питомцем.

    //GET /pet/findByStatus:
    //https://petstore.swagger.io/v2/pet/findByStatus?status=sold

    //Ответ со списком соответствующих животных (в этом случае со статусом sold, т. е. проданных):
    //[
    //  {
    //    "id": 999,
    //    "category": {
    //      "id": 999,
    //      "name": "fufa"
    //    },
    //    "name": "cat",
    //    "photoUrls": [
    //      "string"
    //    ],
    //    "tags": [
    //      {
    //        "id": 999,
    //        "name": "string"
    //      }
    //    ],
    //    "status": "sold"
    //  },
    //  {
    //    "id": 13,
    //    "category": {
    //      "id": 0,
    //      "name": "cats"
    //    },
    //    "photoUrls": [
    //      "string"
    //    ],
    //    "tags": [
    //      {
    //        "id": 0,
    //        "name": "string"
    //      }
    //    ],
    //    "status": "sold"
    //  },
    //  {
    //    "id": 12084391,
    //    "category": {
    //      "id": -48583,
    //      "name": "cupidatat amet commodo"
    //    },
    //    "name": "doggie",
    //    "photoUrls": [
    //      "fugiat Ut eu",
    //      "exercitation nostr"
    //    ],
    //    "tags": [
    //      {
    //        "id": -27183415,
    //        "name": "e"
    //      },
    //      {
    //        "id": 86979382,
    //        "name": "in anim consectetur Lorem ut"
    //      }
    //    ],
    //    "status": "sold"
    //  },
    //  {
    //    "id": 1659526852,
    //    "category": {
    //      "id": 0,
    //      "name": "dog"
    //    },
    //    "name": "bobby",
    //    "photoUrls": [
    //      "string"
    //    ],
    //    "tags": [
    //      {
    //        "id": 0,
    //        "name": "terrier"
    //      },
    //      {
    //        "id": 1,
    //        "name": "brown"
    //      }
    //    ],
    //    "status": "sold"
    //  },
    //  {
    //    "id": 123124,
    //    "name": "Johnny B Good",
    //    "photoUrls": [],
    //    "status": "sold"
    //  }
    //]


    //Для запроса GET /pet/{petId} (получить сведения о животном с определённым идентификатором)
    //требуется идентификатор в качестве параметра.

    //Попробуем идентификатор ID = 1:

    //https://petstore.swagger.io/v2/pet/1

    //…и давайте посмотрим на ответ (это похожий список животных, как и в предыдущем ответе, но с одним элементом):

    //{
    //  "id": 1,
    //  "category": {
    //    "id": 1,
    //    "name": "string"
    //  },
    //  "name": "doggie",
    //  "photoUrls": [
    //    "string"
    //  ],
    //  "tags": [
    //    {
    //      "id": 1,
    //      "name": "string"
    //    }
    //  ],
    //  "status": "available"
    //}


    //Структура запросов и ответов

    //Самым простым способом показать, как тестировать структуру запросов и ответов, является пример запроса GET /pet/{petId}.

    //Что если проверить питомца с действительным Id (как мы делали с Id питомца = 1)?

    //Что если проверить питомца с несуществующим Id? Попробуйте проверить питомца с Id = 234343.

    //Что если не указывать идентификатор? Попробуйте GET /pet - без Id.

    //Что если Id будет выглядеть не как число?

    //Возможно ли, чтобы Id был равен 0?

    //Как изменяется структура ответа?


    //Коды ответов

    //Теперь повторите предыдущие эксперименты, обращая внимание на коды ответов.

    //Что если проверить питомца с действительным Id.
    //
    //response code 200

    //Что если проверить питомца с несуществующим Id?
    //Попробуйте проверить питомца с Id = 234343.
    //
    //response code 404 (Pet not found)

    //Что если не указывать идентификатор?
    //Попробуйте GET /pet - без Id.
    //
    //it is impossible to get a response code, the request is not valid

    //Что если Id будет выглядеть не как число?
    //
    //it is impossible to get a response code, the request is not valid

    //Возможно ли, чтобы Id был равен 0?
    //
    //response code 404 (Pet not found)

    //Возможно, вы сможете получить некоторые другие коды ответов HTTP.


    //Обязательные и необязательные параметры URL-адреса или поля тела запроса

    // Для запроса GET /pet/{petId} параметр идентификатора ID в URL-адресе обязателен.

    //Необязательные параметры лучше проиллюстрировать с помощью запроса POST.

    //POST /pet requires the following body:
    //{
    //  "id": 0,
    //  "category": {
    //    "id": 0,
    //    "name": "string"
    //  },
    //  "name": "doggie",
    //  "photoUrls": [
    //    "string"
    //  ],
    //  "tags": [
    //    {
    //      "id": 0,
    //      "name": "string"
    //    }
    //  ],
    //  "status": "available"
    //}

    //Параметры в теле запроса следующие:
    //Id
    //category (id, name)
    //name
    // photoUrls
    //tags (id, name)
    //status

    //Чтобы понять, какие параметры являются обязательными, попробуйте удалить некоторые из них из тела, например:


    //Какие поддерживаются типы данных

    //Обладание информацией о типах данных даёт пространство для исследования.

    //Очевидно, что для рассмотренного выше запроса POST /pet предусмотрены следующие типы данных в параметрах тела:

    //Id - числовой
    //category (id - числовой, name - строка)
    //name - строка
    //photoUrls - строка в особом формате
    //tags (id - числовой, name - строка)
    //status - список строк, заданных заранее

    //Попробуйте найти максимальные и минимальные значения и длину,
    //попробуйте изменить тип с ожидаемого на другой
    //(например, передайте символьную строку вместо числа и т. д.).

    //Пределы и ограничения

    //После описанного выше исследования конкретных значений, можно обратить внимание на ответы и требуемые данные.

    //POST /pet/{petId}/uploadImage
    //Какой формат изображения ожидается? Какой максимальный размер изображения?

    //GET /pet/findByStatus
    //Что если у нас будет 1000 питомцев с таким статусом? Возможно ли будет показать их всех?

    //POST /user/createWithArray
    //Что означает ограничение на размер входного массива?


    //Результаты урока

    //1 - Для тестирования бэкендов инженеры по тестированию используют различные инструменты.
    //Главной функцией этих инструментов является способность отправлять запросы и принимать ответы по протоколу HTTP.

    //2 - Некоторые инструменты позволяют сохранять и импортировать коллекции запросов,
    //корректировать формат тела запроса и даже в некоторой степени автоматизировать тестирование.

    //3 - Кроме того, поскольку интерфейсы API являются программным обеспечением,
    //к ним применимы все соответствующие методики тестирования при учёте специфических нюансов,
    //таких как перечень поддерживаемых методов HTTP и структура запросов и ответов.

}
