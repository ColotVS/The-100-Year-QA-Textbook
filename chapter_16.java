public class chapter_16 {
    //#16.1 HTTP, REST, API — инструменты и тестирование: Теория

    //План урока
    //Инструменты для тестирования
    //Тестирование REST API


    //Введение
    //При тестировании бэкенда веб-приложений инженерам обычно требуется следующее:

    //1
    //Подготовить и отправить допустимые и недопустимые запросы исследуемому серверу (подобно запросам к базе данных).

    //2
    //Проверить корректность ответов сервера.

    //Но главный вопрос не в том, что делать, а в том, как делать.
    //Какие инструменты могут помочь в отправке и приёме данных?
    //Что означает «отправлен недопустимый запрос»?
    //Какими способами можно проверить корректность запроса?
    //Для выполнения работы инженерам по тестированию необходимо знать ответы на эти вопросы.
    //В ходе сегодняшнего урока мы проведём обзор инструментов тестирования программных интерфейсов приложений API.
    //Также будут затронуты подходы к тестированию.


    //Инструменты для тестирования

    //cURL

    //В разделе 12.1 учебника уже рассматривалась утилита curl применительно к пакетам TCP.
    //Здесь же она будет применяться для работы с HTTP-запросами.

    //cURL имеет множество опций, ниже приведены наиболее полезные из них:

    //-X / --request — указывает применяемый метод HTTP.

    //-d / --data — задаёт содержимое тела запроса.

    //-H — определяет заголовки запроса.

    //-u — позволяет передать имя пользователя и пароль, если серверу требуется проверка подлинности.

    //-k — предписывает программе cURL игнорировать проблемы, связанные с сертификатом безопасности (применение этой опции небезопасно!).

    //-v — переключение в режим подробного вывода (чтобы получить больше сведений).

    //Пример:

    //curl -X 'GET'   'https://catfact.ninja/fact'   -H 'accept: application/json' -k

    //Отправляет запрос HTTP GET по URL-адресу с заголовком Accept (принимаемые типы содержимого),
    //установленным в значение «application/json».
    //Также cURL будет игнорировать проблемы, связанные с сертификатом безопасности,
    //и выводить не только тело ответов, но и подробные сведения.

    //Теперь давайте применим API зоомагазина, чтобы создать запись о животном в магазине:

    //curl -X 'POST' \
    //  'https://petstore.swagger.io/v2/pet' \
    //  -H 'accept: application/json' \
    //  -H 'Content-Type: application/json' \
    //  -d '{
    //  "name": "Petty",
    //  "status": "available"
    //}'
    //В запросе присутствуют два заголовка, определяющие, что тело запроса — это текст
    //в формате JSON и что тело ответа также должно быть в этом формате.
    //Тело запроса содержит имя и статус животного.

    //В теле ответа можно ожидать примерно такие данные:

    //{
    //  "id": 9223372036854722000,
    //  "name": "Petty",
    //  "photoUrls": [],
    //  "tags": [],
    //  "status": "available"
    //}

    //Если идентификатор животного 9223372036854722000, то запросить сведения о животном можно следующим образом:

    //curl -X 'GET' \
    //  'https://petstore.swagger.io/v2/pet/9223372036854722000' \
    //  -H 'accept: application/json'

    //Как насчёт удаления записи о животном из магазина?

    //curl -X 'DELETE' \
    //  'https://petstore.swagger.io/v2/pet/9223372036854721130' \
    //  -H 'accept: application/json' \
    //  -H 'api_key: special_key'

    //Обратите внимание на заголовок api_key (ключ API).
    //API зоомагазина для получения прав доступа требует от клиента использовать специальный ключ.
    //Попробуйте отправить запрос DELETE без этого заголовка и сравните ответы.
}
