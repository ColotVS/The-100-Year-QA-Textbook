public class chapter_33 {
    //#33.1 Техники тест дизайна: Черный, серый, белый ящик: Теория

    //План урока
    //Подходы к тестированию
    //Ящики и пирамида
    //Подходы к регрессионному тестированию


    //Подходы к тестированию

    //Пирамида тестирования

    //В предыдущей главе мы рассмотрели пирамиду тестирования и различные уровни тестирования.
    //Легко догадаться, что некоторые уровни интегрированы в работу разработчиков и требуют знания кода,
    //а другие выглядят как действия пользователей и не связаны с кодом программы.

    //Необходимо отметить, что второй тип не подразумевает отсутствие знаний кода.
    //Специалисты, которые работают на системном или приемочном уровне тестирования,
    //могут разбираться в коде и при необходимости писать модульные или интеграционные тесты.

    //Поэтому, говоря о белых или черных ящиках, мы говорим о подходах, которые можно менять в зависимости от ситуации.

    //Подход "белого ящика" —  это способ тестирования, когда QA знает структуру кода и использует это знание.

    //Подход "черного ящика" —  это способ тестирования, когда QA может знать структуру кода, но не использует эти знания


    //Подход "белого ящика"

    //В качестве примера применения метода "белого ящика" рассмотрим очень простой фрагмент кода.

    //public void compareTwoNumbers (int a, int b) {
    //   if (a > b)
    //        System.out.println "A greater than B"
    //   else
    //        System.out.println "A less than B"
    //}

    //Наша задача —  покрыть этот метод тестами, принимая во внимание код.
    //Сейчас наша задача не оценивать качество кода или находить в нем пробелы,
    //а просто покрыть его как есть, используя, например, один из методов покрытия кода:

    //Покрытие операторов (statement coverage):
    //каждый оператор кода (строка, которая что-то делает) должен быть выполнен хотя бы один раз.

    //Покрытие ветвей (branch coverage):
    //каждая ветвь (условие) кода должна быть выполнена хотя бы один раз.

    //Покрытие условий (condition coverage):
    //каждый результат условия должен быть протестирован хотя бы один раз.

    //Рассмотрим покрытие операторов.

    //Первый случай. A > B

    //Выполняется два оператора:

    //   if (a > b)
    //        System.out.println "A greater than B"

    //Второй случай. A < B

    //Выполняются три оператора:
    //   if (a > b)
    //...
    //else
    //        System.out.println "A less than B"

    //Оба случая полностью охватывают все операторы. Тестирование "белого ящика" завершено.
    //Такое же тестирование охватывает все ветви и условия (здесь у нас только 2 ветви).
    //Таким образом, для тестирования "белого ящика" достаточно 2 случаев.

    //Поскольку подход "белого ящика" ориентирован на код как он есть,
    //можно сказать, что "белый ящик" — это точка зрения разработчика.


    //Подход "черного ящика"

    //Теперь рассмотрим ту же функциональность, но с точки зрения пользователя.
    //Предположим, у нас есть пользовательский интерфейс с двумя полями для ввода A и B,
    //кнопкой "Сравнить"(Compare) и сообщением о результате (Result).

    //С точки зрения программиста, двух тестов достаточно.
    //Но с точки зрения пользователя, должен быть третий, A = B,
    //и дополнительные нефункциональные тесты, например, UI и юзабилити, надежность, или даже безопасность,
    //если работа ограничена какими-то определенными ролями.


    //Взаимное дополнение черного и белого ящика

    //Значит ли это, что подходом "белого ящика" можно пренебречь? Конечно, нет.
    //В случае сложной бизнес-логики, когда сложен и сам код,
    //имеет смысл начать с подхода белого ящика, чтобы убедиться, что, во-первых,
    //вы понимаете структуру функциональности, а во-вторых, каждая ветвь, условие и утверждение покрыты тест-кейсами.
    //После этого можно использовать точку зрения пользователей и подход "черного ящика".

    //Итог:
    //Подходы "Белого" и "Черного" ящика должны дополнять друг друга. Не существует хороших или плохих подходов.
    //Точки зрения программиста и пользователя должны использоваться в зависимости от ситуации.


    //Ящики и пирамида

    //Теперь давайте вернемся к пирамиде тестирования и рассмотрим подходы "черного" и "белого ящика" в связи с этой абстракцией.

    //Юнит-тестирование против системного/приемочного
    //Легко заметить, что чем ниже уровень, тем "светлее" ящик.
    //Юнит-тестирование предполагает подход "абсолютно белого ящика".

    //public void compareTwoNumbers (int a, int b) {
    //   if (a > b)
    //        System.out.println "A greater than B"
    //   else
    //        System.out.println "A less than B"
    //}

    //Код, приведенный выше, будет покрыт двумя юнит-тестами: для A > B и для B > A,
    //и тестирование этой функции методом "белого ящика" будет завершено.
    //Но что касается системного и приемочного тестирования, то здесь на первый план должен выйти подход "черного ящика".
}
