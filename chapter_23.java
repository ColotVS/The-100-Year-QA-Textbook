public class chapter_23 {
    //#23.1 UML: Теория

    //План урока
    //Что это такое UML?
    //Типы диаграмм UML
    //Диаграммы UML, наиболее используемые специалистами по обеспечению качества


    //Что такое UML?

    //Анализ требований как задача процесса обеспечения качества

    //Если бизнес-требования, пользовательские и технические требования доступны,
    //то после завершения исследовательского тестирования новых функций
    //специалист по обеспечению качества должен выполнить анализ и изучение требований.
    //Это означает: чтение документации, разбор текстов и схем, консультации с заинтересованными лицами,
    //которые отвечают за соответствие разрабатываемой системы потребностям пользователей,
    //а также представление всей полученной информации в виде структурированных спецификаций.
    //Текстовые спецификации довольно распространены, но чаще всего используется схематическое описание функций.
    //Так как с помощью схемы легче составить ясное и понятное описание.

    //Но здесь кроется одна проблема.
    //Каждый аналитик может создавать схемы по своим правилам.
    //Они могут быть удобными и ясными для автора, но для других людей потребуются дополнительные разъяснения.
    //Специалисты по обеспечению качества, которые и работают с требованиями больше остальных,
    //могут оказаться сбиты с толку неизвестными условными изображениями, символами и фигурами.
    //Новый, недавно пришедший в команду аналитик предметной области может неправильно интерпретировать
    //схемы и получить некорректное представление о проекте.

    //Но что, если у нас был бы «язык» создания схем, общий для всех?

    //UML

    //Такой язык существует.
    //UML означает Unified Modeling Language (унифицированный язык моделирования).
    //Этот язык представляет собой систему стандартизованных условных обозначений для построения схем.
    //Используя UML, можно спроектировать любой уровень приложения, определить объекты и их поведение,
    //а также любые взаимоотношения между объектами.
    //В схему можно включить объекты предметной области, действия пользователей,
    //объекты программного кода и любые объекты реального мира.
    //UML — это язык объектно-ориентированного моделирования и проектирования.


    //Типы диаграмм UML

    //Схемы UML делятся на две большие группы:

    //Структурные диаграммы.
    //Отображают объекты (обычно низкоуровневые, такие как классы программного кода или пакеты) и связи между ними.
    //Структурные диаграммы показывают статическое состояние объектов.

    //Диаграммы поведения. Отображают поведение объектов, преобразование или передачу данных,
    //взаимодействия или последовательности событий.
    //Диаграммы поведения показывают динамическое состояние объектов.

    //На рисунке ниже приведены типы диаграмм UML.
    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/HKlf2Vx8hFs-2Hr-_OclJA7tCUIoAFW9B.png

    //Итог:
    //UML — унифицированный язык моделирования, задающий стандарт условных обозначений для моделирования состояний и поведения объектов.


    //Диаграммы UML чаще всего используемые специалистами обеспечения качества

    //Структурные диаграммы
    //Структурные диаграммы служат для низкоуровневого моделирования приложений и обычно применяются для модульного тестирования.
    //При ручном тестировании они нужны только для изучения низкоуровневых объектов приложения и взаимосвязей между ними.
    //Суть этих диаграмм показана далее на примере.

    //Диаграмма классов
    //Показанная ниже диаграмма классов демонстрирует классы приложения покупки билетов на самолёт.
    //У самообучающихся студентов нет доступа к коду этого приложения, но они могут изучить его требования.
    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/ScqWA5u7yArYLe5f_mL1Jyd3pfuhh9dSK.jpg

    //Диаграммы классов очень похожи на ER-диаграммы. Они показывают объекты, их типы и взаимоотношения.
    //Если вы внимательно изучили главу о базах данных, то с пониманием принципов структурных диаграмм трудностей не возникнет.

    // - Таблицы ER-диаграмм соответствуют объектам диаграмм классов.
    // - Поля ER-диаграмм соответствуют свойствам объектов диаграмм классов.
    // - Связи в ER-диаграммах совпадают по смыслу со связями (отношениями)
    //в диаграммах классов (здесь 0…* означает «от 0 до нескольких», 1 означает «один»).

    //Порой вместо обращения к структуре конкретной базы данных удобнее использовать диаграмму классов,
    //так как она отражает более высокоуровневые объекты реального мира, реализованные в программном обеспечении (ПО).

    //Другие структурные диаграммы используются специалистами по обеспечению качества сравнительно редко.


    //Тестирование на основе диаграммы классов

    //Давайте посмотрим на объект Aircraft (самолёт) из приведённой выше диаграммы классов.

    //У объекта несколько свойств:

    //aircraftID (идентификатор самолёта): целое число типа long (от -9 223 372 036 854 775 808 до 9 223 372 036 854 775 807).
    //manufacturer (производитель): символьная строка типа String (содержит некоторое количество символов).
    //model (модель): символьная строка типа String.
    //numberOfSeats (количество посадочных мест): целое число типа int (от -2 147 483 648 до 2 147 483 647).



}
