public class chapter_20 {
    //#20.1 Принципы локализации дефектов: Теория

    //План урока
    //Основы поиска неисправностей в серверных приложениях
    //Алгоритм локализации дефектов
    //Поиск неисправностей на практике


    //Основы поиска неисправностей в серверных приложениях

    //Введение

    //Как было сказано в предыдущем модуле, навыки эффективной локализации дефектов очень полезны для тестировщиков.
    //Итак, что же такое локализация? Нам необходимо ясно определить этот и другие важные термины:

    //Первопричина (Root cause): точная причина, которая привела к возникновению ошибки.
    //Точное определение первопричины — непростая задача, поскольку она может считаться выполненной,
    //только когда дефект полностью исправлен. Если дефект больше не проявляется, значит, первопричина определена верно.
    //Поэтому в большинстве случаев у тестировщика нет возможности найти первопричину, и вместо этого выполняется локализация дефекта.

    //Локализация (Localization): процесс поиска возможной первопричины.
    //Верно выполненная локализация кардинально сокращает время, затрачиваемое на устранение дефекта, поскольку:
    //а) устранение дефекта поручается именно той команде разработчиков, которая и должна заниматься этим типом дефектов;
    //б) команда получает нужную информацию и поэтому знает, что нужно сделать.
    //Поэтому локализацию необходимо проводить при каждом обнаружении дефекта, иначе дефекты,
    //проявляющиеся в интерфейсе пользователя, всегда будут назначаться команде разработчиков этого интерфейса,
    //даже если причина находится в некорректной реализации бэкенда, а это, в свою очередь,
    //приводит к дополнительной нагрузке на разработчиков,
    //возможному «отфутболиванию» дефектов и, как результат, напряжённым отношениям между командами.

    //Поиск неисправностей  (Troubleshooting): конкретные методики локализации дефектов.


    //Важность верного подхода к локализации дефектов

    //В предыдущем модуле было упомянуто несколько возможных проблем в серверных приложениях.
    //Достаточно ли этих знаний для успешной локализации дефектов? На самом деле, нет.

    //Более того, даже если у вас огромный технический опыт и вы знаете множество системных инструментов,
    //это ещё не значит, что вы сможете надлежащим образом локализовать дефект.

    //Чем больше инструментов вам известно, тем выше вероятность их хаотического применения без глубокого понимания,
    //что и почему вы делаете. Многие системные администраторы и DevOps-инженеры (включая тех, кто обладает большим опытом)
    //на вопрос «Вы видите проблему с…, как вы будете её локализовать?» реагируют следующим образом:

    //Беспорядочно перечисляют все известные им системные инструменты и методики, надеясь,
    //что хотя бы некоторые из них окажутся подходящими средствами для выявления возможной первопричины.

    //И (или) вспоминают свой предыдущий опыт и известные случаи, убеждая, что «здесь проблема точно вот здесь,
    //так как я видел это несколько раз на прошлой работе», без всяких попыток рассуждать шире.


    //Оба эти подхода ошибочны. Даже в простых приложениях ошибка может скрываться во множестве мест,
    //поэтому нужно ясное понимание следующего:
    //- Что может пойти не так.
    //- Как это можно обнаружить.
    //- В каком порядке необходимо применять эти инструменты и методики.


    //Итог:
    //Недостаточно иметь опыт работы с множеством инструментов и методик.
    //Крайне важно знать, как верно применить их для локализации проблем, экономя время и нервы.


    //Алгоритм локализации дефектов
    //Лучший подход к локализации дефектов включает следующие шаги, которые нужно выполнять в строго указанной последовательности:

    //1 - Декомпозируйте приложения на самые маленькие кусочки, какие только возможно.

    //2 - Предложите гипотезы о первопричинах для каждого кусочка: "Что могло пойти не так и почему?"

    //3 - Подберите надлежащие инструменты и методики для проверки каждой гипотезы.

    //4 - Примените эти инструменты для каждой гипотезы, чтобы отклонить или подтвердить ее.
    //Подтверждённые гипотезы показывают возможные первопричины. Таким образом, локализация будет выполнена успешно.


    //Декомпозиция

    //Если приложение представлено в виде чёрного ящика, то системный подход к локализации дефектов почти невозможен.
    //Приложение можно исследовать только случайным образом с помощью перечисления множества идей,
    //которые не применимы в полной мере к этому случаю.

    //Представьте случай, когда приложение-клиент пытается получить доступ к файлу,
    //который хранится на файловом сервере, но что-то идёт не так и получить файл не удаётся.

    //Если разделить приложение на небольшие части, то появляется возможность подробно проанализировать каждую из них.
    //Верно выполненная локализация укажет на ту часть приложения,
    //которую разработчикам или DevOps-инженерам, предположительно, стоит тщательно изучить.

    //Для начала, любое клиент-серверное приложение можно разделить на три крупных компонента:
    //Узел клиента
    //Узел сервера
    //Сеть между ними

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/4-k_vMOc5vu-yVRq_xn3M6uETA8YYPqTs.png
    //Случай после декомпозиции: 3 крупных компонента и их составляющие

    //После этого мы можем декомпозировать каждый крупный компонент на более мелкие части.
    //Каждая из частей может либо сама работать некорректно, указывая на присутствие дефекта, либо дать нам подсказку
    //(как журналы, например), где может скрываться неполадка.
    //Продолжайте декомпозицию, пока не будут выявлены все важные части программного обеспечения.

    //Например, в случае выше мы предположили, что серверное приложение является обособленным файловым сервером,
    //тогда это должен быть простой случай.
    //Но что, если это не так?

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/zh4j_Sb23v0sIvFW_ng6Pp0sDhYzCvTY3.png
    //Новые находки отмечены пунктирной линией и серым цветом текста

    //Если интересующий нас файловый сервер обращается к файлам с другого сервера,
    //как показано выше, то второй сервер также необходимо исследовать, как и сеть между ними.

    //Нужно особенно отметить два важных принципа декомпозиции:

    //1 - Необходимо исследовать сеть между всеми компонентами, включая узел клиента, и все возможные проблемы, связанные с ней.

    //2 - Клиентская часть часто игнорируется или забывается. Более того, чем лучше вы знаете сторону сервера,
    //тем выше вероятность забыть о клиентской части, пользователях и всех проблемах, возможных на стороне клиента.


    //Итак, что и кто может помочь нам в декомпозиции (в порядке убывания):

    //1 - Документация продукта.

    //2 - Если документация отсутствует или устарела, то следует обратиться к аналитикам, разработчикам,
    //DevOps-инженерам, администраторам и другим лицам, хорошо знающим ПО.

    //3 - Если они недоступны (на больничном, разные часовые пояса, сильная занятость, не позволяющая помочь в текущий момент):
    //общий здравый смысл, ваши технические навыки и опыт.


    //Гипотезы

    //Теперь нам известны все части ПО, включая такие небольшие, но важные элементы, как файлы журнала,
    //которые могут помочь в поиске первопричины.

    //Далее нам нужно выработать гипотезы, что может быть не так с каждой из частей.


    //Гипотезы для стороны клиента

    //Давайте представим, что были сделаны следующие гипотезы

    //1 - Какие события зафиксированы в журналах приложения?
    //Это общий вопрос, но чрезвычайно полезно проверить его в первую очередь.

    //2 - Что делают пользователи?
    //Может, они отправили неверный или неподдерживаемый запрос.

    //3 - Какое клиентское ПО используется?
    //Оно может быть неподдерживаемым.

    //4 - Как сконфигурировано клиентское ПО?
    //Его настройки могут конфликтовать с серверным приложением (например, это может случиться,
    //если версии протокола прикладного уровня или режимы шифрования на стороне сервера и на стороне клиента не совпадают).

    //5 -  Какая используется операционная система на стороне клиента?
    //Она также может оказаться неподдерживаемой.

    //6 - Какая учётная запись пользователя используется для подключения?
    //Может быть, что-то не так с этой учётной записью,
    //например пароль с истёкшим сроком действия или недостаточно прав для доступа к этому файлу.

    //7 - Что насчёт свободного дискового пространства?
    //Может быть, файл слишком большой для сохранения,
    //и клиентское ПО не может записать его на диск или даже не пытается скачать его.

    //8 - Может быть, какое-либо системное ПО препятствует этой операции?
    //Нередко ПО, предназначенное для защиты, например антивирус, блокирует обычные операции.

    //9 - Узел клиента перегружен.
    //Далее мы не будем рассматривать это предположение,
    //поскольку наша проблема не выглядит как связанная с производительностью
    //(так как запрашиваемый файл вообще не получается извлечь ни с какой скоростью).
    //В некоторых случаях проблемы, связанные с производительностью, могут нарушить работу ПО такими образом,
    //что это будет выглядеть как сбой самого приложения
    //(например, когда соединения закрываются по истечении времени ожидания из-за перегрузки одной из сторон),
    //но мы оставим такие ситуации за рамками нашего примера.


    //Гипотезы для сети

    //Компонент сети также можно разделить на несколько следующих частей:

    //1 - Сегмент на стороне клиента, в т.ч. интернет-провайдер.
    //2 - Сегмент на стороне сервера, в т.ч. каким образом сервер подключён к Интернету.
    //3 - Промежуточный сегмент - сеть между клиентом и сервером

    //Можно проверить следующие гипотезы:

    //1 - Сервер недостижим со стороны клиента, хотя обе стороны подключены к сети.

    //2 - FQDN (доменное имя) сервера некорректно преобразуется в IP-адрес.

    //3 - Серверное приложение скрыто за межсетевым экраном.

    //4 - На стороне узла клиента и (или) узла сервера возникли проблемы с сетевыми интерфейсами
    //(неподсоединённые кабели, слишком слабый сигнал Wi-Fi, неисправные устройства, сбой драйверов).

    //5 - Узел клиента и (или) узел сервера отключены от Интернета из-за неоплаты.

    //6 - Интернет-провайдер клиента, или сервера, или единственный связывающий элемент между ними
    //потеряли соединение из-за обрыва кабеля или другой аварийной ситуации.

    //7 - В случае доступности серверного ПО, но при слишком медленной реакции или низкой скорости передачи:
    //некий сегмент сети перегружен (не будем далее рассматривать эту ситуацию,
    //так как мы вообще не может получить файл, и поэтому не похоже, что у нас возникла проблема с производительностью).


    //Гипотезы для стороны сервера

    //Как было сказано в предыдущем уроке, даже в случае с многозвенными приложениями каждый компонент можно рассмотреть,
    //как обособленное приложение.
    //Итак, что может пойти не так с обособленным серверным приложением:

    //1 - Сам сервер как узел целиком (физический, виртуальный - неважно) мог выключиться из-за нарушения питания.

    //2 - Серверное ПО остановлено по какой-либо причине, например некорректного автоматического обновления,
    //неожиданной перезагрузки сервера или ошибочного вмешательства системных администраторов.

    //3 - Серверное ПО попыталось запуститься, но потерпело неудачу из-за проблем с окружением, например следующих:

    //Конфликты, связанные с портами, когда кто-то другой уже занял нужный порт.

    //Временные файлы (особенно так называемые файлы блокировки) препятствуют запуску.

    //Другие проблемы, связанные, возможно, с нештатным завершением работы приложения.

    //4 - Серверное ПО работает нормально, но его настройки не позволяют этому пользователю получить доступ к запрашиваемому файлу.

    //5 - Серверное ПО работает нормально, но не может получить доступ к запрашиваемому файлу
    //из-за некорректно настроенных прав доступа к файлу,
    //например, когда чтение разрешено только пользователю root, а другим пользователям операционной системы запрещено.

    //6 - Некоторое ПО, обеспечивающее безопасность, которое установлено на сервере, нарушает нормальную работу.

    //7 - Запрашиваемый файл отсутствует, но либо клиентское,
    //либо серверное ПО не может обработать эту ситуацию и не сообщает об этом пользователю.


    //Инструменты и методики

    //Как было сказано выше, у проблемы может быть много возможных причин.
    //Перед тем как приступать к запуску каких-либо команд или проверкам,
    // необходимо сначала перечислить гипотезы и только после этого применять конкретные инструменты и методики.

    //Итак, давайте применим некоторые полезные инструменты для подтверждения или отклонения каждой перечисленной ранее гипотезы.
    //Представим, что сервер работает на ОС Linux, как и, возможно, клиент.

    //Прежде чем начать, стоит отметить следующее:
    //1. Это весьма приблизительный план действий, точный список зависит от характера приложения и типа дефектов.
    //2.Представим, что клиентская и серверная части полностью контролируются нами, и мы можем выполнять любые проверки на них.
    //В противном случае некоторые инструменты и методики окажутся неприменимы.
    //3.Если п. 2 верен, то почти всегда хорошей идеей будет воспроизведение дефекта в полностью контролируемом тестовом окружении,
    //в котором доступны все журналы, всё можно сконфигурировать аналогично реальным системам и т. д.


    //Проверки стороны клиента

    //(12 из них уникальны и не относятся к проблемам с производительностью)

    //1 - Какие события зафиксированы в журналах приложения?
    //Это общий вопрос, но чрезвычайно полезно проверить его первым делом.

    //2 - Может, пользователь отправил неверный или неподдерживаемый запрос.
    //Изучите описание дефекта.
    //Спросите пользователя, что именно было сделано.
    //Изучите журналы приложения, если они достаточно подробны.
    //Выполните сбор сетевого трафика, чтобы изучить запросы и ответы.

    //3 - Какое клиентское ПО используется? Оно может быть неподдерживаемым.
    //Определите точную версию клиентского ПО и сравните её с описанным в документации продукта.

    //4 - Настройки клиента могут конфликтовать с серверным приложением.
    //Изучите настройки клиентского приложения и сравните их с настройками сервера.
    //Если они недоступны, попытайтесь выполнить сбор сетевых пакетов и поискать конфликты, связанные с протоколами прикладного уровня.

    //5 - Какая операционная система используется на стороне клиента? Она также может оказаться неподдерживаемой.
    //То же, что и пункт выше.

    //6 - Какая учётная запись пользователя используется для подключения?
    //Может быть, что-то не так с этой учётной записью, например пароль с истёкшим сроком действия или
    //недостаточно прав для доступа к этому файлу.
    //Узнайте имя пользователя и (если возможно) пароль.
    //Если это возможно, проверьте их корректность на стороне сервера или выясните другими способами,
    //была ли попытка входа в систему успешна.
    //Если это возможно, проверьте права доступа, назначенные этой учётной записи, на стороне сервера.

    //7 - Что насчёт свободного дискового пространства? Может быть, файл слишком большой для сохранения,
    //и клиентское ПО не может записать его на диск или даже не пытается скачать его.
    //Проверьте наличие свободного дискового пространства на стороне клиента:
    //команда df на ОС Linux и macOS, и проводник в ОС Windows.

    //8 - Может быть, какое-либо системное ПО препятствует этой операции?
    //Нередко ПО, предназначенное для защиты, например антивирус, блокирует обычные операции.
    //Получите список приложений, установленных на компьютере клиента.

    //9 - Узел клиента перегружен.
    //Далее мы не будем рассматривать это предположение, поскольку наша проблема не выглядит как связанная с производительностью
    //(так как запрашиваемый файл вообще не получается извлечь ни с какой скоростью).
    //В некоторых случаях проблемы, связанные с производительностью, могут нарушить работу ПО такими образом,
    //что это будет выглядеть как сбой самого приложения
    //(например, когда соединения закрываются по истечении времени ожидания из-за перегрузки одной из сторон),
    //но мы оставим такие ситуации за рамками нашего примера.
    //Измерьте загрузку системы (процессор, оперативная память, система ввода-вывода), используя программы top и iostat.


    //Проверки сети

    //Вопрос сети также можно разделить на несколько следующих частей:

    //1. Сегмент на стороне клиента, то есть интернет-провайдер.
    //2. Сегмент на стороне сервера, то есть каким образом сервер подключён к Интернету.
    //3. Промежуточный сегмент.

    //Можно проверить следующие гипотезы (12 уникальных способов проверки):

    //1 - FQDN сервера преобразовано некорректно:
    //Используйте программы dig, host или nslookup (в зависимости от ОС клиента) для преобразования доменного имени в IP-адрес.
    //Если «резолверы» DNS недоступны, проверьте настройки системы DNS у клиента.
    //Если некоторые «резолверы» DNS присутствуют в настройках, но не отвечают,
    //то запустите «traceroute -U -p 53» и (или) «nmap -sU -p53»,
    //чтобы проверить их доступность и возможное присутствие межсетевого экрана.
    //Если построение маршрута прерывается до сервера назначения,
    //это может означать слишком строгие правила межсетевого экрана, препятствующие доступу клиента к «резолверу» DNS.

    //2 - Сервер недостижим со стороны клиента, хотя обе стороны находятся в сети:
    //Этот шаг можно полностью пропустить в пользу следующего пункта — «Серверное приложение скрыто за межсетевым экраном».
    //Самый быстрый способ проверки — программа ping, но она может ничего не показать, если протокол ICMP запрещён межсетевым экраном.
    //Второй способ: программа traceroute, которая может показать возможные проблемы с маршрутизацией,
    //например проблемы с домашним маршрутизатором или провайдером.

    //3 - Серверное приложение скрыто за межсетевым экраном — можно применить несколько инструментов:
    //Для приложений, использующих протокол TCP: nc -vz адрес_сервера номер_порта, или nmap, или traceroute.
    //Для приложений, использующих протокол UDP: nmap или traceroute.
    //В случае блокировки межсетевым экраном на основе страны:
    //попытайтесь получить доступ к серверу из другой страны с помощью сервиса VPN.

    //4 - На стороне узла клиента и (или) узла сервера возникли проблемы с сетевыми интерфейсами
    //(неподсоединённые кабели, слишком слабый сигнал Wi-Fi, неисправные устройства, сбой драйверов):
    //С помощью программы ping проверьте доступность соседей по сети, например шлюза, используемого по умолчанию.
    //Проверьте сигнал (для проводного или беспроводного канала, в зависимости от используемой технологии).

    //5 - Узел клиента и (или) узел сервера отключены от Интернета из-за неоплаты:
    //Проверьте доступность общеизвестного ресурса в Интернете, такого как сервер 8.8.8.8.
    //Проверьте остаток средств на счету.

    //6 - Интернет-провайдер клиента, провайдер сервера или единственный связывающий элемент между ними
    //потеряли соединение из-за обрыва кабели или другой аварийной ситуации:
    //Это можно проверить аналогично п. 3, показанному выше, используя программу traceroute.
    //Также может помочь смена интернет-провайдера, например с помощью переключения с домашнего Интернета на мобильный.

    //7 - В случае доступности серверного ПО, но при слишком медленной реакции или низкой скорости передачи:
    //некий сегмент сети перегружен.  Мы не будем далее рассматривать эту ситуацию, поскольку наша проблема не выглядит,
    //как связанная с производительностью, так как запрашиваемый файл вообще не получается извлечь ни с какой скоростью:
    //iptraf-ng — чтобы определить уровень использования пропускной способности.


    //Проверки со стороны сервера

    //Как было сказано в предыдущем уроке, даже в случае с многозвенными приложениями каждый компонент можно рассмотреть,
    //как самостоятельное приложение.
    //Итак, что может пойти не так с самостоятельным серверным приложением?

    //1 - Весь сервер может выключиться, например, из-за нарушения питания:
    //Для физических серверов: проверьте состояние аппаратного обеспечения, подаётся ли на него питание.
    //Для виртуальных серверов: проверьте состояние соответствующего физического сервера, гипервизора и виртуальной машины.

    //2 - Серверное приложение остановлено по каким-либо причинам:
    //Проверьте состояние приложения: команды ps или systemctl.
    //Некорректное автоматическое обновление: изучите файлы журналов приложения.
    //Неожиданная перезагрузка сервера: изучите файлы журналов операционной системы
    //(команды upitme, last и dmesg, соответствующие файлы в каталоге /var/log).
    //Ошибочное вмешательство системных администраторов. Проверьте файлы журналов как операционной системы, так и приложения.

    //3 - Серверное ПО попыталось запуститься, но потерпело неудачу из-за конфликтов,
    //связанных с портами, когда кто-то другой уже занял нужный порт:
    //Проверить журналы серверного ПО
    //Программа ss или netstat для проверки состояния портов сервера.

    //4 - Сервер работает нормально, но его настройки не позволяют этому пользователю получить доступ к запрашиваемому файлу.
    //Сравните настройки сервера с действиями пользователя.

    //5 - Сервер работает нормально, но не может получить доступ к запрашиваемому файлу из-за некорректно
    //настроенных права доступа к файлу, например когда чтение разрешено только пользователю root,
    //а другим пользователям операционной системы запрещено.
    //Проверьте права доступа к запрашиваемому файлу. Может ли серверное приложение прочитать его?

    //6 - Некоторое ПО, обеспечивающее безопасность, которое установлено на сервере, нарушает нормальную работу:
    //Получите список дополнительного ПО в системе (например, антивирусов)
    //и проанализируйте их возможное влияние на рассматриваемую операцию.

    //7 - Запрашиваемый файл отсутствует, но либо клиентское, либо серверное ПО не может обработать эту ситуацию
    //и не сообщает об этом пользователю:
    //Проверьте существование файла на сервере.


    //Итак, как было сказано ранее:

    //1. Вначале нужно выполнить декомпозицию всех компонентов.

    //2. Затем составить соответствующие гипотезы.

    //3. Только после этого можно приступать к подбору подходящих инструментов и методик, а затем применить их для проверки гипотез.

    //4. Этот процесс может показаться долгим, но это чёткое пошаговое продвижение по плану
    //с минимальными шансами пропустить что-либо важное.


    //Поиск неисправностей на практике

    //Лучшие практики и методы оптимизации

    //Предыдущий раздел может показаться чрезмерным, излишне длинным, сложным, трудным для понимания, скучным и чересчур академичным.
    //Что мы можем сделать с этим?
    //Конечно, мы можем добавить формальности, академичности и сделать всё ещё более теоретичным!
    //Например, так:
    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/qXST9XYrPdgpJeZ6_ORwt3NEohkp75SrF.png
    //Тем не менее эта схема намного яснее и компактнее по сравнению с перечнем шагов, описанных в предыдущем разделе

    //Первая подтверждённая гипотезы не всегда ведёт к первопричине.
    //При некоторых обстоятельствах, например если у вас есть время, или если критичность дефекта очень высокая
    //(и поэтому ему необходимо особое внимание), есть смысл проверить все выявленные гипотезы.

    //Но на самом деле не все шаги и полноценные проверки нужны в каждом случае, так как:
    //1. Когда подтверждается какое-либо предположение, локализация завершается.
    //2. Есть несколько методов упрощения и, возможно, ускорения всего процесса.

    //Давайте рассмотрим способы сокращения количества шагов, необходимых, чтобы найти возможную первопричину.
    //Существует несколько подходов и методов оптимизации, но особо стоит отметить следующие:

    //Подход
    //Сначала самые простые: Все применимые проверки располагаются от самых простых (например, журналы)
    //до самых сложных (например, анализаторы сетевых пакетов), а затем выполняются в этом порядке

    //Условия применения
    //У вас есть достаточный опыт в применении нужных инструментов и методик, чтобы заранее оценить их сложность

    //Польза
    //Потенциальная экономия времени.  Метод может быть полезен, если продвинутые способы проверки или инструменты недоступны.
    //Этот метод проще других объяснить лицам, не связанным с IT


    //Подход
    //Сначала самые вероятные:
    //Расположите предположения так, чтобы вначале шли наиболее вероятные предположения, а затем проверьте их в этом порядке

    //Условия применения
    //Вы хорошо знакомы с этим приложением или у вас есть достаточный опыт с аналогичными приложениями

    //Польза
    //Потенциальная экономия большого количества времени; методика также может быть полезна, если некоторые проверки недоступны


    //Подход
    //Сверху вниз:
    //«Классический» алгоритм, описанный в предыдущем разделе.
    //Все проверки проводятся, начиная со стороны клиента, шаг за шагом продвигаясь по направлению к внутренним элементам сервера

    //Условия применения
    //Вы не знакомы ни с приложением, ни с подходящими инструментами проверки

    //Польза
    //В любом случае это НАМНОГО лучше хаотичного перебора проверок. Кроме того, углублённые проверки
    //(например, для внутренних элементов бэкенда) не всегда доступны, в таком случае их явно стоит отложить.


    //Какой бы подход вы ни выбрали, всегда требуются одни и те же составляющие, упомянутые ранее:
    //- Надлежащая декомпозиция.
    //- Обоснованные гипотезы.
    //- Применимые инструменты и методики.

    //При наличии этих составляющих вы можете комбинировать
    //проверки и гипотезы по своему усмотрению, но сначала их нужно тщательно подготовить.


    //Сначала самые простые

    //Представьте, что ваша бабушка позвонила и сообщила, что её любимый веб-сайт не открывается
    //(и вы не являетесь администратором этого сайта).
    //Она замечательная, вы любите её и готовы сделать всё, что в ваших силах.
    //Вы находитесь далеко от неё, у вас нет инструментов удалённого доступа, заранее установленных на её ноутбуке,
    //и единственный способ локализации проблемы — это дистанционные разъяснения.

    //Но помните: если попытаетесь предложить ей установить nmap или прочитать сетевые пакеты,
    //собранные в реальном времени с помощью tcpdump, то она положит трубку,
    //больше никогда не будет с вами разговаривать, и заодно лишит наследства.
    //Поэтому единственный вариант — это метод «сначала самые простые». Итак:

    //1. Составьте список предположений и необходимых инструментов.
    //2. Выберите самые простые.
    //3. Приступайте!

    //Гипотезы, инструменты и применимые методики проверки
    //Давайте перепрыгнем в конец и попробуем предложить бабушке конечное решение.
    //Все применимые инструменты и методики. 13 уникальных методик
    //(только для проверки клиента и сети, поскольку сторона сервера исключена) из 24-х,
    //показанных в «полном руководстве» из предыдущего раздела.

    //Проверки стороны клиента

    //1 - Какие события зафиксированы в журналах приложения?
    //Нежелательно поверять в этих условиях.

    //2 - Может, пользователи отправили неверный или неподдерживаемый запрос:
    //Спросите, что именно было сделано и что отображается на экране.

    //3 - Какое используется клиентское ПО? Оно может быть неподдерживаемым:
    //Спросите о версии веб-браузера.
    //Затем зайдите на сайт и проверьте список поддерживаемых браузеров.
    //При необходимости установите тот же браузер и воспроизведите действия.

    //4 - Настройки клиента могут конфликтовать с серверным приложением.
    //Ни одна из возможных проверок не реализуема.

    //5 - Какая используется операционная система на стороне клиента? Она также может оказаться неподдерживаемой.
    //Спросите о версии операционной системы.
    //Затем зайдите на сайт и проверьте список поддерживаемых систем.
    //При необходимости установите эту систему в виртуальной машине и воспроизведите действия.

    //6 - Какая учётная запись пользователя используется для подключения?
    //Может быть, что-то не так с этой учётной записью, например пароль с истёкшим сроком действия или
    //недостаточно прав для доступа к этому файлу.
    //Можно предположить, что для доступа к этому веб-сайту проверка подлинности не требуется.

    //7 - Может быть, какое-либо системное ПО препятствует этой операции?
    //В порядке вещей, когда ПО, предназначенное для защиты, например антивирус, блокирует обычные операции.
    //Невозможно проверить в этих условиях.


    //Проверки сети

    //Можно проверить следующие предположения:

    //1 - Имя FQDN сервера преобразовано некорректно:
    //1. Проверьте имя FQDN, самостоятельно преобразовав его в IP-адрес.
    //2. Попросите узнать настройки системы DNS компьютера.
    //3. Спросите, может ли она открыть какой-либо другой веб-сайт

    //2 - Сервер недостижим со стороны клиента, хотя обе стороны находятся в сети. Невозможно проверить.

    //3 - Серверное приложение скрыто за межсетевым экраном.
    //Попробуйте сами открыть этот веб-сайт.

    //4 - На стороне узла клиента и (или) узла сервера возникли проблемы с сетевыми интерфейсами
    //(неподсоединённые кабели, слишком слабый сигнал Wi-Fi, неисправные устройства, сбой драйверов):
    //Попросите её открыть какой-нибудь другой веб-сайт.
    //После нескольких неудачных попыток объясните, как проверить сигнал проводного и беспроводного соединения.

    //5 - Узел клиента и (или) узел сервера отключены от Интернета из-за неоплаты:
    //Проверьте самостоятельно доступность веб-сайта.
    //Попросите её открыть какой-нибудь другой веб-сайт.

    //6 - Интернет-провайдер клиента, провайдер сервера или единственный связывающий элемент
    //между ними потеряли соединение из-за обрыва кабели или другой аварийной ситуации:
    //Единственно возможные проверки аналогичны п. 5 выше.


    //Сначала самые вероятные

    //Представьте, что ваша вторая бабушка, работавшая ранее авиационным инженером-конструктором,
    //позвонила вам и описала похожую проблему.
    //Ей по силам собрать ракету-носитель и вывести ее на орбиту прямо со двора,
    //не говоря уже о Linux+Wireshark+nmap на ноутбуке.
    //Недоступный веб-сайт поддерживается в настоящее время вашей командой,
    //поэтому вы можете выделить наиболее вероятные проблемы, связанные с ним.

    //Что это значит?

    //1 - Применимы все методики поиска неисправностей, описанные выше, нет необходимости что-то исключать: их всего примерно 35.

    //2 - Но теперь вы можете по-другому отсортировать предположения, основываясь на своём опыте. Например, следующим образом:
    //- Неисправная система расчётов платежей интернет-провайдера бабушки (поскольку вы видели уже такое несколько раз).
    //- Проблемы с системой DNS вашего веб-сайта (так как ваши настройки DNS далеки от идеала).
    //- Неожиданная перезагрузка сервера или перенастройка ПО сервера (так как после ухода старшего
    //администратора теперь делами заправляет младший сотрудник).
    //- Параноидальные настройки межсетевого экрана (поскольку ваш специалист по безопасности склонен к такому).

    //3 - Эти четыре предположения нужно проверить в первую очередь,
    //чтобы получить шанс кардинально уменьшить время, которое потребуется на устранение проблемы.

    //4 - Все остальные предположения можно заново отсортировать по своему усмотрению и проверить позже при необходимости.


    //Результаты урока

    //Что мы узнали о методах локализации дефектов:

    //1
    //Локализация дефектов — это процесс поиска возможных первопричин и сообщение о них разработчикам

    //2
    //Знания хороших инструментов диагностики недостаточно для качественной локализации дефектов

    //3
    //Для этого сначала необходимо разделить приложение (особенно если оно сложное) на минимально возможные части,
    //затем выработать гипотезы о возможных первопричинах, далее выбрать подходящие инструменты и методики.
    //И только после всего этого инструменты и методики можно применить для подтверждения или отклонения предположений

    //4
    //Элементы, связанные с сетью и стороной клиента, очень важны, и их нельзя игнорировать

    //5
    //Подход «сверху вниз» — это «классический» пошаговый процесс,
    //начинающийся со стороны клиента и продвигающийся по направлению к внутренним элементам сервера

    //6
    //В случае подхода «сначала самые простые» начинают с самых простых проверок, доступных даже в ограниченном окружении.
    //Этот подход позволяет экономить время и не запускать такие мощные и сложные инструменты, как анализаторы сетевых пакетов

    //7
    //Для подхода «сначала самые вероятные» необходимы хорошие знания самого приложения или его аналогов,
    //чтобы суметь предсказать наиболее вероятные первопричины.
    //Но этот подход оказывается самым эффективным, когда есть возможность его применить

    //8
    //Все три подхода будут работать, только если сначала составить списки соответствующих гипотез и инструментов для проверки

}
