public class chapter_20 {
    //#20.1 Принципы локализации дефектов: Теория

    //План урока
    //Основы поиска неисправностей в серверных приложениях
    //Алгоритм локализации дефектов
    //Поиск неисправностей на практике


    //Основы поиска неисправностей в серверных приложениях

    //Введение

    //Как было сказано в предыдущем модуле, навыки эффективной локализации дефектов очень полезны для тестировщиков.
    //Итак, что же такое локализация? Нам необходимо ясно определить этот и другие важные термины:

    //Первопричина (Root cause): точная причина, которая привела к возникновению ошибки.
    //Точное определение первопричины — непростая задача, поскольку она может считаться выполненной,
    //только когда дефект полностью исправлен. Если дефект больше не проявляется, значит, первопричина определена верно.
    //Поэтому в большинстве случаев у тестировщика нет возможности найти первопричину, и вместо этого выполняется локализация дефекта.

    //Локализация (Localization): процесс поиска возможной первопричины.
    //Верно выполненная локализация кардинально сокращает время, затрачиваемое на устранение дефекта, поскольку:
    //а) устранение дефекта поручается именно той команде разработчиков, которая и должна заниматься этим типом дефектов;
    //б) команда получает нужную информацию и поэтому знает, что нужно сделать.
    //Поэтому локализацию необходимо проводить при каждом обнаружении дефекта, иначе дефекты,
    //проявляющиеся в интерфейсе пользователя, всегда будут назначаться команде разработчиков этого интерфейса,
    //даже если причина находится в некорректной реализации бэкенда, а это, в свою очередь,
    //приводит к дополнительной нагрузке на разработчиков,
    //возможному «отфутболиванию» дефектов и, как результат, напряжённым отношениям между командами.

    //Поиск неисправностей  (Troubleshooting): конкретные методики локализации дефектов.


    //Важность верного подхода к локализации дефектов

    //В предыдущем модуле было упомянуто несколько возможных проблем в серверных приложениях.
    //Достаточно ли этих знаний для успешной локализации дефектов? На самом деле, нет.

    //Более того, даже если у вас огромный технический опыт и вы знаете множество системных инструментов,
    //это ещё не значит, что вы сможете надлежащим образом локализовать дефект.

    //Чем больше инструментов вам известно, тем выше вероятность их хаотического применения без глубокого понимания,
    //что и почему вы делаете. Многие системные администраторы и DevOps-инженеры (включая тех, кто обладает большим опытом)
    //на вопрос «Вы видите проблему с…, как вы будете её локализовать?» реагируют следующим образом:

    //Беспорядочно перечисляют все известные им системные инструменты и методики, надеясь,
    //что хотя бы некоторые из них окажутся подходящими средствами для выявления возможной первопричины.

    //И (или) вспоминают свой предыдущий опыт и известные случаи, убеждая, что «здесь проблема точно вот здесь,
    //так как я видел это несколько раз на прошлой работе», без всяких попыток рассуждать шире.


    //Оба эти подхода ошибочны. Даже в простых приложениях ошибка может скрываться во множестве мест,
    //поэтому нужно ясное понимание следующего:
    //- Что может пойти не так.
    //- Как это можно обнаружить.
    //- В каком порядке необходимо применять эти инструменты и методики.


    //Итог:
    //Недостаточно иметь опыт работы с множеством инструментов и методик.
    //Крайне важно знать, как верно применить их для локализации проблем, экономя время и нервы.


    //Алгоритм локализации дефектов
    //Лучший подход к локализации дефектов включает следующие шаги, которые нужно выполнять в строго указанной последовательности:

    //1 - Декомпозируйте приложения на самые маленькие кусочки, какие только возможно.

    //2 - Предложите гипотезы о первопричинах для каждого кусочка: "Что могло пойти не так и почему?"

    //3 - Подберите надлежащие инструменты и методики для проверки каждой гипотезы.

    //4 - Примените эти инструменты для каждой гипотезы, чтобы отклонить или подтвердить ее.
    //Подтверждённые гипотезы показывают возможные первопричины. Таким образом, локализация будет выполнена успешно.


    //Декомпозиция

    //Если приложение представлено в виде чёрного ящика, то системный подход к локализации дефектов почти невозможен.
    //Приложение можно исследовать только случайным образом с помощью перечисления множества идей,
    //которые не применимы в полной мере к этому случаю.

    //Представьте случай, когда приложение-клиент пытается получить доступ к файлу,
    //который хранится на файловом сервере, но что-то идёт не так и получить файл не удаётся.

    //Если разделить приложение на небольшие части, то появляется возможность подробно проанализировать каждую из них.
    //Верно выполненная локализация укажет на ту часть приложения,
    //которую разработчикам или DevOps-инженерам, предположительно, стоит тщательно изучить.

    //Для начала, любое клиент-серверное приложение можно разделить на три крупных компонента:
    //Узел клиента
    //Узел сервера
    //Сеть между ними

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/4-k_vMOc5vu-yVRq_xn3M6uETA8YYPqTs.png
    //Случай после декомпозиции: 3 крупных компонента и их составляющие

    //После этого мы можем декомпозировать каждый крупный компонент на более мелкие части.
    //Каждая из частей может либо сама работать некорректно, указывая на присутствие дефекта, либо дать нам подсказку
    //(как журналы, например), где может скрываться неполадка.
    //Продолжайте декомпозицию, пока не будут выявлены все важные части программного обеспечения.

    //Например, в случае выше мы предположили, что серверное приложение является обособленным файловым сервером,
    //тогда это должен быть простой случай.
    //Но что, если это не так?

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/zh4j_Sb23v0sIvFW_ng6Pp0sDhYzCvTY3.png
    //Новые находки отмечены пунктирной линией и серым цветом текста

    //Если интересующий нас файловый сервер обращается к файлам с другого сервера,
    //как показано выше, то второй сервер также необходимо исследовать, как и сеть между ними.

    //Нужно особенно отметить два важных принципа декомпозиции:

    //1 - Необходимо исследовать сеть между всеми компонентами, включая узел клиента, и все возможные проблемы, связанные с ней.

    //2 - Клиентская часть часто игнорируется или забывается. Более того, чем лучше вы знаете сторону сервера,
    //тем выше вероятность забыть о клиентской части, пользователях и всех проблемах, возможных на стороне клиента.


    //Итак, что и кто может помочь нам в декомпозиции (в порядке убывания):

    //1 - Документация продукта.

    //2 - Если документация отсутствует или устарела, то следует обратиться к аналитикам, разработчикам,
    //DevOps-инженерам, администраторам и другим лицам, хорошо знающим ПО.

    //3 - Если они недоступны (на больничном, разные часовые пояса, сильная занятость, не позволяющая помочь в текущий момент):
    //общий здравый смысл, ваши технические навыки и опыт.


    //Гипотезы

    //Теперь нам известны все части ПО, включая такие небольшие, но важные элементы, как файлы журнала,
    //которые могут помочь в поиске первопричины.

    //Далее нам нужно выработать гипотезы, что может быть не так с каждой из частей.


    //Гипотезы для стороны клиента

    //Давайте представим, что были сделаны следующие гипотезы

    //1 - Какие события зафиксированы в журналах приложения?
    //Это общий вопрос, но чрезвычайно полезно проверить его в первую очередь.

    //2 - Что делают пользователи?
    //Может, они отправили неверный или неподдерживаемый запрос.

    //3 - Какое клиентское ПО используется?
    //Оно может быть неподдерживаемым.

    //4 - Как сконфигурировано клиентское ПО?
    //Его настройки могут конфликтовать с серверным приложением (например, это может случиться,
    //если версии протокола прикладного уровня или режимы шифрования на стороне сервера и на стороне клиента не совпадают).

    //5 -  Какая используется операционная система на стороне клиента?
    //Она также может оказаться неподдерживаемой.

    //6 - Какая учётная запись пользователя используется для подключения?
    //Может быть, что-то не так с этой учётной записью,
    //например пароль с истёкшим сроком действия или недостаточно прав для доступа к этому файлу.

    //7 - Что насчёт свободного дискового пространства?
    //Может быть, файл слишком большой для сохранения,
    //и клиентское ПО не может записать его на диск или даже не пытается скачать его.

    //8 - Может быть, какое-либо системное ПО препятствует этой операции?
    //Нередко ПО, предназначенное для защиты, например антивирус, блокирует обычные операции.

    //9 - Узел клиента перегружен.
    //Далее мы не будем рассматривать это предположение,
    //поскольку наша проблема не выглядит как связанная с производительностью
    //(так как запрашиваемый файл вообще не получается извлечь ни с какой скоростью).
    //В некоторых случаях проблемы, связанные с производительностью, могут нарушить работу ПО такими образом,
    //что это будет выглядеть как сбой самого приложения
    //(например, когда соединения закрываются по истечении времени ожидания из-за перегрузки одной из сторон),
    //но мы оставим такие ситуации за рамками нашего примера.


    //Гипотезы для сети

    //Компонент сети также можно разделить на несколько следующих частей:

    //1 - Сегмент на стороне клиента, в т.ч. интернет-провайдер.
    //2 - Сегмент на стороне сервера, в т.ч. каким образом сервер подключён к Интернету.
    //3 - Промежуточный сегмент - сеть между клиентом и сервером

    //Можно проверить следующие гипотезы:

    //1 - Сервер недостижим со стороны клиента, хотя обе стороны подключены к сети.

    //2 - FQDN (доменное имя) сервера некорректно преобразуется в IP-адрес.

    //3 - Серверное приложение скрыто за межсетевым экраном.

    //4 - На стороне узла клиента и (или) узла сервера возникли проблемы с сетевыми интерфейсами
    //(неподсоединённые кабели, слишком слабый сигнал Wi-Fi, неисправные устройства, сбой драйверов).

    //5 - Узел клиента и (или) узел сервера отключены от Интернета из-за неоплаты.

    //6 - Интернет-провайдер клиента, или сервера, или единственный связывающий элемент между ними
    //потеряли соединение из-за обрыва кабеля или другой аварийной ситуации.

    //7 - В случае доступности серверного ПО, но при слишком медленной реакции или низкой скорости передачи:
    //некий сегмент сети перегружен (не будем далее рассматривать эту ситуацию,
    //так как мы вообще не может получить файл, и поэтому не похоже, что у нас возникла проблема с производительностью).

}
