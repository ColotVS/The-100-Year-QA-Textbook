public class chapter_08 {
    //#08.1 Linux - пользователи, группы и права доступа к файлам в Linux: Теория

    //План урока
    //Понятия пользователей и групп Linux
    //Права доступа к файлам
    //Повышение привилегий с помощью "su" и "sudo"
    //Особые случаи: символические ссылки (symbolic links), липкий бит (sticky bit), SUID, SGID


    //Понятия пользователей и групп Linux

    //Введение

    //Представьте, что у вас есть коллекция файлов на Google Диске,
    //тщательно создаваемая в течение многих лет и содержащая много полезной и ценной информации.
    //Затем представьте, что вы неправильно настроили права доступа, сделав эти документы полностью доступными для всего Интернета.
    //Таким образом, любой может увидеть ваше финансовое планирование или удалить ваши свадебные фотографии.
    //Не самая лучшая перспектива, не так ли?

    //На UNIX-подобных операционных системах, включая Linux,
    //много работающего серверного программного обеспечения и пользователей, отвечающих за различные задачи обслуживания.
    //При неправильном использовании и/или неправильной конфигурации и ОС, и все,
    //что в ней находится, может быть легко уничтожено, повреждено или взломано.
    //Возможный ущерб зависит от роли каждого сервера и может многократно превысить ваши личные неприятности (упомянутые выше).

    //Чтобы предотвратить хаос и сохранить ОС безопасной и стабильной,
    //необходимо каким-то образом управлять всем перечисленным, например:

    //Большинство частей ОС и установленных приложений должны изменяться только администраторами,
    //а не обычными пользователями или приложениями (а иногда и быть доступны только им).

    //Каждое приложение должно выполняться с минимальными привилегиями.

    //Каждый пользователь должен иметь минимальные привилегии, необходимые для выполнения своей работы.
    //Каждому пользователю также должно быть разрешено выполнять только необходимые действия, и [в идеальном случае] ничего больше.

    //Системные администраторы - тоже пользователи,
    //поэтому они должны иметь возможность повышать свои привилегии для выполнения определенных важных действий.

    //Для упрощения задач управления пользователи могут быть объединены в группы.


    //Во время выполнения будущих задач, связанных с Linux и приложениями,
    //в большинстве случаев вы будете действовать как обычные пользователи (не администраторы),
    //работающие в многопользовательских средах с большим количеством:

    //Запущенных процессов - это экземпляры программ, выполняющиеся в данный момент; мы узнаем о них в четвертом уроке по Linux;

    //Сервисов - это сущности, созданные для упрощения управления системой, они могут делать многое,
    //например, запускать процессы по требованию.
    //Мы будем изучать их вместе с процессами;

    //других пользователей.

    //Итак, вы должны знать, как:
    //1
    //Заглянуть в учетную запись ОС, чтобы определить свои настройки и привилегии

    //2
    //Повысить (эскалировать) свои привилегии для выполнения некоторых  действий по администрированию, если это разрешено и необходимо

    //3
    //Правильно управлять файлами, созданными другими пользователями/процессами,
    //и/или предоставлять им доступ к вашим собственным файлам


    //Более того, все вышеперечисленное поможет вам при необходимости устранить неполадки,
    //связанные с неправильными правами доступа к файлам.
    //В ходе урока мы рассмотрим, как работают [наиболее используемые] механизмы разделения привилегий в Linux,
    //и как с ними взаимодействовать.


    //Учетные записи ОС
    //Здесь и далее термины "учетная запись" и "пользователь" означают одно и то же,
    //т.е. системную сущность с определенными настройками,
    //предназначенными для работы человека-оператора или системного программного обеспечения для правильного разделения привилегий.

    //В UNIX-подобных операционных системах существует несколько типов пользователей ОС (т.е. учетных записей):

    //Стандартные учетные записи: создаются для обычных пользователей

    //Административная учетная запись: ее имя - root, и она является единственным администратором ОС (у вас не может быть двух root).
    //Учетная запись root используется для прямого входа в систему очень редко;
    //вместо этого администраторы временно повышают свои привилегии до root для обслуживания системы и других важных операций.

    //Служебные учетные записи: создаются для служб и других специальных целей; не должны использоваться пользователями.
    //Например, для запуска бэкэнд-приложения (или приложения сервера базы данных) должна использоваться отдельная учетная запись.
    //Это минимизирует возможные последствия в случае сбоя или взлома приложения.


    //В чем разница:

    //Стандартные учетные записи: могут входить в систему, выполнять команды и читать некоторые файлы или директории.
    //Они не могут изменять любую часть ОС и "общесистемных" приложений.
    //По умолчанию они могут изменять данные только в своих домашних директориях и /tmp.

    //Административная (root) учетная запись: может входить в систему и делать все с ОС и пользователями без каких-либо ограничений
    //(в отличие от Windows, где учетная запись администратора не настолько мощная, как учетная запись "Локальная система").

    //Служебные учетные записи: не могут входить в систему. ОС, службы и приложения (запускаемые root)
    //используют их для специальных целей, например, для запуска определенных программ, служб и т.д.


    //Такое разделение существует для того, чтобы обычные пользователи и службы не могли:
    //Ломать ОС и приложения.
    //Читать конфиденциальные данные, например, пароли, конфиденциальные записи в БД и т.д.
    //Вмешиваться в работу других пользователей и приложений


    //Дополнительные подробности для любопытных студентов:
    //Имена пользователей чувствительны к регистру, как и почти все в мире UNIX.
    //Т.е. пользователи "root" и (если существует) "ROOT" - это разные пользователи.

    //Вы также можете запускать службы и приложения, используя свою стандартную учетную запись, а не служебную.
    //Но в целом, такая практика не очень хороша по соображениям безопасности.

    //Если это явно разрешено, пользователи могут повышать привилегии до root для выполнения определенных
    //команд с помощью инструмента "sudo" - мы рассмотрим это далее в этом уроке.

    //Если пользователь знает пароль "root", в большинстве случаев он может повысить свой собственный
    //уровень привилегий пользователя до root с помощью инструмента "su" - мы рассмотрим это далее в этом уроке.


    //Основные настройки учетной записи: /etc/passwd

    ///etc/passwd - это основной конфигурационный файл для учетных записей пользователей, который используется, когда:
    //Пользователь входит в систему по SSH, FTP и другим средствам/протоколам.
    //ОС или любая программа требует, чтобы имя пользователя было сопоставлено с числовым UID (см. ниже) или наоборот.
    //Что вы можете видеть относительно своей учетной записи: (помните, "${USER}" означает ваше имя пользователя)

    //[feodor@c7-sandbox ~]$ egrep "${USER}" /etc/passwd
    //feodor:x:1000:100:User Description Here:/home/feodor:/bin/bash

    //Рассмотрим содержимое и формат этого файла. В качестве разделителя полей используется ':', таким образом:
    //feodor - имя пользователя, должно быть уникальным

    //x - поле не используется, поэтому мы имеем здесь 'x' как заглушку

    //1000 - идентификатор пользователя, называемый "UID", должен быть уникальным.
    //Пользователи в основном имеют UID >= 1000.
    //Пользователь root всегда имеет UID 0.
    //Учетные записи служб имеют UID от 1 до (в основном) 999.
    //Никто, кроме root, не должен иметь UID 0.

    //100 - идентификатор основной группы.
    //Каждый пользователь должен быть членом хотя бы одной группы (не существует пользователей "без групп").
    //Если пользователей нужно включить в большее количество групп, это настраивается в /etc/group (см. следующий раздел).

    //User Description Here - это поле может быть пустым или содержать что угодно, кроме ':'.
    //Оно не играет никакой роли в ОС и механизмах входа в систему.

    ///home/feodor - домашний каталог пользователя; вы автоматически помещаетесь сюда после успешного входа в систему

    ///bin/bash - программа, выполняемая при успешном входе в систему.
    //Сервисные учетные записи не предназначены для входа в систему и работы в командной строке,
    //поэтому у них здесь указаны специальные "псевдо" программы, такие как /bin/false или /sbin/nologin


    //Заметки по безопасности/стабильности для любопытных студентов:

    //Только root может изменять /etc/passwd - иначе хакеры могут повысить привилегии, создав "фальшивого рута" с UID 0.

    //Любой пользователь или приложение должны иметь доступ на чтение к этому файлу - иначе ОС становится нестабильной.

    //Хеши паролей хранятся в файле /etc/shadow, доступ к которому имеет только root.
    //Несколько слов о хэшах: это набор однонаправленных криптографических функций, таких как хорошо известные MD5, SHA-512 и т.д.
    //Если кто-то (например, вы или ОС) знает исходный пароль, он может быть легко преобразован в хэш.
    //Но если вы знаете только хэш, получить начальный пароль будет очень сложно.

    //Эти особые разрешения /etc/shadow используются для того, чтобы избежать атак методом перебора.
    //В противном случае любой может прочитать хэши, а затем попытаться подобрать правильный пароль к определенному хэшу.
    //Файл /etc/shadow также содержит все настройки паролей учетных записей ОС, например, когда пароль должен быть изменен и т.д.


    //Группы ОС

    //Понятие групп в UNIX:
    //Группы включают несколько (0 или более) пользователей для упрощения управления пользователями и разделения привилегий

    //Каждый пользователь должен быть членом как минимум одной группы - она задается в /etc/passwd,
    //такая группа называется "основной" для конкретного пользователя

    //Каждый пользователь может быть включен в 0 или более дополнительных групп, называемых "вторичными группами" (secondary groups).
    //Членство во вторичных группах настраивается в файле /etc/group.

    //Нет никакой разницы (в плане привилегий) между членством в первичной и вторичной группах, например:
    //если ваш пользователь входит в группу "qa" и группу "users",
    //вы можете читать файлы, доступные как группам "qa", так и "users".

    //Группы полезны для назначения разрешений на доступ к файлам и других привилегий или ограничений, например:
    //кто может читать/писать/исполнять файл
    //кто может войти в систему через SSH
    //кто и как может использовать инструменты "sudo" или "su"
    //кто может читать журналы общесистемных служб с помощью инструмента "journalctl"
    //сколько процессора/памяти/дискового пространства может быть израсходовано

    //Заметки для любопытных студентов:

    //Имена групп чувствительны к регистру, как и почти все в мире UNIX. т.е. группы "users" и "Users" - это разные группы.

    //В отличие от Windows, в UNIX нет группы "Администраторы".

    //В большинстве систем членство в группе "root" не дает многих привилегий, в отличие от статуса пользователя "root".

    //Могут существовать специальные группы с дополнительными привилегиями, это сильно зависит от настроек вашей ОС.
    //Например, группы "sudo" или "wheel" могут иметь (а могут и не иметь)
    //неограниченные права на выполнение любых команд от имени root через "sudo".


    //Основные настройки групп: /etc/group

    //Файл /etc/group является основным конфигурационным файлом для групп UNIX и используется, когда:

    //ОС или какой-либо программе требуется преобразовать имя группы в числовой GID (см. ниже) или наоборот.

    //Пользователь пытается сделать что-то, что может быть ограничено или
    //разрешено функциями управления группами (например, чтение файла)

    //[опционально, если службы входа настроены таким образом] Пользователь входит в систему (SSH, FTP, другие протоколы).

    //Если вы посмотрите в /etc/group и найдете свое имя пользователя, вы можете увидеть что-то вроде этого:

    //[feodor@c7-sandbox ~]$ egrep "$USER" /etc/group
    //wheel:x:10:feodor
    //users:x:100:feodor,[ ... a lot of users here ... ]
    //feodor:x:1000:
    //qa:x:1001:feodor,user1,user2

    //Рассмотрим последнюю строку примера выше.
    //1 - Название группы
    //2 - Всегда 'x'
    //3 - Идентификатор группы, называемый "GID", должен быть уникальным
    //4 - Список членов группы, разделенный запятыми, может быть пустым

    //Заметки для любопытных студентов:

    //Членство в группе зависит от /etc/passwd и /etc/group -
    //например, группа "qa" имеет только 3 явно включенных члена, но может быть много других членов в группах "qa",
    //определенных в /etc/passwd путем указания 1001 в качестве основного GID.
    //Предположим, что система настроена следующим образом, группа "qa" с GID 1001 содержит как минимум 6 пользователей:
    //john, alex, greg и user1 включены в эту группу в /etc/passwd ("qa" - их основная группа)
    //feodor и user2 включены в эту группу в /etc/group ("qa" является их вторичной группой).
    //user1 также упоминается как член группы "qa" в /etc/group, но это нормально.

    //[feodor@c7-sandbox ~]$ egrep ":1001:" /etc/passwd
    //john:x:1001:1001:/home/john:/bin/bash
    //alex:x:1002:1001:/home/alex:/bin/bash
    //greg:x:1003:1001:/home/greg:/bin/bash
    //user1:x:1004:1001:/home/user1:/bin/bash
    //[ ... other users having 1001 as their primary group ID ... ]

    //[feodor@c7-sandbox ~]$ egrep "qa:x" /etc/group
    //qa:x:1001:feodor,user1,user2


    //Как вывести информацию о своем пользователе и группе

    //Ниже вы можете увидеть несколько полезных команд и пояснения к их использованию.
    //Вы можете воспроизвести их в своей собственной среде (эмулятор, виртуальная машина Linux, учебный сервер)
    //и посмотреть на результаты.

    //Получить имя текущего пользователя:
    //whoami

    //Получить расширенную информацию о текущем пользователя и его членстве в группах:
    //id

    //Показать только UID текущего пользователя и ничего больше:
    //id -u

    //Показать только GID или только имена групп текущего пользователя:
    //id -G
    //id -Gn

    //Еще один способ получить имена групп:
    //groups


    //Теперь вам известно:

    //Что такое "учетная запись ОС" и как можно вывести ее настройки

    //Что такое "группы ОС" и как вы можете увидеть их членов

    //Эти понятия необходимы для понимания механизмов повышения привилегий и разрешений на доступ к файлам, описанных ниже


    //Повышение привилегий

    //"su": Переключить пользователя
    //Команда su используется для запуска оболочки от имени другого пользователя (по умолчанию root)
    //после предоставления пароля пользователя.
    //Соответственно, все, что выполняется в этой оболочке, будет выполняться с привилегиями целевого пользователя.
    //Чтобы вернуться к предыдущему пользователю, выполните команду "exit".

    //Эта команда часто используется системными администраторами, которые входят в систему как обычные пользователи,
    //а затем переключаются на учетную запись root. Она может использоваться во время развертывания или настройки тестовых сред;
    //но помните, что для этого случая требуется знание пароля root.

    //Примечания:
    //Пользователь "root" может переключаться на любого другого без ввода пароля цели.

    //Иногда вы не можете использовать "su", даже имея правильный пароль, из-за ограничений безопасности, но так случается редко.

    //Всегда лучше использовать "su -" вместо "su", так как ключ "-" загружает все окружение оболочки целевого пользователя.


    //"sudo": Substitute User Do
    //Инструмент sudo используется для запуска команды от имени другого пользователя (по умолчанию root) после предоставления пароля.
    //"sudo" может быть настроен на разрешение или запрет выполнения определенных команд и их аргументов.

    //Обычный пользователь не может получить доступ к содержимому HOME-директории пользователя root,
    // вместо этого получая ошибку "Permission denied".
    //Но если "sudo" позволяет этому пользователю выполнить эту команду от имени root, все работает нормально.

    //sudo предназначен для того, чтобы позволить определенным пользователям выполнять определенные команды
    //(и только их, ничего больше!) от имени другого, часто привилегированного, пользователя.
    //Это очень удобный способ делегирования обязанностей, например:

    //Младшие системные администраторы могут запускать только безобидные команды от имени root

    //QA-инженеры могут запускать, перезапускать и останавливать (как root) системные службы,
    //связанные с тестируемым программным обеспечением.

    //"sudo" обычно может использоваться как:

    //Чтобы проверить возможности пользователя
    //sudo -l

    //Чтобы запустить команды
    //sudo [-u username] command args

    //Где:
    //-u имя пользователя: какой пользователь будет выполнять эту команду (по умолчанию root, если не указано)
    //-l (строчная буква "L"): чтобы увидеть, какие команды вы можете выполнять
    //command, args - что выполнить с привилегиями другого пользователя

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/o-kyHNhj_NT_d-wV_rY9gZgAgqTrwWtbQ.jpg
    //Вот пример настроек sudo для пользователя "sutest"

    //Важные замечания:

    //Ваш пользователь может иметь или не иметь никаких прав sudo, это зависит только от вашего системного администратора

    //Только пользователь "root" может устанавливать или изменять чьи-либо разрешения sudo - т.е., будучи обычным пользователем,
    //вы можете только перечислить свои собственные настройки sudo и выполнять разрешенные команды в соответствии с настройками

    //Некоторые привилегированные пользователи (например, члены групп "wheel" или "sudo")
    //могут выполнять любые команды от имени root, в выводе "sudo -l" это отображается как (ALL) ALL


    //sudo VS su: Основные различия

    //Пожалуйста, помните: su и sudo - это совершенно разные команды, предназначенные для различных целей.
    //Для удобства эти различия показаны в таблице ниже.

                                                //su
    //Основная функциональность                 Предоставление оболочки входа в систему с
    //                                          привилегиями целевого пользователя, по умолчанию root

    //Основная идея                             Работа в полнофункциональной оболочке как root или любой другой пользователь ОС

    //Какой пароль вводить                      Пароль целевого пользователя

    //Необходимые настройки                     Возможно, вас нужно будет включить в специальную группу для запуска "su"
    //                                          (если это установлено вашим системным администратором).

    //Настройки безопасности по умолчанию       Любой может выполнить команду "su", требуется только пароль целевого пользователя


                                                //sudo
    //Основная функциональность                 Выполнение одной команды от имени целевого пользователя, по умолчанию root

    //Основная идея                             Делегирование некоторых административных полномочий обычным пользователям

    //Какой пароль вводить                      Ваш собственный пароль

    //Необходимые настройки                     Точные команды и даже их аргументы могут быть разрешены в явном виде

    //Настройки безопасности по умолчанию       Только члены специфической для дистрибутива группы
    //                                          ("wheel" в RHEL-системах, например CentOS, "sudo" в Debian, например Ubuntu)
    //                                          могут использовать sudo.


    //Основной вывод:

    //Вы можете повышать свои привилегии, если это разрешено
    //Инструмент "su" используется для работы в полнофункциональной оболочке, как правило, с правами root
    //Инструмент "sudo" используется для выполнения определенной команды (если она разрешена), обычно с правами root.


    //Разрешения на доступ к файлам

    //Эти знания необходимы для эффективной работы в многопользовательских средах,
    //даже если вы не являетесь системным администратором.
    //В качестве инженера по тестированию вам нужно будет понимать причины этих неприятных сообщений об ошибках "Permission denied".
    //Знание прав доступа к файлам позволит вам устранять неполадки в программах, связанные с неправильными правами доступа.

    //Анатомия вывода "ls"

    //Раньше мы не углублялись в анатомию вывода "ls", но сейчас самое время это сделать.
    //Эта команда показывает много полезной информации, которую нужно правильно интерпретировать.

    //Давайте начнем с очень простого примера.
    //[feodor@c7-sandbox ~]$ ls -l testfile
    //-rw-r--r--.   1    feodor   qa    452    May 17 19:32    testfile

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/9sLfZPo0hQi64JTk_2FTURm4MhWywTSu_.png

    //-rw-r--r--.   1 символ: Тип файла, остальные: права доступа к файлу
    //feodor        Пользователь, которому принадлежит объект
    //qa            Группа, которой принадлежит объект
    //452           Размер файла
    //May 17 19:32  Дата последнего изменения файла
    //testfile      Имя файла

    //Что касается типов файлов - они показаны в 1-м символе вывода "ls":
    //'-' для типичных файлов
    //'d' для каталогов
    //'l' для символических ссылок, объясненных в предыдущем уроке.
    //Другие: s, p, c, b - для специальных целей, вне рамок темы.
    //И 9 следующих символов, таких как "rw-r--r--" -
    //это разрешения доступа к файлам UNIX, о которых будет рассказано в следующем разделе.


    //Анатомия разрешений на доступ к файлам
    //Представьте, что у нас есть разрешения "rwxrwxrwx", установленные на каталог.
    //Это можно разделить и объяснить следующим образом:
    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/ic9WHwObBcneA0J__eTL16fYzeZ80pJ07.jpg
    //Схема RWX и Владелец (Пользователь)/Группа/Другие
    //r - Read  (Чтение)
    //w - Write (Запись)
    //x - Execute (Выполнение)

    //Что касается примера, показанного выше:
    //[feodor@c7-sandbox ~]$ ls -l testfile
    //-rw-r--r--.   1    feodor   qa    452    May 17 19:32    testfile

    //Мы можем сказать, что ('-' означает "не разрешено"):

    //Пользователь (User): разрешения владельца файла (feodor) - 'rw'.
    //Группа (Group): разрешения группы (qa) - 'r'.
    //Другие (Other): разрешения других пользователей, т.е. не являющихся ни владельцами,
    //ни входящих в группу владельцев, также равны 'r'.

    //Как проверяются и применяются разрешения доступа:

    //Во-первых: является ли пользователь владельцем данного объекта?
    //Если да - проверить, разрешают ли разрешения владельца объекта эту операцию.

    //Если пользователь не является владельцем объекта - является ли он членом группы?
    //Если да - проверить, разрешают ли групповые разрешения объекта эту операцию.

    //Если пользователь не входит в группу - проверить, разрешают ли разрешения других на эту операцию.


    //Смысл и формат записи прав доступа

    //Разрешения доступа к файлам (r, w, x) имеют разные значения для файлов и директорий,
    //поэтому их следует объяснять отдельно.


    //Значение для файлов

    //r - read (чтение)
    //Файл может быть прочитан, например, с помощью cat, less, head, других инструментов.

    //w - write (запись)
    //Содержимое файла может быть изменено. Но сам файл не может быть удален - см. 'w' для каталогов.

    //x - execute (выполнение)
    //Файл может быть выполнен. Фактически исполняемые файлы: двоичные файлы и скрипты


    //Значение для директорий

    //r - read (чтение)
    //Список содержимого каталога может быть прочитан.
    //Если бит 'x' не установлен, могут быть прочитаны только имена объектов.

    //w - write (запись)
    //Любой элемент этого каталога может быть создан или удален.
    //То есть, даже если вы не являетесь владельцем файла в этом каталоге, вы можете удалить его, установив 'w' для каталога.
    //Это можно сделать только в том случае, если бит "x" также установлен.

    //x - execute (выполнение)
    //Самый важный бит для каталогов. Вы можете войти в этот каталог (например, с помощью "cd")
    //и получить доступ (чтение, запись, выполнение) ко всему его содержимому, если это разрешено их правами доступа.
    //Если у вас нет 'x' для каталога, вы НЕ можете:
    //- переходить в подкаталоги
    //- создавать/удалять объекты (файлы, каталоги)
    //- читать информацию об объекте (разрешения, владелец, ...)


    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/4pAOvKvF-JQHE-7y_5qrqUN9GN9l52-Q7.jpg
    //Вы можете использовать этот рисунок, чтобы лучше понять, как работают комбинированные разрешения.
    //Здесь показаны как файлы, так и директории (только помните, что "размер файла" не имеет смысла для директорий).


    //Восьмеричные числа
    //Биты доступа (r, w, x) также могут быть записаны в виде восьмеричных чисел, т.е.:
    //'r' равно 4 (100)
    //'w' равно 2 (010)
    //'x' равно 1 (001)
    //'-' равно 0 (000)

    //все их комбинации являются суммами этих чисел, например.
    //'r-x' равно 5 (101)
    //'rw-' равно 6 (110)
    //'rwx' равно 7 (111)

    //В некоторых условиях восьмеричными разрешениями доступа гораздо проще оперировать. Большинство инструментов для перечисления
    //и изменения разрешений доступа позволяют задавать их как в восьмеричном, так и в символьном виде.


    //Команды для изменения разрешений доступа к файлам

    //Существует 3 известные команды для работы с владельцами объектов, группами и разрешениями доступа:
    //chown (ИЗМЕНИТЬ ВЛАДЕЛЬЦА): для установки нового владельца и/или группы для объекта
    //chgrp (ИЗМЕНИТЬ ГРУППУ): то же самое, но только для группы
    //chmod (ИЗМЕНИТЬ РЕЖИМ): установить новые разрешения доступа к файлу

    //Ниже вы можете найти примеры использования с пояснениями.
    //Точное значение каждой опции и другие примеры при необходимости можно найти на соответствующей странице 'man'.

    //Команда "chown" имеет ряд ограничений для "обычных" пользователей, ее полная мощность доступна только пользователю "root":
    //изменить только владельца объекта - может быть выполнена только пользователем root

    //изменить только группу объекта - может быть выполнена обычным пользователем,
    //но этот пользователь должен быть членом новой группы (иначе требуются привилегии root)

    //изменить владельца и группу объекта сразу - только для root

    //# Создаём файл, проверяем его владельца и группу
    //touch ~/chown.me
    //ls -l ~/chown.me

    //# Следующую команду можно выполнить только от пользователя root
    //chown operator:bin ~/chown.me

    //# Следующую команду можно выполнить только от члена группы "users"
    //chown :users ~/chown.me

    //# С опцией "-R" команда будет применена ко всей директории HOME:
    //chown -R :users ~


    //Команда "chgrp" похожа на "chmod", но более проста.
    //Она может изменить группу объекта, только если вы являетесь членом новой группы:

    //# Следующие команды приведут к идентичному результату
    //chown :users ~/chown.me
    //chgrp users ~/chown.me

    //# chgrp поддерживает рекурсивный режим "-R"
    //chgrp -R users ~


    //Команда "chmod" является самой сложной среди них. Она позволяет:

    //Установить точные разрешения сразу на определенный объект - для этого лучше использовать восьмеричную форму.
    //Добавить или отозвать права доступа к определенному объекту - это удобнее делать в символьном виде.
    //Его использование выглядит следующим образом:

    //# Создаём 2 объекта
    //mkdir ~/chmod.me.dir
    //touch ~/chmod.me.file

    //# Определяем права доступа
    //# Установим "rwxr-x--x", т.е. 751, на указанную директорию:
    //chmod 751 ~/chmod.me.dir

    //# Добавляем "r"-бит для прочих (others) и "w" для группы:
    //chmod g+w,o+r ~/chmod.me.dir

    //# Разрешаем владельцу делать что угодно с файлом
    //# Добавляем права на запись группе
    //# Отбираем права на чтение у прочих (others)
    //chmod u=rwx,g+w,o-r ~/chmod.me.dir

    //# Меняем права доступа для всего каталога
    //# Отнимаем все права у группы и прочих (others):
    //chmod -R go-rwx ~/chmod.me.dir






}
