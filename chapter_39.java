public class chapter_39 {
    //#39.1 Автоматизация тестирования: Gherkin: Теория

    //План урока
    //Поддержка автоматизации функционального тестирования
    //Gherkin синтаксис и инструменты
    //Gherkin подводные камни


    //Поддержка автоматизации функционального тестирования

    //Взаимодействие между командой автоматизации и другими членами команды

    //Автоматизация функционального тестирования - сложный процесс,
    //ответственность за который лежит на команде автоматизации функционального тестирования.
    //Их код понятен разработчикам и инженерам по автоматизированному тестированию,
    //а время от времени его делают самодокументируемым.
    //Тем не менее его сложно понять мануальным тестировщикам, аналитикам и представителям бизнеса.
    //С другой стороны, инженеры по автоматизации тестирования получают зарплату за написание кода, а не за описание того,
    //что реализовано в том или ином методе и какие именно функции приложения охватывает данный фрагмент автоматизации.

    //Еще более печальным фактом является то, что команда автоматизации тестирования
    //не всегда хорошо понимает требования и нуждается в помощи по их разъяснению и переносу в тестовые примеры.
    //Основным навыком команды является отличное кодирование, а вот способности к разработке тестов могут быть не столь высоки
    //(хотя исключения, конечно, встречаются),
    //либо у них просто нет времени на качественный дизайн тестов.

    //В результате мы имеем разрыв между кодом автоматизации функционального тестирования
    //и требованиями и не можем быть абсолютно уверены в хорошем покрытии тестами.

    //Команда мануальных тестировщиков могла бы помочь в устранении этого разрыва,
    //написав тесты для команды автоматизации, но тут возникает вопрос о формате тестов.
    //Чтобы сэкономить время команды автоматизации, правила здесь должны быть очень строгими.
    //По сути, команда ручного тестирования и команда автоматизации должны договариваться о каждой мелочи:
    //формате фраз, слов, данных, формулировке шагов и т.д.
    //Команда автоматизации не должна тратить время на то, чтобы вникать в формулировки,
    //тем более что в команде ручного тестирования работает несколько человек с разными подходами.

    //Конечно, в компании или на проекте люди могут договориться о формате ручного тестирования.
    //Правила формулировок можно задокументировать и сохранить в confluence,
    //а для отслеживания активности членов команды и следования этим правилам создать специальную роль.
    //Но все мы люди, и всегда есть шанс нарушить правила, повлиять на команду автоматизации и затормозить процесс тестирования.


    //Разработка на основе поведения (Behaviour Driven Development BDD)

    //Устранение разрывов между бизнесменами, членами команды и техническими командами
    //(включая команду автоматизации функционального тестирования)
    //может быть осуществлено с помощью так называемого процесса разработки на основе поведения (BDD behavior-driving development).
    //Он связан с процессом Agile и включает в себя следующие техники:

    //Взаимодействие внутри команды и ведение переговоров о реализации функционала с точки зрения бизнеса.

    //Реализация функциональности итеративно, для обеспечения ценности каждой функции в текущих рыночных условиях

    //Документирование процессов, особенностей системы, правил написания кода и
    //создания тестовых примеров для обеспечения единого понимания и согласия внутри команды.

    //Первые два пункта в обязательном порядке включены в Agile,
    //а вот для третьего был бы удобен некий универсальный формат документации и тестов.


    //Универсальный формат тест-кейсов

    //В учебнике вы прочитали об универсальном формате требований, который называется UML.
    //Использование универсальной нотации помогает аналитикам и другим членам команды
    //говорить на одном языке и понимать требования одинаково,
    //вне зависимости от компании или проекта.

    //Но тестовые случаи пишутся по-разному, несмотря на универсальные поля, обычно используемые для описания.
    //Существует множество систем управления тестами, подходов и правил.
    //Некоторые тестировщики предпочитают добавлять ожидаемый результат к каждому шагу.
    //Другие описывают только один ожидаемый результат в конце тестового случая.
    //Детализация шагов различна, формулировки могут отличаться от команды к команде.

    //Все это создает проблемы, включая общение с командой автоматизации и создание универсальных тест-кейсов,
    //понятных всем и подчиняющихся одним и тем же правилам.

    //А что, если у нас есть такой универсальный формат тест-кейсов и даже команды автоматизации принимают его как правило?


    //Gherkin синтаксис и инструменты

    //Формат Gherkin

    //Прежде чем перейти к обсуждению Gherkin, рассмотрим пример широко используемой функциональности - корзину в интернет-магазине:

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/GE4LWG5sc6NAT46v_cFqP_ZvjCjZACVVU.jpg

    //Помня о том, что наша гипотетическая команда практикует Agile с BDD,
    //давайте напишем пользовательскую историю об общей сумме, отображаемой на странице корзины:

    //Как покупатель, я хочу просматривать сумму заказа в корзине,
    //чтобы я мог узнать ее до оформления заказа.

    //Какие вопросы по этой истории потенциально может задать тестировщик?

    //Как подсчитывается сумма заказа? Это простая формула, или она зависит от условий заказчика?

    //Нужно ли выводить сумму заказа, если корзина пуста? Должно ли это быть $0 или ничего?

    //Следует ли окрашивать сумму заказа в специальный цвет при достижении некоторого порога?

    //Если да, то какое пороговое значение должно быть?


    //Чтобы покрыть эту историю, после получения ответа хотя бы на первый вопрос, мы можем создать первый тестовый пример:
    //Предварительные условия	    Открыта страница корзины
    //Шаги	                        Положить два продукта в корзину
    //Ожидаемый результат	        Order sum = price of the first product + price of the second product.

    //Но этот тест-кейс можно написать и по-другому:
    //Предварительные условия       Открыта страница корзины.
    //Шаги	                        Положить первый продукт в корзину. Положить второй продукт в корзину. Оценить результат
    //Ожидаемый результат           Сумма заказа равна сумме цен первого и второго товаров.

    //Или даже так:
    //Шаг 1	                        Открыть страницу корзины, первый товар положить в корзину
    //Ожидаемый результат           Товар в корзине
    //Шаг 2	                        Второй товар, также положить в корзину
    //Ожидаемый результат           Второй товар также находится в корзине, а сумма - это то, сколько стоят товары


    //Пришло время вспомнить об общепринятом формате тест-кейсов.

    //Given открыта страница корзины

    //When пользователь кладет в корзину товар 234 с количеством 2 и ценой 20

    //Then количество товаров в корзине равно 2

    //And сумма заказа равна 40

    //В приведенном выше универсальном формате используются четыре ключевых слова:
    //Given - предварительные условия теста.
    //When - шаг начинается с этого ключевого слова.
    //Then - ожидаемый результат предыдущих шагов.
    //And - если две строки должны начинаться с одних и тех же ключевых слов, вместо них можно использовать And.

    //Конструкция, которая должна быть использована в тест-кейсе, также соответствует правилам.
    //Given  - в страдательном залоге.
    //When - что происходит в системе, кто это делает.
    //Then - то является результатом шага (шагов) When.

    //Для покрытия повторяющихся шагов и проведения параметризации используется специальный формат:
    //Given открыта страница корзины
    //When пользователь помещает в корзину товар 234 с количеством <quantity> и ценой <price>
    //Then количество товаров в корзине составляет <quantity>
    //And сумма заказа равна <sum>

    //Примеры:
    //quantity	    price	    sum
    //1	            10	        10
    //2	            10.5	    21

    //Здесь параметрами являются <quantity>, <price> и <sum>.
    //В таблицу "Примеры" заносятся значения этих параметров.
    //Сколько строк в таблице, столько раз будет выполняться тест.


    //Взаимодействие с командой автоматизации функционального тестирования

    //Тесты в формате Gherkin не только универсальны и удобны.
    //Их основное применение - беспрепятственное встраивание тест-кейсов в автоматизацию.
    //Чтобы автоматизировать тест, приведенный выше, инженер по автоматизации тестирования пишет код:

    //@Then ("order price is equal to {sum}")
    //
    //public void getOrderSum (double sum) {
    //     Response response = new Response();
    //     Assert.assertEquals (
    //     sum, Double.parseDouble(response.getOrderSum() )
    //     )
    //}

    //Практически, код реализует шаг @Then, написанный на Gherkin (@Then здесь называется Annotation).
    //Аналогичные методы будут написаны для каждого шага Gherkin, а тест-кейсы будут выполняться автоматически.
    //Параметризация здесь реализована с помощью использования в коде $sum.
    //При каждом запуске теста в метод будет подставляться очередная сумма из таблицы Examples,
    //то же самое и с другими параметрами - они будут подставляться в соответствующие методы, аннотированные @Given и @When.


    //Инструменты для работы с Gherkin

    //Очевидно, что для обеспечения взаимодействия между тест-кейсами Gherkin и кодом автоматизации тест-кейсы
    //должны быть каким-то образом интегрированы в код.
    //Для этого существует несколько инструментов, наиболее популярными из которых являются  Cucumber и JBehave.

    //Это не инструмент в традиционном понимании.
    //Фактически, это библиотека, которая может быть включена в состав системы автоматизированного тестирования.
    //В результате инженер по автоматизации может использовать методы Cucumber в коде
    //и взаимодействовать с тест-кейсами, написанными мануальными тестировщиками.

    //Но от мануального тестировщика ожидаются некоторые начальные знания,
    //поскольку код Gherkin должен быть написан в той же рабочей среде.

    //В Cucumber вся функциональность, которую необходимо покрыть, разделяется на функции (Features).
    //В одной функции есть от одного до нескольких Сценариев (Scenarios), и ваш Gherkin case должен выглядеть следующим образом:

    //Feature: Страница "Корзина"
    //Scenario: Общая сумма в корзине
    //Given Открыта страница "Корзина"
    //When пользователь помещает в корзину товар 234 с количеством <quantity> и ценой <price>
    //Then количество товаров в корзине составляет <quantity>
    //And сумма заказа равна <sum>

    //Пример:

    //quantity	    price	    sum
    //1	            10	        10
    //2	            10.5	    21

    //Каждая функция сохраняется в файле функции (например, Cart.feature),
    //и файлы с вашими тестами должны быть сохранены вместе с системой автоматизации в одном проекте кода системы автоматизации.
    //Поэтому вы должны обладать перечисленными ниже навыками:

    //Умением работы со средами разработки, например, с IDEA.
    //Наличие практических знаний о системах контроля версий (например, Git).


    //Итог:
    //Gherkin - это хороший способ быть на одной волне с командой функциональной автоматизации.
    //Это стандарт для создания тест-кейсов, который используется многими командами.
    //Синтаксис Gherkin включает четыре основных ключевых слова, но для описания функций и сценариев,
    //а также некоторых сложных действий требуются дополнительные ключевые слова.

    //Для использования Gherkin мануальный тестировщик должен обладать специальными навыками.


    //Gherkin - подводные камни

    //Однако Gherkin не является панацеей.
    //Его неправильное использование может нарушить коммуникацию между командами,
    //мануальных тестироващиков и автоматизаторов, и привести к потере времени из-за дополнительных
    //безрезультатных взаимодействий и переговоров.
    //Поэтому в некоторых компаниях руководители предпочитают делегировать шаги по работе с Gherkin команде автоматизации,
    //чтобы предотвратить возможные проблемы.

    //Например, в связи с изменениями в проекте и сменой персонала шаги могут быть изменены до неузнаваемости,
    //и согласованность тестов нарушится.

    //В новом тесте формулировка может быть изменена, и этап сценария будет выглядеть так:

    //Feature: Страница "Корзина"
    //Scenario: Общая сумма в корзине
    //Given Открыта страница корзины
    //When пользователь помещает в корзину товар 234 с количеством <quantity> и ценой <price>
    //Then количество товаров в корзине составляет <quantity>
    //And сумма заказа становится равной <sum>

    //Пример:

    //quantity	    price	    sum
    //1	            10	        10
    //2	            10.5	    21


    //В результате был создан метод, написанный командой автоматизации, сигнатура которого по-прежнему
    //@Then ("order price is {sum}")

    //не будет работать, так как шаг в части Gherkin задается следующим образом
    //Then the order price becomes <sum>

    //С другой стороны, инженер по автоматизации может объединить
    //несколько шагов в один (так называемые составные шаги) и получить нечто подобное:

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/Swnpqo4PMP4ukkG-_Dr8k-X30Y2qajZMK.png
    //Два часто используемых шага оптимизированы и объединены в один составной шаг.

    //В этом случае автоматизация будет работать не так хорошо, поскольку теперь часть Gherkin и часть автоматизации отличаются.

    //Для предотвращения такой ситуации процесс взаимодействия между командами мануального и
    //автоматизированного тестирования должен быть отлаженным.


    //В обязательном порядке должны быть выполнены следующие шаги:

    //Принятые на переговорах правила должны неукоснительно соблюдаться.

    //В процессе перекрестного рецензирования должны участвовать как инженеры по ручному тестированию,
    //так и инженеры по автоматизации, проверяя работу друг друга.


    //Результаты урока

    //Итак, что же мы узнали о Gherkin?

    //Как часть BDD-процесса использование Gherkin для создания мануальных тест-кейсов -
    //хороший способ настроить взаимодействие между командами.
    //Но в этом случае мануальные тестировщики должны обладать определенными навыками.
    //Им необходимо неукоснительно соблюдать правила написания тест-кейсов,
    //а также учитывать процесс перекрестного рецензирования.
}
