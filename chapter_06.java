public class chapter_06 {
    //#06.1 Команды ОС Linux и файловая система: Теория

    //План урока
    //Место Linux в жизни тестировщика
    //Что представляют собой команды Linux и какова их структура
    //Как устроена файловая система и объекты Linux


    //Место Linux в жизни тестировщика
    //Linux — это надёжная серверная платформа

    //Linux — это Unix-подобная операционная система (ОС), чаще всего встречающаяся на серверах
    //(~ 70 % интернет-серверов работают на ОС Linux).
    //Её можно легко поставить и на персональный компьютер,
    //однако в этом секторе ОС Windows и macOS намного популярнее, чем Linux.
    //Давайте проясним, что такое сервер.
    //Это слово можно трактовать разными способами.

    //1 Аппаратное обеспечение ("железо"): мощный компьютер,
    //предназначенный для обработки запросов пользователей (например, от заказчиков и покупателей).
    //Не предназначен для обычного использования человеком, в отличие от рабочих станций,
    //ноутбуков и домашних компьютеров.

    //2 Программное обеспечение ("софт"): специальное приложение для обработки запросов от пользователей,
    //например серверы баз данных (такие, как Oracle и MySQL), веб-серверы (Apache, Nginx, IIS).

    //3 Сеть: компьютер, получающий и обрабатывающий внешние запросы в рамках модели сетевого
    //взаимодействия клиент-сервер.


    //В то же время «клиент» запрашивает информацию или услуги у сервера.

    //На одном аппаратном сервере может располагаться большое количество программных серверов.
    //Например, на одном компьютере одновременно может работать сервер баз данных, веб-сервер,
    //сервер электронной почты, сервер удалённого доступа и другое серверное программное обеспечение (ПО).
    //Одно серверное приложение может одновременно обрабатывать запросы от множества клиентов.

    //В этом учебнике мы используем термин «сервер» во всех возможных смыслах, упомянутых выше.

    //Linux часто устанавливается на выделенный сервер (аппаратный либо виртуальный)
    //и поддерживает множество серверного ПО.
    //Поскольку серверы не предназначены для каждодневного использования человеком,
    //во многих случаях у них отсутствуют следующие элементы:
    // - Графический интерфейс пользователя (GUI).
    // - Видеокарты и мониторы
    // - Периферийные устройства, такие как мыши, клавиатуры и т. п.
    // - Сотрудник, постоянно присутствующий рядом с компьютером и вручную обрабатывающий каждый входящий запрос

    //Вместо этого серверы управляются удалённо с помощью инструментов командной строки.
    //Благодаря этому их можно устанавливать в удалённых центрах
    //обработки данных и полноценно работать с ними даже
    //посредством низкоскоростного канала связи и при этом без ограничения требуемой функциональности.

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/sv6luBzKUAUVYBfW_Z-dQAHBq72wHYoRF.jpg
    //Пример интерфейса с командной строкой Linux.
    //На экран выведен список служб, запущенных в операционной системе.


    //Интерфейс командной строки (CLI)
    //Интерфейс командной строки выглядит на первый взгляд странно,
    //но он намного удобнее, чем может показаться.

    //Он позволяет:
    //Выполнять и видеть именно то, что вы хотите (и ничего более!)

    //Выполнять это намного быстрее, по сравнению с графическим интерфейсом пользователя.

    //Пример. Для перемещения файлов журнала (.log) из папки A в папку B в ОС Windows вам потребуется:
    //1) открыть проводник;
    //2) открыть папку A;
    //3) выбрать все нужные файлы;
    //4) «вырезать» их;
    //5) перейти в папку B;
    //6) вставить файлы.

    //Инструменты командной строки дают возможность сделать всё это намного быстрее в один шаг:
    //mv folderA/*.log folderB/

    //Командная строка позволяет пользователю быстро работать с множеством текстовых файлов
    //(таких как журналы - логи, logs).
    //Например: искать конкретные последовательности символов или файлы с этими последовательностями.
    //Если нам нужно найти все файлы, содержащие часть сообщения «fatal bug» (фатальный дефект),
    //в определённой директории и во всех вложенных директориях,
    //мы можем использовать лишь одну короткую команду:
    //grep -R -l "fatal bug" /specified/directory


    //Типичные задачи тестировщика в Linux
    //ОС Linux по большей части используется как серверная платформа для запуска разработанных
    //серверных приложений. Зачастую они являются критически важными,
    //поэтому их необходимо тщательно тестировать.
    //Для этого требуются определенные навыки работы с ОС Linux и с инструментами командной строки.

    //Всё это подразумевает следующие задачи:
    //Поиск нужных файлов журнала и сообщений об ошибках в них.
    //Получение информации о системной среде.
    //Отслеживание состояния, запуск, остановка и перезапуск процессов и служб.
    //Упаковка всех найденных данных в сжатый файл архива и отправка этого файла через сеть.

    //И также несколько более сложных задач:
    //Проверка работоспособности сетевого соединения и доступность портов.
    //Поиск неисправностей и выявление их первопричины.
    //(Редко и не требуется для новичков.) Развёртывание своего собственного тестового окружения
    //без привлечения DevOps-инженеров — у них всегда много дел и нет времени.


    //Другие причины изучать Linux

    //1 - К сожалению, многие тестировщики не знакомы с Linux.
    //Если у вас есть опыт работы с этой ОС, ваши навыки всегда будут востребованы
    //и вы сможете выполнять более интересные (и более ценимые!) задачи
    //(например, тестирование серверной части приложения), вместо того чтобы «просто нажимать кнопки».

    //2 - Знание устройства ОС Linux поможет в лучшем понимании внутренней работы программного обеспечения,
    //что весьма важно для инженеров по тестированию.

    //3 - В Linux предоставляется множество заранее установленных удобных инструментов
    //для поиска и устранения неисправностей, повышающих эффективность вашей работы.

    //4 - Linux схож со многими другими UNIX-подобными операционными системами. Поэтому по мере развития карьеры
    //вы сможете с успехом применять навыки работы с Linux в других ОС: macOS, IBM AIX и др.

    //5 - Основы работы ОС Linux и UNIX почти неизменны. Базовые команды наследованы с 80-х годов.
    //Изменения обычно происходят раз в 5–10 лет.
    //Поэтому если вы освоите их однажды, то сможете применять всю карьеру, лишь изредка освежая знания.

    //6 - То же касается и основ работы сетей.
    //Например, семейство протоколов TCP/IP v4 было представлено в 80-х и широко используется
    //по сей день — спустя 40 лет. Семейство протоколов IPv6 представлено в 1995 году и до сих
    //пор не получило широкого распространения.
    //Поэтому освоение работы с сетями — также отличная инвестиция.

    //7 - Если вы сможете преодолеть первоначальный страх перед тёмным терминалом (а вы сможете!),
    //то для вас в мире программного обеспечения больше не будет непреодолимо неведомого и невозможного.
    //Вы будете способны освоить почти любую технологию и с успехом работать с ней.


    //Linux — очень мощная операционная система, на которой работает множество критически важных приложений.
    //Их необходимо тщательно тестировать, что зачастую не выполняется в должной мере.


    //Команды Linux и их структура
    //Первое применение командной строки ОС Linux

    //Для выполнения примеров, показанных ниже, можно использовать этот онлайн-эмулятор.
    //https://bellard.org/jslinux/vm.html?url=alpine-x86.cfg&mem=192
    //Он хорошо работает с веб-браузерами Firefox и Google Chrome.

    //Чтобы выполнить команду, её необходимо напечатать со всеми опциями, а затем нажать Enter.

    //Если вы работаете с эмуляторами наподобие упомянутого выше,
    //то по завершении работы можно просто закрыть окно.
    //Подлежащие выполнению команды и их опции, приводимые ниже, выделяются другим шрифтом.
    //Ввод и запуск команд в эмуляторе показаны в видео.

    //Работа командной строки похожа на программу-робота в мессенджерах: сначала вы отправляете команду,
    //затем система отвечает (если команда корректна) или отображает сообщение об ошибке.

    //Попробуйте выполнить приведённые ниже команды в неизменном виде,
    //чтобы получить первоначальное представление о командах.
    //В следующем разделе мы отдельно обсудим структуру команд.
    //А пока наберите каждую команду в эмуляторе и нажмите Enter, чтобы увидеть результат.


    //1
    //Выводит сведения о текущем пользователе:
    //id

    //2
    //Выводит название ОС:
    //uname


    //Что такое команды с опциями, значениями и аргументами

    //Перед изучением и применением команд необходимо понять их структуру.

    //Простая команда UNIX с аргументами выглядит следующим образом:
    //команда [опции] [другие параметры]
    //(Квадратные скобки […] означают, что аргумент необязателен.)

    //Давайте обратимся к следующей конструкции:
    //egrep -i -r -l "fatal bug" /opt/app/logs

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/32GGC6yp78CRSAnH_mxv9KmEdQATF6X9C.png
    //Название команды: egrep; её аргументы: -i -r -l "fatal bug" /opt/app/logs.

    //Итак, можно сформулировать следующее:

    //Каждая конкретная команда предназначена для выполнения только одной операции.
    //Команда egrep служит для поиска указанных последовательностей символов в файлах и директориях,
    //также указанных с помощью аргументов.
    //Другие команды могут, например, показывать сведения об ОС или содержимое директории.
    //Трудно представить команду ОС Linux,
    //которая может выполнять совершенно разные задачи, такие как показывать время и перемещать файлы.

    //Опции указывают, как именно нужно выполнить эту операцию.
    //В показанном выше примере
    //опция -i означает, что поиск должен быть нечувствительным к регистру букв
    //(т. е. строки с «FATAL buG» также будут найдены);
    //опция -r — поиск в директориях (не только в отдельных файлах);
    //опция -l — выводить только названия файлов (без найденных строк файлов).

    //"Позиционные аргументы" определяют, какие именно объекты будут затронуты,
    //например, подстроки, входные файлы или директории, и т.д.

    //Опции и позиционные аргументы вместе именуются "аргументами", т.е. это все,
    //что следует за названием команды.

    //3
    //Показывает текущие дату и время:
    //date

    //4
    //Показывает встроенную справку по применению команды:
    //date --help

    //5
    //Показывает содержимое текущей директории:
    //ls

    //6
    //Показывает расширенные сведения о содержимом текущей директории, -l — это опция:
    //ls -l

    //Опции начинаются со знака '-' (так называемые короткие опции) и со знаков '--' (длинные опции).
    //Часто существует пара длинной и короткой опций, которые выполняют одну и ту же функцию.
    //Мы будем использовать короткие везде, где это возможно.


    //Структура команд: заключительная информация

    //Операции с короткими опциями (т. е. начинающиеся с одиночного '-')
    //обладают следующими удобными свойствами:

    //Порядок опций неважен.
    //Например, последовательность -l -a эквивалентна -a -l. Это справедливо и для длинных опций.

    //Если вы работаете только с короткими опциями без значений,
    //такими как -l и -a, то можете их соединить, упустив пробелы: -la или -al.

    //название_команды --help: выводит встроенную справку для команды;
    //эта опция работает почти для всех команд.

    //man название_команды: выводит соответствующее команде подробное руководство,
    //если оно установлено в системе.
    //Мы будем изучать команду man позже, в рамках практического раздела.

    //Не меняйте местами опции и параметры, указывающие месторасположение. Например:
    //Корректная последовательность:  ls -la /tmp
    //Некорректная (может сработать, но это не гарантированно): ls /tmp -la


    //Что следует запомнить, чтобы избежать ошибок:

    //Пробелы между названием команды, секцией опций и секцией с дальнейшими аргументами обязательны.
    //Т.е. можно выполнить "egrep -iRl что-то /some/where",
    //но"egrep -iRlчто-то /some/where" будет неверным.
    //Помните о пробелах в тех местах, где они необходимы всегда!

    //В мире UNIX всё является чувствительным к регистру букв.
    //Включая названия файлов, команд, опций и имена пользователей.
    //Например:
    ///tmp — такая директория существует, /TMP — такой директории нет.
    //Верное название команды — cat, а cAt — неверное (такой команды не существует).
    //Опции -l и -L будут иметь разное значение для одной и той же команды.
    //Существует пользователь root, но нет пользователя ROOT.


    //Итак, основные выводы следующие:
    //1. У команды могут быть аргументы: опции и другие параметры.
    //2. Опции могут следовать в любом порядке,
    //а короткие опции можно объединять: -i -R -l корректно преобразуется в -iRl.
    //3. Также бывают сложные случаи, но мы рассмотрим их позже.


    //Файловая система ОС Linux и объекты

    //Что такое '/'. Или пора забыть о 'C:\'

    //В отличие от ОС Windows, UNIX-подобные операционные системы, включая Linux,
    //чтобы указать точный путь к файлу или директории, не используют буквы, обозначающие диски.
    //Если у вас в ОС Windows есть всего один диск, то полный путь всех объектов (файлов и директорий)
    //начинается с 'C:\'. В мире UNIX путь каждого объекта начинается с '/'.
    //Этот элемент называется «корнем» (root), а вся файловая система подобна дереву.

    //Пример файловой системы в виде древовидной схемы:
    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/uw3RA62bSPct_5VJ_4_aPwjlUyTOpq9Ur.png

    //Забудьте о буквах накопителей — теперь все диски подключаются
    //(этот процесс также называется «монтированием»)
    //ко всей файловой структуре (начинающейся с '/') в виде вложенных директорий.

    //Если мы захотим отделить временные файлы и директории от остальной части файловой системы
    //(чтобы она не перегружалась лишними файлами), мы сможем подключить (смонтировать —mount)
    //отдельный диск к директории /tmp. директория /tmp в UNIX служит той же цели, что и C:\Temp в ОС Windows.
    //В реальном мире часто можно встретить ситуацию,
    //когда директория с журналами /var/log располагается на отдельном диске.


    //Директории Linux:
    //корневая директория отмечена розовым,
    //первый уровень файловой системы — голубым,
    //а третий — жёлтым (журнал, log) и зелёным (персональные директории каждого пользователя системы).
    //Поддиректории, созданные в системных директориях пользователей, отмечены фиолетовым.
    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/SjSOSeE3BJZZx7Jx_U9gDEUqzB1Vk7oAg.png

    //Таким образом, если у нас есть файл system.log во вложенной директории log директории/var,
    //то полный путь файла будет /var/log/system.log.
    //Символ '/' используется для разделения директорий в полном пути, как и символ '\' в ОС Windows.
    //Символ '/' также используется для разделения поддиректорий, подобно '\' в Windows.
    //Обратная косая черта не используется в именах объектов Linux.


    //Стандарт FHS: стандартная структура файловых систем

    //Большинство UNIX-подобных операционных систем следуют
    //правилам организации директорий первого и второго уровней, чтобы обеспечить взаимную совместимость.
    //Эти правила записаны в стандарте FHS(Filesystem Hierarchy Standard — стандарт иерархии файловой системы).
    //Опишем самые важные директории:

    ///etc: файлы конфигурации для большинства приложений и некоторых частей ОС

    ///home: как правило, используется для хранения домашних директорий пользователей,
    //например /home/ваше_имя_пользователя. Аналогично C:\Users в Windows.

    ///root: домашняя директория пользователя root
    //(это единственный пользователь-администратор во всех UNIX-подобных ОС).

    ///bin: большинство исполняемых файлов (например, программ) хранится здесь.
    //В современных версиях Linux директория /bin часто служит
    //так называемой символьной ссылкой на директорию /usr/bin, а не "настоящей" директорией.
    //Если кратко, любая операция, затрагивающая /bin/something будет фактически
    //выполняться на /usr/bin/что-нибудь.
    //О подробностях работы с символьными ссылками мы поговорим позже.

    ///sbin: похож на /bin, но хранит специальные исполняемые файлы,
    //служащие для конфигурации системы и обычно запускаемые только пользователем root.

    ///tmp: временные файлы ОС и приложений (аналог C:\Temp в ОС Windows).

    ///var: содержит различные файлы с кэшем системы, файлы журналов и файлы баз данных
    //(если сервер БД установлен).
    //Директория /var/log хранит файлы журналов системы и большинства приложений.

    ///usr: в настоящее время это главное место для приложений (исключая настройки, хранящиеся в /etc).
    //Например: /usr/bin содержит исполняемые файлы, /usr/lib — разделяемые библиотеки и т. д.


    //Абсолютный и относительный пути

    //Существует два способа доступа к файлу или директории с использованием их названий:
    //абсолютный и относительный путь.
    //Оба способа корректны. Выбор зависит от нескольких условий.

    //Абсолютный путь начинается с '/' и включает все промежуточные директории, в которых расположен объект.
    //Например, /home/jono/photos из приведённого выше рисунка.
    //Абсолютные пути чрезвычайно полезны, когда нужно указать точный путь.
    //Этот путь прекрасно работает, пока не сменится название соответствующего объекта
    //или пока объект не будет удалён.

    //Однако в некоторых случаях такой путь оказывается слишком длинным и с ним неудобно работать.
    //Тогда на помощь приходит относительный путь.

    //При работе с командной строкой Linux вы всегда находитесь в некоторой директории,
    //которая называется текущей рабочей директорией.
    //Она позволяет работать со своим содержимым, используя относительные пути. Это ускоряет работу.

    //Относительный путь к объекту строго зависит от текущей рабочей директории.
    //Более того, он начинается не со знака '/', а с вашей текущей рабочей директории.

    //Предположим, у нас есть объект с полным путём /home/user/docs/report.txt.
    //Давайте посмотрим на его относительный путь:
    //Если вы сейчас находитесь в директории /home/user, то относительный путь будет — docs/report.txt.
    //Это легко запомнить и понять, поскольку: /home/user + docs/report.txt = /home/user/docs/report.txt

    //Аналогично, если вы находитесь в директории /home, то относительный путь — user/docs/report.txt.
    //Снова: /home + user/docs/report.txt = /home/user/docs/report.txt.

    //Если вы в какой-нибудь другой директории /home/someone, то необходимо использовать две точки '..'
    //для перехода на один уровень выше: ../user/docs/report.txt.

    //Если вы в директории /tmp, то относительный путь будет — ../home/user/docs/report.txt.

    //Относительный путь полезен, когда нужно обратиться к объекту,
    //располагающемуся в вашей текущей рабочей директории или где-то поблизости.
    //Но он неотрывно связан с вашей текущей рабочей директорией.
    //При смене текущей рабочей директории изменится и относительный путь,
    //поэтому будьте внимательны при его использовании.

    //Работу с объектами файловой системы можно ускорить с помощью полезных конструкций: '..',
    //'.' (одна точка означает текущую директорию) и '~' (означает вашу домашнюю директорию).

    //Чтобы скопировать все файлы с названиями, заканчивающимися на .log, из родительской диретории
    //(т. е. директории на один уровень выше текущей) в директорию /tmp,
    //нужно выполнить следующую команду: cp ../*.log /tmp/
    //Подсказка: '*' для имен файлов означает "любой символ (или никакого)",
    //данный оператор (называемый подстановочным знаком -"wildcard"),
    //широко используется для работы с файлами и директориями.

    //Чтобы переместить те же файлы в текущую директорию:
    //mv ../*.log ./

    //Также стоит упомянуть: конструкцию '..' можно указать несколько раз.
    //Например, '../..' означает директорию, располагающуюся на два уровня выше.
    //К примеру, если вы находитесь в /home/user/docs, то '../..' означает /home.

    //Чтобы скопировать все файлы *.log из директории /tmp  в свою домашнюю директорию: cp /tmp/*.log ~

    //Обратите внимание: по умолчанию директория /tmp и домашняя директория — единственные,
    //где обычный пользователь (т. е. не администратор) может создавать и изменять объекты.
    //Такие ограничения настраивают, чтобы обычные пользователи не могли изменять общесистемные элементы:
    //настройки, данные и программное обеспечение.


    //Основные команды для работы с файловой системой

    //Давайте познакомимся с командами ОС Linux, важными для эффективной работы с файловой системой:

    //7
    //Отображение текущей рабочей директории; для этого ей не нужны опции:
    //pwd.
    //Pwd расшифровывается как print working directory (отобразить рабочую директорию).

    //8
    //Смена текущей рабочей директории:
    //cd
    //Расшифровывается как change directory (сменить директорию).
    //Применение cd без опций вернёт вас в домашнюю директорию.
    //cd /некий/путь — для перехода к директории /некий/путь.

    //5,6
    //ls: отображение содержимого директории или сведений о файле.
    //Расшифровывается как LiSt (список, перечень).
    //ls (без опций) показывает содержимое текущей рабочей директории.
    //ls -l (знак минуса и буква L в нижнем регистре) — то же самое плюс дополнительные сведения о содержимом.
    //ls -l /путь/к/директории — показывает расширенную информацию о содержимом директории /путь/к/директории.
    //ls -l /путь/к/файлу — показывает расширенные сведения об указанном файле.
    //ls -l -d /путь/к/директории— показывает расширенные сведения о самой директории (НЕ о ее содержимом).

    //9
    //Вывод содержимого файла; не работает с директориями:
    //cat
    //Например:
    //cat /etc/group — показывает все настройки групп операционной системы.
    //cat /etc/passwd — показывает всех пользователей ОС.

    //cp: копирование файла или директории.
    //Если копируемый объект — директория, то необходимо использовать опцию -r.
    //Если целевой файл уже существует, то его содержимое будет перезаписано.

    //mv: перемещение (или переименование) файла или директории.
    //Если целевой файл уже существует, то его содержимое будет перезаписано.

    //egrep: поиск элементов в файле или директории по указанном шаблону.
    //Варианты: egrep какой-то_шаблон /некий/файл (для файлов),
    //например: egrep root /etc/group;
    //egrep -r какой-то_шаблон /некая/директория (для директорий),
    //например: egrep -r root /tmp.


    //Для закрепления предыдущего материала выполните следующее упражнение, используя терминал:

    //10
    //Определите свою текущую директорию (pwd).
    //При работе с командной строкой Linux вы всегда находитесь в некоторой директории,
    //которая называется текущей рабочей директорией.
    //Ее можно сменить командой cd.

    //11
    //Отобразите содержимое своей текущей директории (список вложенных  поддиректорий и файлов).
    //Подобным образом вы открываете папку в проводнике Windows и видите её содержимое:
    //ls -la

    //12
    //То же, что и в предыдущем задании, но только для директории /tmp,
    //которую следует явно указать в командной строке:
    //ls -la /tmp

    //13
    //Отобразите расширенные сведения о конкретном файле /etc/passwd,
    //такие, как владелец, размер и дата последнего изменения:
    //ls -l /etc/passwd

    //14
    //Смените текущую рабочую директорию на "/etc":
    //cd /etc

    //15
    //Проверьте, действительно ли вы теперь в директории "/etc":
    //pwd

    //16
    //Отобразите содержимое директории /etc (будет выведено большое количество строк):
    //ls -a -l

    //17
    //Вернитесь на один уровень выше:
    //cd ..

    //https://imgur.com/a/KRLyDyG


    //Результаты урока

    //Итак, что мы узнали из основ Linux?

    //Операционная система Linux часто используется в серверах.

    //Термин «сервер» может означать аппаратную часть, программную и логическую,
    //которые служат для обработки входящих запросов пользователей.

    //Linux — довольно специфичная ОС со значительными отличиями от ОС Windows.
    //Здесь необходимо работать с интерфейсом командной строки.

    //Не так много тестировщиков хорошо освоило ОС Linux,
    //поэтому это прекрасная конкурентная возможность для вас.

    //Команды ОС Linux обладают своей собственной структурой с опциями, значениями и другими аргументами.
    //Аргументы не всегда применяются, но всё же чаще команды используются с ними.

    //В ОС Linux нет букв дисков, таких как 'C:\'.
    //Вместо них у нас есть бездисковая древовидная структура, начинающаяся с '/'.
    //Тот же знак '/' используется для разделения директорий в путях объектов.

    //Также можно использовать относительный путь вместо абсолютного,
    //чтобы обратиться к объектам из текущей рабочей директории.

    //Вы уже знаете самые важные команды для работы с файловой системой:
    //pwd (показать текущую рабочую директорию),
    //cd (сменить ее)
    //ls (отобразить содержимое директории или расширенные сведения о файле).
}
