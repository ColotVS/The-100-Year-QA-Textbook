public class chapter_28 {
    //#28.1 Дефекты: Теория

    //План урока
    //Что такое дефект и почему нужны отчёты о дефектах?
    //Жизненный цикл дефекта
    //Как составить ХОРОШИЙ отчёт о дефекте
    //Система управления дефектами


    //Что такое дефект?
    //Дефект, ошибка, сбой, баг или бага — это случай, в котором программное обеспечение функционирует не так, как задумано,
    //или когда недочёт есть в самой задумке (требованиях, архитектуре или проекте) и это обнаруживается при тестировании.

    //Существуют различные типы дефектов, по-разному влияющих на программное обеспечение (ПО).
    //Джеймс Бах сформулировал часто используемое определение термина «дефект».
    //По его определению - это «Всё, что негативно влияет на качество».
    //Более распространенное определение:
    //дефект — это расхождение между ожидаемым (определенным в требованиях) и фактическим поведением.
    //Ниже приведено несколько рекомендаций по поиску дефектов.

    //Использование требований: тестировщики часто находят дефекты, сравнивая поведение приложения с описанным в требованиях.
    //Любое отклонение от того, что задумано на этапе требований, может быть проявлением дефекта.

    //Проверка единообразия: многие дефекты обнаруживаются в ходе проверки единообразия элементов ПО
    //(на всех страницах или всех функциональных составляющих).
    //Примеры. Все ли кнопки одного цвета? Единообразны ли заголовки страниц? Применены ли лучшие способы навигации?

    //Тестирование граничных значений: этот метод также называют анализом граничных значений.
    //Попробуйте ввести в поля данных значения, превышающие максимальные или находящиеся ниже минимальных.
    //Попробуйте ввести символ в поле, предназначенное для чисел, и наоборот.
    //Некорректные значения, непредусмотренные в коде программы,
    //могут привести к аварийному завершению или странным сообщениям об ошибке.
    //Неполноценная обработка некорректных входных данных снижает надёжность ПО с точки зрения пользователя.


    //Почему нужны отчёты о дефектах?

    //1 - Недопонимание или недостаток взаимодействия на любой стадии разработки ПО могут привести к тому,
    //что некоторые дефекты останутся незамеченными и (или) незарегистрированными.

    //2 - Людям свойственно ошибаться, поэтому идеального кода никогда не бывает.
    //Ожидать, что тестирование пройдёт без обнаружения дефектов, нереалистично.

    //3 - Графики работ нередко составляются людьми, никогда не занимавшимися разработкой или тестированием.
    //Поэтому появляются нереалистичные сроки выпуска продукта или выделяется недостаточное количество сотрудников.
    //В результате оказывается недостаточно времени для надлежащего изучения, разработки и тестирования всего объёма функций.
    //Также бывает, что в набор функций продукта вносятся изменения уже на поздних
    //стадиях разработки и поэтому остаётся мало времени для написания соответствующего изменениям кода и его тестирования.

    //4 - Из-за неудовлетворительного планирования, непонимания используемых технологий или недостаточного взаимодействия
    //— в требования, архитектуру или проект вкрадывается ошибочная логика.

    //5 - Программисты неидеальны, а технологии постоянно меняются.
    //Команды разработчиков могут использовать новые инструменты, которые ими до конца не изучены.
    //Это может привести к некачественному коду, провоцирующему дефекты.

    //6 - Если система управления кодом применяется некорректно
    //(например, не применяется кросс-ревью кода) или если отсутствует надлежащее управление версиями кода,
    //то это может привести к появлению множества дефектов в приложении.

    //7 - Команды тестирования работают по-разному.
    //В некоторых компаниях тестированию уделяется недостаточно внимания
    //или у них не получается нанять квалифицированных тестировщиков.
    //Это может служить причиной большого количества дефектов в продукте.


    //Распространённые виды дефектов

    //Далее мы опишем некоторые типы дефектов.
    //Это не полный перечень, рассматриваются только самые часто встречающиеся.
    //По уровню дефекты разделяются на следующие группы:

    //Дефекты на уровне отдельных модулей: обычно появляются в процессе написания кода.
    //Для их выявления нужно тестировать основные модули программ: классы, методы или подпрограммы.
    //Отсутствие модульного тестирования на этапе кодирования значительно осложняет работу тестировщиков.

    //Дефекты уровня интеграции: обычно выявляются в ходе комплексного тестирования приложения
    //или при тестировании взаимодействия между приложениями.
    //Такие ошибки трудно локализовать, так как это требует взаимодействия нескольких команд.


    //Далее описаны некоторые типы дефектов:

    //Функциональные дефекты: проявляются в тех случаях, когда приложение работает не так, как ожидается.
    //Пример: при нажатии кнопки ожидаемого действия не происходит.

    //Дефект удобства использования: дефекты, влияющие на работу пользователя или усложняющие использование ПО.
    //Например, ситуации, когда шрифт слишком мал и поэтому нечитаем, или когда отсутствует единообразие между экранами приложения.

    //Дефекты производительности: этот тип связан со временем реакции или высоким потреблением памяти.
    //Порой такие дефекты очень трудно обнаружить — в таких случаях требуются специальные методы тестирования.
    //В крупных компаниях тестированием производительности занимаются специальные команды.

    //Дефекты безопасности: учитывая сегодняшнее распространение хакерских атак, этот тип дефектов часто получает высокий приоритет.
    //Такие дефекты могут привести к судебному преследованию компании, повреждению данных или шантажу.
    //Они могут позволить посторонним лицам получить доступ к конфиденциальным данным.

    //Дефекты совместимости: выявляются в ходе каких-либо преобразований.
    //Например, при обновлении аппаратных или программных систем.
    //Новое аппаратное или программное обеспечение может оказаться несовместимым с существующим кодом.


    //Жизненный цикл дефекта

    //Жизненный цикл дефекта — процесс, через который проходит дефект от момента обнаружения до устранения.
    //Отчёт о дефекте — документ, обновляемый по мере развития ситуации.
    //Статусы этого документа: от «создан» до «закрыт».
    //В различных компаниях жизненный цикл дефекта организуется по-разному, но есть общие аспекты.

    //На рисунке ниже показан жизненный цикл дефекта.

    //Каждый работодатель настраивает жизненный цикл дефекта по-своему.
    //Многие стадии будут совпадать с показанными на схеме ниже, однако возможны и отличия:
    //другие названия, другое количество или состав.
    //Обязательно изучите жизненный цикл дефекта, принятый на вашем месте работы.
    //Также возможны различия в назначаемых ответственных лицах.

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/sjYd4279BzvutaQ5_LaqNt4Z_wMsIevzc.png

    //Давайте посмотрим на каждую стадию процесса и значение стадий в жизненном цикле дефекта.
    //Напоминание: отчёты о дефектах НИКОГДА не удаляются — только закрываются.

    //1 - Новый (New): отчёт о дефекте создан, зарегистрирован и опубликован.

    //2 - Назначен (Assigned): назначено лицо, ответственное за исправление дефекта
    //(в разных компаниях назначают различных сотрудников).
    //Вероятно, будет возможно назначить отчёт самому разработчику, или руководителю разработки,
    //который назначит отчёт специалисту, который лучше других знаком с соответствующим фрагментом кода.

    //3 - Открыт (Open): разработчик начал анализ дефекта и его исправление.

    //4 - Исправлен (Fixed): разработчик внёс необходимые исправления в код, проверил их и передал на тестирование.
    //Статус означает, что группа по обеспечению качества может принимать эстафету по работе с отчётом о дефекте.

    //5 - На повторном тестировании (Retest): тестировщик снова запускает тест-кейс (или несколько тестов),
    //чтобы проверить, исправлен ли дефект.

    //6 - Открыт повторно (Reopen): повторное тестирование выявило, что дефект по-прежнему присутствует в продукте.
    //Дефект начинает свой путь по жизненному циклу заново.

    //7 - Отсрочен (Deferred): дефект будет исправлен в следующих выпусках.

    //8 - Отклонён (Rejected): Дефект может быть отклонён по множеству причин.
    //Например, если по мнению разработчика дефект отсутствует, или если не получается воспроизвести,
    //или обнаружены проблемы с условиями, в которых проводилось тестирование.


    //Некоторые причины приведены ниже:

    //1 - Повтор (Duplicate): если дефект зарегистрирован дважды,
    //или если два дефекта относятся к одному и тому же пути выполнения кода.

    //2 - Закрыт (Closed): после исправления дефекта отчёт о дефекте закрывают.
    //Закрыть отчёт может как тестировщик, так и другой член команды.

    //3 - Не является дефектом / Предложение по улучшению (Not a bug/Enhancement):
    //если исследование выявило проблемы с процессом тестирования или тестовым окружением, или неверное толкование требований.

    //4 - Требуется дополнительная информация (More info needed): Причина указывает на то, что разработчику,
    //для воспроизведения дефекта, необходимо больше информации, такой как записи журналов, шагов, скриншотов и другой информации


    //


}
