public class chapter_28 {
    //#28.1 Дефекты: Теория

    //План урока
    //Что такое дефект и почему нужны отчёты о дефектах?
    //Жизненный цикл дефекта
    //Как составить ХОРОШИЙ отчёт о дефекте
    //Система управления дефектами


    //Что такое дефект?
    //Дефект, ошибка, сбой, баг или бага — это случай, в котором программное обеспечение функционирует не так, как задумано,
    //или когда недочёт есть в самой задумке (требованиях, архитектуре или проекте) и это обнаруживается при тестировании.

    //Существуют различные типы дефектов, по-разному влияющих на программное обеспечение (ПО).
    //Джеймс Бах сформулировал часто используемое определение термина «дефект».
    //По его определению - это «Всё, что негативно влияет на качество».
    //Более распространенное определение:
    //дефект — это расхождение между ожидаемым (определенным в требованиях) и фактическим поведением.
    //Ниже приведено несколько рекомендаций по поиску дефектов.

    //Использование требований: тестировщики часто находят дефекты, сравнивая поведение приложения с описанным в требованиях.
    //Любое отклонение от того, что задумано на этапе требований, может быть проявлением дефекта.

    //Проверка единообразия: многие дефекты обнаруживаются в ходе проверки единообразия элементов ПО
    //(на всех страницах или всех функциональных составляющих).
    //Примеры. Все ли кнопки одного цвета? Единообразны ли заголовки страниц? Применены ли лучшие способы навигации?

    //Тестирование граничных значений: этот метод также называют анализом граничных значений.
    //Попробуйте ввести в поля данных значения, превышающие максимальные или находящиеся ниже минимальных.
    //Попробуйте ввести символ в поле, предназначенное для чисел, и наоборот.
    //Некорректные значения, непредусмотренные в коде программы,
    //могут привести к аварийному завершению или странным сообщениям об ошибке.
    //Неполноценная обработка некорректных входных данных снижает надёжность ПО с точки зрения пользователя.


    //Почему нужны отчёты о дефектах?

    //1 - Недопонимание или недостаток взаимодействия на любой стадии разработки ПО могут привести к тому,
    //что некоторые дефекты останутся незамеченными и (или) незарегистрированными.

    //2 - Людям свойственно ошибаться, поэтому идеального кода никогда не бывает.
    //Ожидать, что тестирование пройдёт без обнаружения дефектов, нереалистично.

    //3 - Графики работ нередко составляются людьми, никогда не занимавшимися разработкой или тестированием.
    //Поэтому появляются нереалистичные сроки выпуска продукта или выделяется недостаточное количество сотрудников.
    //В результате оказывается недостаточно времени для надлежащего изучения, разработки и тестирования всего объёма функций.
    //Также бывает, что в набор функций продукта вносятся изменения уже на поздних
    //стадиях разработки и поэтому остаётся мало времени для написания соответствующего изменениям кода и его тестирования.

    //4 - Из-за неудовлетворительного планирования, непонимания используемых технологий или недостаточного взаимодействия
    //— в требования, архитектуру или проект вкрадывается ошибочная логика.

    //5 - Программисты неидеальны, а технологии постоянно меняются.
    //Команды разработчиков могут использовать новые инструменты, которые ими до конца не изучены.
    //Это может привести к некачественному коду, провоцирующему дефекты.

    //6 - Если система управления кодом применяется некорректно
    //(например, не применяется кросс-ревью кода) или если отсутствует надлежащее управление версиями кода,
    //то это может привести к появлению множества дефектов в приложении.

    //7 - Команды тестирования работают по-разному.
    //В некоторых компаниях тестированию уделяется недостаточно внимания
    //или у них не получается нанять квалифицированных тестировщиков.
    //Это может служить причиной большого количества дефектов в продукте.


    //Распространённые виды дефектов

    //Далее мы опишем некоторые типы дефектов.
    //Это не полный перечень, рассматриваются только самые часто встречающиеся.
    //По уровню дефекты разделяются на следующие группы:

    //Дефекты на уровне отдельных модулей: обычно появляются в процессе написания кода.
    //Для их выявления нужно тестировать основные модули программ: классы, методы или подпрограммы.
    //Отсутствие модульного тестирования на этапе кодирования значительно осложняет работу тестировщиков.

    //Дефекты уровня интеграции: обычно выявляются в ходе комплексного тестирования приложения
    //или при тестировании взаимодействия между приложениями.
    //Такие ошибки трудно локализовать, так как это требует взаимодействия нескольких команд.


    //Далее описаны некоторые типы дефектов:

    //Функциональные дефекты: проявляются в тех случаях, когда приложение работает не так, как ожидается.
    //Пример: при нажатии кнопки ожидаемого действия не происходит.

    //Дефект удобства использования: дефекты, влияющие на работу пользователя или усложняющие использование ПО.
    //Например, ситуации, когда шрифт слишком мал и поэтому нечитаем, или когда отсутствует единообразие между экранами приложения.

    //Дефекты производительности: этот тип связан со временем реакции или высоким потреблением памяти.
    //Порой такие дефекты очень трудно обнаружить — в таких случаях требуются специальные методы тестирования.
    //В крупных компаниях тестированием производительности занимаются специальные команды.

    //Дефекты безопасности: учитывая сегодняшнее распространение хакерских атак, этот тип дефектов часто получает высокий приоритет.
    //Такие дефекты могут привести к судебному преследованию компании, повреждению данных или шантажу.
    //Они могут позволить посторонним лицам получить доступ к конфиденциальным данным.

    //Дефекты совместимости: выявляются в ходе каких-либо преобразований.
    //Например, при обновлении аппаратных или программных систем.
    //Новое аппаратное или программное обеспечение может оказаться несовместимым с существующим кодом.


    //Жизненный цикл дефекта

    //Жизненный цикл дефекта — процесс, через который проходит дефект от момента обнаружения до устранения.
    //Отчёт о дефекте — документ, обновляемый по мере развития ситуации.
    //Статусы этого документа: от «создан» до «закрыт».
    //В различных компаниях жизненный цикл дефекта организуется по-разному, но есть общие аспекты.

    //На рисунке ниже показан жизненный цикл дефекта.

    //Каждый работодатель настраивает жизненный цикл дефекта по-своему.
    //Многие стадии будут совпадать с показанными на схеме ниже, однако возможны и отличия:
    //другие названия, другое количество или состав.
    //Обязательно изучите жизненный цикл дефекта, принятый на вашем месте работы.
    //Также возможны различия в назначаемых ответственных лицах.

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/sjYd4279BzvutaQ5_LaqNt4Z_wMsIevzc.png

    //Давайте посмотрим на каждую стадию процесса и значение стадий в жизненном цикле дефекта.
    //Напоминание: отчёты о дефектах НИКОГДА не удаляются — только закрываются.

    //1 - Новый (New): отчёт о дефекте создан, зарегистрирован и опубликован.

    //2 - Назначен (Assigned): назначено лицо, ответственное за исправление дефекта
    //(в разных компаниях назначают различных сотрудников).
    //Вероятно, будет возможно назначить отчёт самому разработчику, или руководителю разработки,
    //который назначит отчёт специалисту, который лучше других знаком с соответствующим фрагментом кода.

    //3 - Открыт (Open): разработчик начал анализ дефекта и его исправление.

    //4 - Исправлен (Fixed): разработчик внёс необходимые исправления в код, проверил их и передал на тестирование.
    //Статус означает, что группа по обеспечению качества может принимать эстафету по работе с отчётом о дефекте.

    //5 - На повторном тестировании (Retest): тестировщик снова запускает тест-кейс (или несколько тестов),
    //чтобы проверить, исправлен ли дефект.

    //6 - Открыт повторно (Reopen): повторное тестирование выявило, что дефект по-прежнему присутствует в продукте.
    //Дефект начинает свой путь по жизненному циклу заново.

    //7 - Отсрочен (Deferred): дефект будет исправлен в следующих выпусках.

    //8 - Отклонён (Rejected): Дефект может быть отклонён по множеству причин.
    //Например, если по мнению разработчика дефект отсутствует, или если не получается воспроизвести,
    //или обнаружены проблемы с условиями, в которых проводилось тестирование.


    //Некоторые причины приведены ниже:

    //1 - Повтор (Duplicate): если дефект зарегистрирован дважды,
    //или если два дефекта относятся к одному и тому же пути выполнения кода.

    //2 - Закрыт (Closed): после исправления дефекта отчёт о дефекте закрывают.
    //Закрыть отчёт может как тестировщик, так и другой член команды.

    //3 - Не является дефектом / Предложение по улучшению (Not a bug/Enhancement):
    //если исследование выявило проблемы с процессом тестирования или тестовым окружением, или неверное толкование требований.

    //4 - Требуется дополнительная информация (More info needed): Причина указывает на то, что разработчику,
    //для воспроизведения дефекта, необходимо больше информации, такой как записи журналов, шагов, скриншотов и другой информации


    //Итог:
    //Работу тестировщиков можно облегчить, если качественно документировать жизненный цикл дефекта
    //и если вся команда будет понимать значение каждого статуса дефекта.
    //Благодаря документированию все члены команды будут знать о своей ответственности за каждый дефект и его текущий статус.

    //Каждое изменение статуса должно обязательно фиксироваться.
    //Некоторые сотрудники будут сопротивляться ведению документов,
    //но внедрение подробного документирования значительно облегчает работу тем, кто ответственен за дефект.

    //Статус в системе отслеживания дефектов должен отражать актуальную стадию жизненного цикла дефекта.
    //Некорректные данные о дефекте могут привести к большому объёму ненужной работы.


    //Как составить ХОРОШИЙ отчёт о дефекте

    //Одним из самых важных навыков тестировщика является написание хороших отчётов о дефекте.
    //Найти дефект — это только первый этап процесса.
    //Если разработчики не могут воспроизвести найденный вами дефект, то их ждёт целый лабиринт в попытке исправить ошибку.
    //Программа отслеживания дефектов должна предусматривать широкий ряд обязательных полей,
    //чтобы отчёты тестировщиков содержали полные сведения о найденных дефектах.
    //Тестировщики, в свою очередь, должны оттачивать навыки описания.

    //Составить ХОРОШИЙ отчёт о дефекте может помочь следование следующим рекомендациям:

    //1 - Используйте содержательный заголовок.

    //2 - Составьте подробное описание.

    //3 - Перечислите все шаги, необходимые для воспроизведения дефекта.

    //4 - Опишите ожидаемые результаты.

    //5 - Опишите фактически полученные результаты.

    //6 - Прикрепите информативное свидетельство (или документ) проявления дефекта.

    //Хороший отчёт о дефекте должен содержать:

    //Заголовок: заголовок — это начало начал.
    //Заголовок должен быть ясным и информативным, чтобы с первого взгляда было понятно, о чём речь.
    //Пример: На Экране 1 отображается сообщение об ошибке «Плохое значение» при введении значения больше 10 в поле объёма заказа.

    //Требование: свяжите отчёт с требованием, описывающим функцию, которую касается дефект.

    //Приоритет: приоритет показывает, насколько срочно необходимо исправить дефект. Мы поговорим об этом позже.

    //Критичность: степень критичности, присвоенная дефекту, исходя из тяжести его влияния.
    //Критичность проблемы отражает силу влияния на функции и работу продукта.
    //Позже мы обсудим критичность подробнее.

    //Описание: постарайтесь составить чёткое и лаконичное описание.
    //Умение точно и сжато описывать проблему приходит с практикой.
    //Помните: может быть так, что читающий ваше описание никогда не видел соответствующую часть приложения.
    //Опишите суть и укажите все сведения, которые могут помочь другим командам в поиске и устранении неисправностей.
    //Пример. Для поля объёма заказа Экрана 1 требования устанавливают допустимые значения 1–100.
    //Когда я ввожу 10, выходит сообщение о непредвиденной ошибке.

    //Предварительные условия: требуемое состояние окружения и тестовых данных или учётные данные пользователя для входа в систему.
    //Всё необходимое для воспроизведения дефекта.

    //Шаги для воспроизведения: точное пошаговое описание действий, приведших к обнаружению дефекта.
    //Например: перечень нажатых клавиш, снимки экранов, видео или файлы с данными.
    //Перед отправкой отчёта обязательно проверьте описываемые шаги, выполнив их ещё раз.
    //Укажите, воспроизводится ли дефект, проявляется ли он каждый раз или время от времени или проявился лишь однажды.

    //Ожидаемые результаты: чётко опишите, какое поведение приложения ожидалось и чем фактическое поведение отличается от ожидаемого.
    //Это поможет избежать недопонимания и даст разработчику ясную картину того, что именно прошло не так.
    //Пример. В требованиях указывается, что для поля объёма заказа корректными значениями являются 1–100.
    //Когда я ввожу 100, сообщение об ошибке НЕ должно появляться.

    //Фактические результаты: при необходимости прикрепите снимок экрана.
    //Фактический результат может включаться в заголовок или описание,
    //но хорошей практикой является добавление отдельного раздела.

    //Статус: значения этого поля для каждой из стадий см. в разделе, посвящённом жизненному циклу дефекта.

    //Назначено: в различных случаях ответственное за работу с дефектом лицо может назначаться как руководителем разработчиков,
    //так и тестировщиком. Не оставляйте дефект без назначенного ответственного лица.
    //Из-за этого дефект может оказаться упущенным из виду и, соответственно, неисправленным.
    //Обязательно укажите цели назначения.

    //Дата: автоматически заполняется программным инструментом, используемым для открытия отчёта о дефекте.

    //Версия: если тестировщик одновременно работает над несколькими проектами, то важно убедиться,
    //что дефект отнесён к верному проекту и верной части проекта, а также что указана верная версия ПО.
    //Если эти сведения указаны неверно, то разработчики могут отправиться по ложному следу. Они точно НЕ обрадуются этому!


    //Дополнительная информация, которая может понадобиться в отчёте о дефекте.
    //Её можно включить в описание или предварительные условия.

    //Сведения о платформе: любая информация об окружении поможет разработчикам в исследовании дефекта.
    //Какой тип смартфона вы использовали? Какая операционная система работала на смартфоне? Какая модель смартфона?
    //Веб-браузер какой версии вы использовали? Полезны любые подробные данные.

    //Прикреплённые визуальные материалы: добавить вспомогательный материал – всегда хорошая идея.
    //Даже если вам кажется, что материалов слишком много.
    //Это могут быть снимки экрана, видеофайлы, содержимое баз данных или файлы журналов.
    //Часто разработчики первым делом смотрят на такие вспомогательные материалы, а уже затем — на текстовое описание.

    //Метки и ссылки: системы управления дефектами позволяют использовать метки.
    //Это короткие ключевые слова, помогающие находить дефекты, которые каким-либо образом связаны между собой.
    //Также можно включить ссылки на другие дефекты, тест-кейсы или требования.


    //Итог:
    //Соблюдение этих рекомендаций поможет составить хороший отчёт о дефекте.
    //В случае сомнений касательно качества вашего отчёта попросите отправить вам отзыв.
    //Разработчики с радостью расскажут, что им не хватает и что им необходимо.


    //Подробнее о критичности

    //Степень критичности отражает силу влияния дефекта на функционирование приложения.
    //По степени критичности дефекты разделяются на следующие типы:
    //блокирующее препятствие, критический, серьёзный, средний,
    //несущественный, или с незначительным влиянием, и «Неплохо бы исправить».
    //В каждой компании могут быть свои категории критичности.

    //Блокирующее препятствие: такая степень назначается, когда дефект оказывает тяжёлое или катастрофическое
    //влияние на способность приложения функционировать.
    //Таким дефектам назначается самый высокий приоритет,
    //поскольку их необходимо устранить так скоро, насколько это только возможно.
    //Пример: невозможность выполнения тест-кейса из-за системной ошибки.

    //Критический: этот тип дефектов относится к случаям, когда важные функции приложения не работают корректно,
    //но пользователи всё равно могут получить нужные им данные или выполнить нужные действия.
    //Пример. Ситуация, когда предусмотрено два способа создания пользователя, но один из них не работает.
    //Пользователи по-прежнему могут выполнить нужные им действия, но предпочитаемый способ не функционирует.

    //Серьёзный: такие дефекты оказывают значительное влияние на работу приложения.
    //Это может быть медленная работа приложения, высокое потребление ресурсов или потеря данных.
    //Серьёзным дефектам назначается высокий приоритет, чтобы их могли исправить как можно быстрее.
    //Пример. Пользователи не могут создавать отчёты или скачивать справки о транзакциях,
    //но они по-прежнему видят сведения на экране, поэтому у них есть нужная информация, но данные на экране приложения намного
    //неудобнее использовать по сравнению с данными, сохранёнными в файле или распечатанными на бумаге.

    //Средний: эта степень обычно применяется по умолчанию. Такие дефекты не оказывают сильного влияния.
    //Какая-то часть приложения может быть некорректна, но это не является приоритетом для текущего выпуска.
    //В таких случаях, как правило, назначают средний приоритет.
    //Пример: сообщение об ошибке недостаточно информативно.

    //Несущественный: несущественные дефекты — это элементы, которые имеют небольшое влияние на функционирование приложения.
    //Таким дефектам обычно присваивается низкий приоритет.
    //Примеры: помарки во внешнем виде или орфографические ошибки.

    //«Неплохо бы исправить»: обычно такие дефекты не оказывают влияния на функционирование приложения.
    //Это может быть плохо сформулированное сообщение об ошибке. Или словесное выражение на экране, которое можно улучшить.
    //Таким дефектам назначается низкий приоритет.  Их можно исправить, но это необязательно.
    //Примеры. Идея упростить применение функции.  Или…  Добавление подсказки, как работать с текущим экраном.


    //Подробнее о приоритете

    //Уровень приоритета назначается дефекту, чтобы обозначить, КАК СКОРО следует его исправить.
    //То есть приоритет проблемы указывает на степень срочности, с которой необходимо заняться дефектом.
    //Приоритеты могут быть следующие: высокий, средний, низкий.
    //Как правило, дефекты в существующих или недавно добавленных функциях приоритетнее дефектов,
    //обнаруженных в функциях, которые добавляются в настоящее время.

    //Дефекты с низким приоритетом: это незначительные проблемы без серьёзного влияния на функциональность.
    //Их исправление часто переносят на следующий выпуск.
    //Примеры: неединообразные элементы внешнего оформления, орфографические ошибки или неверное выравнивание.

    //Дефекты со средним приоритетом: это ошибки, которые необходимо исправить,
    //но которые не оказывают влияния на функционирование приложения.
    //Примеры: поля с некорректным форматом или поля, расположенные в неверной части экрана.

    //Дефекты с высоким приоритетом: такие дефекты оказывают значительное влияние на функционирование ПО.
    //Их необходимо исправить так скоро, насколько это только возможно.
    //Такие дефекты часто относятся к блокирующим препятствиям, поскольку они не позволяют продолжать тестирование.
    //Примеры: аварийное завершение приложения; пользователь не может выполнить действие;
    //повреждение данных; проблемы с безопасностью.


    //Итог:
    //Приоритет и критичность используют совместно, чтобы определить, как скоро необходимо исправление дефекта.


    //Системы управления дефектами

    //Системы для управления дефектами — это программные приложения,
    //позволяющие команде составлять и регистрировать отчёты о найденных дефектах и отслеживать их.
    //Без них команде очень трудно понять, все ли части приложения прошли тщательное тестирование до окончательного выпуска,
    //что, в свою очередь, критически важно для достижения высокого качества продукта.

    //Для чего компаниям использовать инструменты отслеживания дефектов?

    //Появление дефектов неизбежно, но их выявление на ранних стадиях и исправление помогает экономить время и деньги.
    //Как вы можете себе представить, в течение цикла разработки возможно появление весьма БОЛЬШОГО МНОЖЕСТВА дефектов.
    //Всех их было бы трудно отслеживать, используя только электронные таблицы или электронную почту.
    //Давайте перечислим некоторые ключевые полезные свойства инструментов отслеживания дефектов:

    // - Помогают выпускать программные продукты высокого качества, укладываясь в срок и бюджет.

    // - Снижают стоимость разработки, повышая эффективность управления задачами и отслеживания дефектов.

    // - Помогают анализировать закономерности и тенденции, связанные с дефектами.

    // - Улучшают процессы взаимодействия и обмена информацией внутри команды благодаря
    //обеспечению наглядности статуса дефекта и хода работ по его исправлению.

    // - Обеспечивают работу хранилища документов, способствующих поиску и исправлению неисправностей и
    //другой деятельности команды, а также прослеживаемости и прозрачности процесса разработки.

    // - Их легко адаптировать и масштабировать в рамках организации.


    //Принципы работы

    //С помощью систем управления дефектами регистрируют и отслеживают дефекты, найденные в процессе тестирования ПО.
    //Системы фиксируют в базе данных полные сведения о заявленных дефектах и обеспечивают доступ к хранилищу всем членам команды.
    //Хранящиеся данные служат для определения, как и с каким приоритетом будет исправляться дефект.

    //Основные функции по отслеживанию дефектов:

    // - Фиксация: при обнаружении дефекта нужно записать все требуемые сведения,
    //чтобы ответственный разработчик мог исправить дефект.
    //Информация, которую необходимо предоставить, обсуждалась выше.
    //Документация должна быть достаточно полной, чтобы разработчик смог исправить дефект,
    //не обращаясь за разъяснениями к тестировщику.

    // - Приоритизация: каждому дефекту нужно присвоить приоритет и степень критичности,
    //чтобы обозначить силу влияния дефекта на разрабатываемую систему.
    //Это поможет команде разработчиков распределить силы и сосредоточиться на самых безотлагательных дефектах.
    //Инструменты управления дефектами помогают управиться с запутанным жизненным циклом дефектов,
    //тем самым способствуя достижению высокого качества приложения.

    // - Отслеживание: важно сохранить способность отслеживать ход процесса даже при большом множестве
    //дефектов с большим разнообразием текущих статусов.
    //Инструменты управления дефектами с помощью хранилища данных позволяют
    //членам команды оставаться в курсе статусов дефектов и других соответствующих сведений.


    //Jira
    //Помимо отслеживания состояния проекта и хранения требований, Jira - инструмент для отслеживания дефектов.
    //Дефекты, приведенные выше, созданы в Jira.
    //Обратите внимание, какие поля из "канонического" дефекта отсутствуют в Jira по умолчанию?
    //Есть ли какие-то дополнительные поля?

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/EYLyRGYRG-Eswm82_y4bZmvO05zhbVdXb.png

    //Критичность - Характеризует влияние дефекта
    //Приоритет - Характеризует срочность работ по дефекту
    //Категории критичности - Серьёзный, средний, несущественный
    //Уровни приоритета дефектов - Низкий, средний, высокий
    //Статусы дефектов - Новый, назначен, повтор, закрыт
    //Информация, необходимая в отчёте о дефекте - Заголовок, ожидаемый результат, снимки экрана


    //Результаты урока

    //1
    //Дефекты — неизбежная часть процесса тестирования программного обеспечения.

    //2
    //Умение документировать и отслеживать дефекты — критически важный навык для успеха тестировщика.

    //3
    //В большинстве компаний для отслеживания дефектов используют специальное ПО.
    //Если полноценно освоить такие системы управления дефектами, они значительно облегчат работу тестировщиков.


}
