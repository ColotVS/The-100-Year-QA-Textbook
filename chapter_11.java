public class chapter_11 {
    //#11.1 Как устроены сети: Теория

    //План урока
    //Место сетей в процессе обеспечения качества и связанные с ними задачи
    //Основные понятия сетей
    //Обзор процессов, участвующих в передаче данных


    //Введение

    //Вычислительные сети и обеспечение качества
    //Хорошему QA-инженеру необходимо знать принципы устройства сетей и уметь с ними работать по следующим причинам:

    //Большинство современных приложений являются сетевыми (то есть работают с сетями):
    //мобильные приложения, электронная коммерция (англ. e-commerce), банковские приложения, средства удалённого доступа и VPN, игры.
    //Для эффективного тестирования сетевых приложений нужно немалое количество знаний и навыков в области сетей.

    //Зачастую лишь 20 % кода сетевого приложения составляет прикладная логика, а остальные 80 % — это обработчики ошибок,
    //поскольку передача данных через сети даже в наши дни сопряжена с проблемами надёжности и безопасности.

    //Хотя дефекты, связанные с работой в сетях, встречаются не так часто, как,
    //например, связанные с интерфейсом, их появление довольно болезненно и критично.
    //Их трудно обнаружить и локализовать, не обладая соответствующими навыками.

    //Такие навыки крайне полезны, но (к сожалению для ИТ-индустрии) редко встречаются среди специалистов обеспечения качества.
    //Поэтому они могут стать вашим преимуществом на рынке труда.

    //В отличие от знаний, специфичных для операционных систем (например, Windows или Linux),
    //принципы работы сетей и соответствующие навыки и инструменты
    //по большей части являются общими для любого современного устройства от смартфонов до суперкомпьютеров.

    //Получение навыков работы с сетями — прекрасная инвестиция,
    //так как изменения здесь происходят очень медленно (по крайней мере, это касается базовых принципов).
    //Например, семейство протоколов TCP/IP v4 было представлено в 80-х и широко используется по сей день — спустя 40 лет.
    //Семейство протоколов IPv6 представлено в 1995 году и до сих пор не проникло в повседневную жизнь.


    //Для каких именно задач инженер по обеспечению качества будет применять эти навыки и знания:

    //Поиск и локализация дефектов программного обеспечения (ПО), которые связаны с работой с сетями.

    //Переконфигурация и (или) развёртывание тестового окружения для выполнения тестов.

    //Качественное проектирование тестов и проведение тестирования сетевой части приложения.

    //Улучшение документации по тестированию в случае, когда необходимо добавить сведения, касающиеся сетей.


    //В ходе первого урока мы кратко поговорим о том, как работает сеть Интернет.

    //Давайте посмотрим, что происходит, когда в браузере открывается веб-сайт
    //https://example.com
    //(это реально существующий сайт, часто используемый в качестве примера).


    //Подготовка рабочего окружения

    //Задания из этого раздела учебника можно выполнить на компьютере под управлением Windows либо macOS.


    //Основные понятия сетей

    //В первую очередь необходимо познакомиться с двумя важными понятиями:
    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/CIVeAXsw2nxfJGvG_jLPz0XYUMeR4Xggv.png
    //Модель клиент-сервер

    //Большая часть данных в Интернете передается между двумя узлами.
    //Первый узел — это программа, которая хочет получить данные, называемая "клиент".
    //В нашем примере клиентом является веб-браузер.
    //Когда вы открываете веб-сайт, браузер пытается подключиться к этому сайту и запросить данные.

    //Второй узел — это сервер, программа, обрабатывающая ваш запрос (здесь и далее в этой главе под сервером мы понимаем программу,
    //а не специальный компьютер, отличающийся от вашего ноутбука или настолького ПК).

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/eGkQtg7KG0BT99N5_HwskMZIlCsIvdYYI.png
    //HTTP как пример протокола
    //Протоколы

    //Для общения с кем-либо мы должны разговаривать с собеседником на одном языке.
    //В области сетей такие языки называются протоколами.
    //Они устанавливают правила общения между компьютерами, чтобы те могли отправлять и принимать данные.
    //Существует множество протоколов различного назначения.
    //Большинство из них формально описано в общедоступных документах RFC (Request for Comments — предложение для обсуждения).
    //Например, при подключении по Wi-Fi задействуется протокол 802.11.
    //Также вы используете протоколы HTTP и HTTPS каждый раз, когда открываете веб-сайты.
    //С помощью этих протоколов браузер связывается с удалённым веб-сервером.

    //При выполнении нашего примера браузер отправляет серверу с адресом example.com сообщение, похожее на следующее:
    //«передай мне содержимое главной страницы сайта example.com».
    //Такой тип запроса называется GET - показать содержимое чего-либо.
    //Это не единственный тип HTTP-запроса, но для наших текущих целей его пока достаточно.
    //В случае успешного выполнения запроса сервер ответит специальным кодом - 200 (успех, ОК).
    //Другие коды ответов сервера также будут рассмотрены в следующих модулях.


    //Практическое упражнение

    //Откройте сайт example.com в браузере, затем откройте терминал и попробуйте "пообщаться"
    //с веб-сервером напрямую с помощью инструментов командной строки.

    //Вы можете включить Telnet Client с помощью классической панели управления.
    //Вы можете использовать его, добавляя или удаляя дополнительные функции других пользователей в Windows.

    //Как включить Telnet-клиент с помощью панели управления:
    //1 - Нажмите Win + R, чтобы открыть Выполнить.

    //2 - Введите control и нажмите OK, чтобы открыть панель управления.

    //3 - В панели управления нажмите на Удаление программы в разделе Программы и компоненты.

    //4 - На левой панели нажмите на "Включить или выключить функцию Windows".

    //5 - В диалоговом окне "Функции Windows" прокрутите вниз и выберите Клиент Telnet.

    //6 - Нажмите OK и дождитесь установки функции.
    //После установки перезагрузите компьютер, чтобы применить изменения и включить функцию.



    //1 - set localecho
    //2 - open example.com 80
    //GET / HTTP/1.1
    //Host: example.com


    //Подведём итог
    //Всё сетевое взаимодействие осуществляется в модели "клиент-сервер".

    //Для каждого сетевого приложения, при общении между клиентом и сервером применяется свой "язык", называемый "протоколом".


    //Адреса и маршрутизация

    //Нужно узнать имя: Cистема доменных имён DNS

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/j28HIGRjNRg-RPoX_xoU9h7C6EwH8yWkE.png
    //Схема обмена данными в рамках протокола DNS (Domain Name System)

    //Вы написали в адресной строке веб-браузера «example.com» и нажали Enter.
    //Адрес example.com понятен людям, однако компьютерам ничего о нём не известно.
    //Это просто удобное для людей доменное имя, которое для использования компьютером
    //необходимо преобразовать в так называемый IP-адрес.
    //Процесс преобразования одного адреса в другой называется resolving («разрешение»).

    //Этот процесс - "разрешение имени", или, если короче, resolving - работает следующим образом:
    //ваша операционная система берет адрес DNS-сервера из своих сетевых настроек.
    //Когда вы пытаетесь подключиться к ресурсу с определённым доменным именем,
    //ОС отправляет серверу DNS специальный запрос: «отправь мне IP-адрес, соответствующий имени example.com».
    //Получив запрос, сервер DNS ищет в очень большой таблице адрес для имени example.com и отправляет результат.

    //Теперь компьютер знает адрес ресурса с именем example.com.


    //Практическое упражнение

    //3 - Выясните адрес DNS-сервера, используемого вашей ОС, с помощью инструментов командной строки
    //ipconfig /all

    //4 - Узнайте IP-адрес сервера example.com
    //nslookup example.com


    //Ещё больше чисел: IP-адреса и порты

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/s7tlSH8poMiNQ1iO_8bdyLThKYRyZ0CXF.png
    //Взаимодействие клиент-сервер с помощью разных протоколов прикладного уровня (DNS и HTTPS) и портов (53 и 443 соответственно)

    //Итак, у нас теперь есть IP-адрес. Но что это такое?

    //IP-адрес — это набор из четырёх чисел, разделённых точками.
    //Каждое число (они называются октетами) должно быть между 0 и 255.
    //Например: 127.0.0.1, 8.8.8.8 или 192.168.0.1.
    //Вы можете воспринимать его как почтовый индекс, необходимый для отправки посылки определённому человеку.
    //IP-адрес есть у всех устройств, подключённых к современным сетям.
    //В примере ниже в качестве IP-адреса компьютера с веб-браузером будет использоваться 10.8.0.2.

    //Чтобы установить соединение с удаленным узлом, нужно знать еще одно число, называемое номером "порта".
    //Если IP-адрес — это почтовый индекс здания, то порт — это дверь с определённым номером в этом здании.
    //В большинстве случаев каждый номер порта используется только для конкретной службы или протокола.
    //Нам необходимо установить соединение HTTPS, поэтому будем использовать номер порта 443
    //(он используется для этого протокола по умолчанию, поэтому его не нужно будет указывать).
    //Для примера также предположим, что для службы DNS используется порт 53.

    //Примечание: список широко известных портов и соответствующих сетевых сервисов можно узнать по этой ссылке
    //https://ru.wikipedia.org/wiki/Список_портов_TCP_и_UDP


    //Практическое упражнение

    //5 - Откройте настройки сети вашего компьютера в графическом интерфейсе и выясните его IP-адрес (или IP-адреса, если их несколько).
    //Панель управления\Сеть и Интернет\Центр управления сетями и общим доступом -> Сведения о сетевом подключении

    //6 - Запустите командную оболочку и выясните IP-адрес(а) вашего компьютера
    //ipconfig


    //Нужен путь: Маршрутизация

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/LvPnrKyuxAg1vk3t_gKYRxkqiY1T2mK64.png
    //Ваш узел должен каким-то образом связаться с сервером example.com.
    //Это достигается с помощью механизма маршрутизации

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/zRNbDhxeYclrURNq_dYLwiiGrEKBEpr5q.png
    //Однако маршрутизация не нужна для доступа к компьютерам в вашей локальней сети


    //Итак, у нас есть адреса и номера портов, чтобы можно было отправить запрос.

    //Но есть одна маленькая проблема: мы не знаем, как добраться до сервера назначения,
    //поскольку он может находиться где угодно, даже в другой стране или на другом континенте.
    //На самом деле нам не нужно знать полный маршрут, так же как нам не нужно его знать, когда отправляем открытку другу.
    //Нам необходимо лишь найти ближайший почтовый ящик.

    //Скорее всего, ваш компьютер уже подключен к локальной сети, и у вас уже есть  IP-адрес;
    //кстати, IP расшифровывается как "Internet Protocol", т.е. "протокол межсетевого общения".
    //Кроме того, если у вас дома есть роутер, то поздравляем — у вас уже есть собственная маленькая локальная сеть!

    //По сути, Интернет - не что иное, как огромное количество сетей, соединенных друг с другом.
    //Как каждый компьютер, подключённый к Интернету, обладает IP-адресом, так и каждый IP-адрес является частью некой сети.
    //У сетей тоже есть адреса, состоящие из двух частей, разделённых косой чертой:
    //адрес сети (network address)
    //маска подсети (netmask).

    //Адрес сети выглядит абсолютно так же, как IP-адрес узла.
    //А маска сети (или "подсети", могут применяться оба термина) — это просто число между 0 и 32,
    //с помощью которого компьютер узнаёт размер сети и диапазон IP-адресов, доступных в ней.

    //Мы изучим подсети подробнее в ходе следующих уроков, а сейчас нужно знать следующее:

    //Чем больше значение маски подсети, тем меньше размер подсети и тем меньше IP-адресов в ней.
    //Например, маска /24 соответствует 256-и IP-адресам, а /28 — только 16-и.

    //Также маску подсети можно записать в длинной форме. В этом случае она выглядит похожей на IP-адрес.
    //Например, /16 и 255.255.0.0 — это одна и та же маска подсети в короткой и длинной форме соответственно.

    //Существует 33 возможные маски подсети.
    //Полный список можно найти здесь.
    //https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#IPv4_CIDR_blocks


    //Вот пример определения сети: 10.8.0.0/24, где 10.8.0.0 — это адрес сети, а 24 — это маска подсети.
    //24 эквивалентно 255.255.255.0.

    //Операционная система применяет адреса сетей и их маски внутри очень важной таблицы,
    //называемой "таблица маршрутизации" (routing table).
    //С помощью этой таблицы компьютер узнаёт, как подключиться к тому или иному адресу.

    //Давайте посмотрим на пример из компьютера с ОС Linux:
    //[user@host]$ ip route list
    //default via 10.8.0.1 dev eth0 proto dhcp src 10.8.0.2 metric 1024
    //10.8.0.0/24 dev eth0 proto kernel scope link src 10.8.0.2
    //192.168.0.0/24 dev eth1 proto kernel scope link src 192.168.0.2

    //Мы видим, что компьютер подключён к двум локальным сетям, 10.8.0.0/24 и 192.168.0.0/24,
    //и обладает внутри каждой из этих сетей IP-адресами 10.8.0.2 и 192.168.0.2 соответственно.

    //Если пользователь попытается получить доступ к одному из узлов сети 10.8.0.0/24,
    //то компьютер будет использовать для этого устройство с именем eth0.
    //При попытке пользователя подключиться к узлу сети 192.168.0.0/24 компьютер использует устройство с именем eth1.
    //Но что, если пользователь хочет подключиться к ресурсу с именем example.com?
    //Мы не видим ничего похожего на адрес 93.184.216.34 (это IP-адрес ресурса с именем example.com).

    //Внутри каждой сети, подключенной к интернету (или просто к другим сетям, даже без выхода в Интернет), должен быть шлюз.
    //Шлюз — это специальным образом сконфигурированный компьютер или сетевое устройство,
    //подключённое к двум или более сетям и способное пересылать данные из одной сети в другую.
    //Наиболее распространённым примером аппаратного сетевого шлюза является домашний роутер.
    //IP-адрес шлюза указывается в настройках сети каждого подключенного к этой сети компьютера.

    //Таким образом, когда пользователь хочет установить соединение с 93.184.216.34
    //(или любым другим узлом из внешних сетей), операционная система будет применять маршрут по умолчанию,
    //чтобы отправить клиентский запрос через шлюз с адресом 10.8.0.1.
    //Далее ближайший шлюз пересылает запрос другому шлюзу, тот в свою очередь — следующему и т. д.
    //Каждый шлюз маршрута называют  "хоп", или транзитный узел.
    //Таким образом ваш запрос и достигает сервера example.com.

    //Получив запрос, сервер формирует ответ и отправляет его аналогичным способом.


    //Практическое упражнение

    //7 - Выясните адрес и маску вашей локальной сети:
    //ipconfig

    //8 - Узнайте максимально возможное количество IP-адресов, а также первый и последний адреса в вашей сети
    //https://www.calculator.net/ip-subnet-calculator.html
    //Total Number of Hosts: 256
    //Usable Host IP Range:	192.168.0.1 - 192.168.0.254

    //9 - Узнайте содержимое таблицы маршрутизации и найдите адреса шлюзов, в особенности шлюза по умолчанию:
    //route -4 PRINT
    //Адрес шлюза по умолчанию: 192.168.0.1
    //Адрес шлюза: 192.168.0.15

    //10 - Постройте маршрут от вашего узла до сервера example.com:
    //tracert example.com


    //Теперь вы знаете следующее:

    //DNS применяется для преобразования человекочитаемых доменных имен в машинно-читаемые IP-адреса

    //IP-адрес идентифицирует каждый компьютер, подключенный к сети

    //Для получения доступа к компьютерам из других сетей обязательно нужна маршрутизация.


    //Погружение в глубину: Физический уровень

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/kQJkmHYRSOqMFLyV_hgUltffnGXgstFGY.png
    //Как всё это выглядит с точки зрения аппаратного обеспечения

    //До сих пор мы говорили о процессах внутри программного обеспечения.
    //Но что насчёт кабелей, подключённых к вашему роутеру? Это требует отдельного рассмотрения.

    //В момент, когда данные уже готовы к передаче, клиентская ОС запрашивает сетевой адаптер для отправки
    //этих данных по кабелю или беспроводному каналу. Сетевому адаптеру ничего не известно об IP-адресах,
    //масках посети, шлюзе, используемом по умолчанию, и других программных сущностях,
    //таких как ОС или предпочитаемый веб-браузер. Зато ему известен свой уникальный аппаратный адрес,
    //называемый MAC-адресом (Media Access Control address — адрес управления доступом к среде передачи данных).
    //MAC-адрес состоит из шести пар шестнадцатеричных символов, разделённых двоеточиями, например 46:09:9f:f5:87:aa.

    //К этому моменту уже известно, что узел example.com находится за пределами вашей сети,
    //поэтому вам нужен шлюз (в данном случае это 10.8.0.1).
    //Первым делом операционная система запросит сетевой адаптер отправить специальное широковещательное сообщение:
    //«узел с IP 10.8.0.1, ответь, мне нужен твой MAC-адрес, чтобы пообщаться с тобой»
    //(при этом 10.8.0.1 — адрес из нашей локальной сети).
    //В случае успеха операционная система получит следующую информацию:
    //«узел с IP-адресом 10.8.0.1 обладает MAC-адресом 46:09:9f:f5:87:aa», и запишет её в специальную таблицу.
    //В этой таблице отображаются устройства, с которым ваш узел "общался" в пределах локальной сети.
    //Так работает протокол ARP (Address Resolution Protocol — протокол определения адресов).

    //На следующем шаге клиентская ОС запрашивает сетевой адаптер передать сообщение вида
    //"Узел с MAC-адресом  46:09:9f:f5:87:aa, для тебя есть сообщение: [текст сообщения]".
    //Операционная система роутера (внутри этой маленькой коробочки также есть ОС)
    //поместит ваше сообщение в пакет программного уровня, прочтёт IP-адрес узла назначения,
    //выберет нужный интерфейс для дальнейшей пересылки и отправит сообщение через физический уровень этого интерфейса.

    //С этой точки и начинается большое путешествие.

    //Сетевое взаимодействие, описанное выше, относится к уровню
    //Data Link Layer в рамках стека TCP/IP, который будет рассматриваться позже в рамках модуля "Сети".

    //Физический уровень (Physical Layer) стека TCP/IP описывает передачу импульса или радиосигнала,
    //способы помехоустойчивого кодирования, и т.п. На этом уровне не происходит взаимодействия ПО.

    //Протокол ARP применяется  для преобразования адресов только внутри локальной сети,
    //его сообщения не могут передаваться через шлюзы в другие сети.


    //Сетевые адаптеры и IP-адреса

    //Сетевой адаптер (также может применяться термин "сетевой интерфейс") - физическое или виртуальное оборудование,
    //предназначенное для приема-передачи сигналов по сети.
    //Узлы и сетевые интерфейсы связаны как "один ко многим" (аналогично сущностям баз данных), например:

    //Компактный ноутбук может иметь всего 1 встроенный физический сетевой интерфейс, это WiFi-адаптер

    //Ноутбук большего размера как правило имеет 2 и более физических сетевых интерфейса,
    //например один WiFi-адаптер и одну сетевую Ethernet-карту

    //Как ни странно, но современные смартфоны имеют как минимум 2 сетевых интерфейса (оба - беспроводные):
    //один для передачи данных по мобильным сетям (4G или 5G), второй - WiFi-адаптер

    //Маршрутизаторы как правило имеют 2 или более сетевых интерфейса для соединения с разными сетями и передачи данных между ними

    //При установке VPN-соединения в системе появляется еще минимум 1
    //виртуальный сетевой интерфейс для обмена данными внутри VPN-соединения

    //Даже если у компьютера нет ни одного исправного физического сетевого интерфейса,
    //все равно в системе присутствует минимум 1 виртуальный интерфейс,
    //часто называемый loopback-интерфейсом или "интерфейсом обратной петли".
    //Он нужен для взаимодействия клиентского и серверного ПО, запущенного на одном и том же узле.

    //Не бывает случаев, когда один и тот же сетевой интерфейс принадлежит нескольким разным узлам.
    //Даже если на узле запущено несколько виртуальных машин,
    //которые имеют доступ к одному и тому же физическому сетевому интерфейсу,
    //каждая из виртуальных машин имеет свой собственный виртуальный сетевой интерфейс.


    //Как отмечалось выше, должна быть связь между сетевыми интерфейсами и IP-адресами.
    //Эта связь также имеет тип "один ко многим"; примеры ниже указаны в порядке убывания вероятности встретить такие настройки:

    //Самый частый случай: 1 сетевой интерфейс имеет 1 IP-адрес.
    //Чаще всего именно так и происходит, когда вы подключаете узел к локальной сети.

    //Один сетевой интерфейс не имеет ни одного настроенного IP-адреса.
    //Пример: вы включаете ноутбук там, где нет никаких точек доступа WiFi.

    //Один сетевой интерфейс имеет несколько IP-адресов.
    //Такие настройки могут быть встретиться на сетевых устройствах или серверах в специфических ситуациях.

    //Один и тот же IP-адрес НЕ может быть назначен нескольким сетевым интерфейсам в рамках одной сети.


    //Практическое упражнение

    //11 - Выясните MAC-адрес вашего сетевого интерфейса
    //ipconfig

    //12 - Получите содержимое ARP-таблицы вашего компьютера
    //arp /a


    //Подведём итоги

    //Итак, что нового вы узнали о вычислительных сетях?

    //Любое сетевое приложение работает в рамках модели клиент-сервер.
    //Приложение-клиент отправляет запросы серверу, который обрабатывает запросы и отправляет ответные сообщения.

    //Клиенты и серверы взаимодействуют, используя протоколы.

    //Система доменных имён DNS служит для преобразования удобных для людей доменных имён (например, example.com)
    //в IP-адреса (например, 93.184.216.34), которые обрабатываются компьютерами.

    //IP-адреса служат для идентификации узлов, подключённых к сетям.
    //У сетей есть свои адреса, дополненные масками подсети.
    //Маски определяют, сколько узлов может вместить конкретная сеть.

    //Интернет — это множество сетей.
    //Для общения узлов из разных сетей применяется специальная процедура, называемая маршрутизацией.

    //Аппаратное обеспечение исполняет важную роль в работе сетей.
    //Например, аппаратные MAC-адреса широко используются в локальных сетях (в дополнение к IP-адресам) для связи между узлами.

    //Сетевые интерфейсы напрямую связаны с IP-адресами. Чаще всего, каждый сетевой интерфейс имеет соответствующий IP-адрес.

    //https://imgur.com/a/vIVw4TI

}


