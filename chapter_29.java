public class chapter_29 {
    //#29.1 Статическое тестирование: Теория

    //План урока
    //Что такое статическое тестирование и для чего оно нужно?
    //Подходы к статическому тестированию


    //Что такое статическое тестирование и для чего оно нужно?

    //Мы начнём изучение методов тестирования со статического тестирования.
    //И это не случайно, поскольку в реальности это и есть отправная точка тестирования приложения.
    //Две главные составляющие тестирования приведены ниже.

    //1 - Статическое тестирование — это исследование «традиционных» требований, пользовательских историй,
    //прототипов, макетов приложения и программного кода, тестовой документации
    //(планов тестирования, тест-кейсов и т. д.) без запуска программы.

    //2 - Динамическое тестирование — это тестирование самого программного обеспечения.
    //Именно так тестирование и представляется большинству людей:
    //запуск программы и проверка на наличие отклонений от ожидаемого поведения.

    //Вполне понятно, как проводить динамическое тестирование,
    //в то же время смысл статического тестирования не столь очевиден.
    //Подходы к статическому тестированию зависят от компании, проекта и команды,
    //но у них есть одна общая черта — исследование коллегами на наличие возможных дефектов.

    //На рисунке ниже показаны затраты на исправление дефекта в зависимости от этапа обнаружения.
    //Очевидно, что чем раньше обнаружить дефект,
    //тем дешевле обойдётся его исправление (дешевле с точки зрения времени и денег).

    //https://mentorpiece.org/wp-content/uploads/articulate_uploads/the-100-year-qa-textbook-яussian-edition-1-0-2-xapi-QP0TAWc6/assets/staUvauUPYVY86KY_tvZZQO3q15-nJzde.jpg

    //Из диаграммы следует, что самым «дешёвым» является дефект, который обнаружен на этапе разработки требований или архитектуры.
    //После начала программирования затраты на исправление в пять раз выше по сравнению с исправлением на этапе определения требований.

    //То же правило применимо и к тестовой документации.
    //Чем раньше исследование коллег покажет потенциальные проблемы,
    //тем меньше затрат потребуется для их решения.


    //Какие материалы подлежат анализу в рамках этого подхода?

    //1 - Программный код. В современных информационных технологиях практически невозможно разработать
    //программное обеспечение без перекрёстного обзора (cross-review).

    //2 - Требования пользователей. Перед тем как требования можно будет применять для разработки и тестирования,
    //они обязательно должны проходить оценку на согласованность, ясность и другие параметры
    //(рассмотрены в одной из предыдущих глав).

    //3 - Тестовая документация. Хорошей практикой является cross-review (перекрестная проверка) планов тестирования,
    //тест-кейсов и других материалов, хотя с формальной точки зрения это не всегда обязательно.


    //Виды статического тестирования

    //Инспекция

    //Участники инспекции выполняют следующие роли:

    //Координатор.
    //Член команды, организующий процесс инспекции.

    //Ридеры. (Readers).
    //Члены команды, которые просматривают и оценивают фрагмент кода,
    //требований или тестового документа, написанного автором.

    //Автор.
    //Член команды, предоставивший что-либо для оценки командой.

    //Секретарь.
    //Член команды, ведущий протокол собрания и регистрирующий все найденные ошибки и комментарии.

    //Руководитель или автор инициирует инспекцию, когда автор готов вынести своё творение на суд команды.
    //Инспекцию могут проходить результаты работы не только начинающих,
    //но и старших специалистов, поскольку ничто человеческое им также не чуждо.

    //Ридер (кто-либо, знакомый с проектом не хуже автора или даже лучше) изучает код, требования или документацию
    //и составляет комментарии к ним с точки зрения возможных ошибок.

    //Затем организуется собрание всех участников для оценки материала, созданного автором.

    //На собрании автор читает и показывает свой материал
    //и объясняет принятые решения ридерам, отвечает на их комментарии,
    //приводит контраргументы и старается доказать, что его выбор верен.

    //И конечно, здесь нужен координатор, иначе инспекция может обратиться в бесконечный спор.

    //Преимущества инспекций:
    //Доскональность.
    //Полноценное документирование процесса.
    //В обсуждении рождается истина.

    //Недостатки инспекций:
    //Занимают много времени, требуют участия большого количества членов команды.
    //Требуют специальных знаний для проведения.

    //Пример инспекции

    //Иван — тестировщик в ООО «Отличная компания».
    //Он приготовил тест-кейсы для новой функции продукта, но не уверен, что учёл всё необходимое.
    //Он запросил формальную инспекцию своих тест-кейсов.

    //Мария, руководитель Ивана, созывает собрание и приглашает коллег к участию. Приглашение получают следующие сотрудники:
    //Иван в качестве автора.

    //Фёдор в качестве секретаря.
    //Фёдор очень внимателен к деталям и весьма организован.
    //Всем известно, что он хороший тестировщик.
    //Он всё задокументирует и отправит протокол через несколько минут после собрания.

    //Раиса, Виктор и Фома в качестве ридеров. Они будут исследовать тест-кейсы Ивана.
    //Раиса — старший инженер по тестированию с большим опытом.
    //Виктор очень хорошо знаком с проектом, он работает в «Отличной компании» уже пять лет.
    //Фома хорошо известен своей способностью находить ошибки где угодно.

    //Мария будет координатором.

    //За два дня до собрания ридеры получают тест-кейсы, составленные Иваном, и исследуют их.
    //Все комментарии заносятся в документы и отправляются адресатам до начала собрания.

    //На собрании Иван отвечает на комментарии, а Мария направляет процесс,
    //чтобы собрание не превратилось в длинное бесплодное обсуждение.
    //Фёдор документирует вопросы, ошибки, комментарии и всё остальное.

    //Спустя неделю Иван сообщает, что все ошибки исправлены и он готов к следующей инспекции.
    //Раиса, Виктор и Фома снова получают тест-кейсы, и процесс повторяется.


    //Пошаговый разбор

    //Это неформальный вид обзора, в котором задействуется автор и 1–2 коллеги.
    //Автор рассказывает о коде, требованиях или тест-кейсов в неформальной манере, а коллеги комментируют.

    //Здесь также организуется специальное собрание и у коллег должна быть возможность
    //познакомиться с документами за два дня до собрания,
    //однако роли координатора и секретаря не предусмотрены.

    //Руководители не участвуют в процессе, предоставляя команде возможность самоорганизоваться и решить проблемы без их присутствия.

    //Ошибки находятся и обсуждаются, но в рамках самого разбора не исправляются.

    //Преимущества пошагового разбора:
    //Порой менее формальный обзор приводит к лучшим результатам по сравнению с инспекцией.
    //Он занимает не так много времени, так как требует меньше участников.
    //В обсуждении рождается истина (то же преимущество, что и у инспекции, также хорошо здесь проявляющееся).

    //Недостатки пошагового разбора:
    //- Члены команды выбираются для участия в процессе по их желанию, а не по компетенциям.
    //По этой причине хорошие решения могут время от времени упускаться из виду.
    //- Отсутствие координатора может привести к длительному собранию без каких-либо результатов.
    //- Поскольку собрание неформальное, специальный протокол не требуется.
    //Из-за этого некоторые моменты собрания могут быть утрачены безвозвратно.

    //Пример пошагового разбора

    //Давайте посмотрим, что произойдёт, если Иван попросит о неформальном пошаговом разборе.

    //Мария не участвует.
    //Иван по-прежнему является автором.
    //Участие Фёдора не требуется.
    // Раиса, Виктор и Фома также будут участвовать в качестве ревьюеров.
    //Координатор для собрания не предусмотрен.

    //За два дня до собрания ридеры снова тест-кейсы, составленные Иваном, и исследуют его.

    //На собрании Иван отвечает на комментарии ревьюеров, а они объясняют,
    //почему тест-кейсы необходимо составлять именно указанным ими образом.
    //Нет ни координатора, ни руководителя, ни секретаря.
    //Можно только надеяться, что кто-то всё-таки сделает какие-либо записи.

    //Время от времени собрание можно повторять, но это не обязательно.





}
